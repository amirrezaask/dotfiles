-- vim.cmd [[ hi clear ]]
-- vim.g.colors_name = 'sitruuna'
-- vim.o.background = 'dark'
--
--
local get_hl = function(_ns_id, name)
    local spec = vim.api.nvim_get_hl(_ns_id, { name = name })
    return {
        name = name,
        fg = spec.fg and string.format("#%06x", spec.fg) or nil,
        bg = spec.bg and string.format("#%06x", spec.bg or 0) or nil,
        link = spec.link
    }
end

local defs = {
    get_hl(0, 'Normal'),
    get_hl(0, 'NonText'),
    get_hl(0, 'EndOfBuffer'),
    get_hl(0, 'LineNr'),
    get_hl(0, 'FoldColumn'),
    get_hl(0, 'Folded'),
    get_hl(0, 'MatchParen'),
    get_hl(0, 'SignColumn'),
    get_hl(0, 'Comment'),
    get_hl(0, 'Conceal'),
    get_hl(0, 'Constant'),
    get_hl(0, 'Error'),
    get_hl(0, 'Identifier'),
    get_hl(0, 'Ignore'),
    get_hl(0, 'PreProc'),
    get_hl(0, 'Special'),
    get_hl(0, 'Statement'),
    get_hl(0, 'String'),
    get_hl(0, 'Todo'),
    get_hl(0, 'Type'),
    get_hl(0, 'Underlined'),
    get_hl(0, 'Pmenu'),
    get_hl(0, 'PmenuSbar'),
    get_hl(0, 'PmenuSel'),
    get_hl(0, 'PmenuThumb'),
    get_hl(0, 'ErrorMsg'),
    get_hl(0, 'ModeMsg'),
    get_hl(0, 'MoreMsg'),
    get_hl(0, 'Question'),
    get_hl(0, 'WarningMsg'),
    get_hl(0, 'TabLine'),
    get_hl(0, 'TabLineFill'),
    get_hl(0, 'TabLineSel'),
    get_hl(0, 'Cursor'),
    get_hl(0, 'CursorColumn'),
    get_hl(0, 'CursorLineNr'),
    get_hl(0, 'CursorLine'),
    get_hl(0, 'StatusLine'),
    get_hl(0, 'StatusLineNC'),
    get_hl(0, 'Visual'),
    get_hl(0, 'VisualNOS'),
    get_hl(0, 'VertSplit'),
    get_hl(0, 'WildMenu'),
    get_hl(0, 'Function'),
    get_hl(0, 'SpecialKey'),
    get_hl(0, 'Title'),
    get_hl(0, 'DiffAdd'),
    get_hl(0, 'DiffChange'),
    get_hl(0, 'DiffDelete'),
    get_hl(0, 'DiffText'),
    get_hl(0, 'Directory'),
    get_hl(0, 'debugPC'),
    get_hl(0, 'debugBreakpoint'),
    get_hl(0, 'ColorColumn'),
    get_hl(0, 'Delimiter'),
    get_hl(0, 'Operator'),
    get_hl(0, 'htmlTagName'),
    get_hl(0, 'htmlTag'),
    get_hl(0, 'htmlArg'),
    get_hl(0, 'IncSearch'),
    get_hl(0, 'Search'),
    get_hl(0, 'Substitute'),
    get_hl(0, 'SpellBad'),
    get_hl(0, 'SpellCap'),
    get_hl(0, 'SpellLocal'),
    get_hl(0, 'SpellRare'),
    get_hl(0, 'Terminal'),
    get_hl(0, 'Number'),
    get_hl(0, 'CursorIM'),
    get_hl(0, 'Boolean'),
    get_hl(0, 'Character'),
    get_hl(0, 'Conditional'),
    get_hl(0, 'Debug'),
    get_hl(0, 'Define'),
    get_hl(0, 'Exception'),
    get_hl(0, 'Float'),
    get_hl(0, 'HelpCommand'),
    get_hl(0, 'HelpExample'),
    get_hl(0, 'Include'),
    get_hl(0, 'Keyword'),
    get_hl(0, 'Label'),
    get_hl(0, 'Macro'),
    get_hl(0, 'Number'),
    get_hl(0, 'PreCondit'),
    get_hl(0, 'Repeat'),
    get_hl(0, 'SpecialChar'),
    get_hl(0, 'SpecialComment'),
    get_hl(0, 'StorageClass'),
    get_hl(0, 'Structure'),
    get_hl(0, 'Tag'),
    get_hl(0, 'Terminal'),
    get_hl(0, 'Typedef'),
    get_hl(0, 'htmlEndTag'),
    get_hl(0, 'htmlLink'),
    get_hl(0, 'htmlSpecialTagName'),
    get_hl(0, 'htmlTag'),
    get_hl(0, 'htmlBold'),
    get_hl(0, 'htmlItalic'),
    get_hl(0, 'xmlTag'),
    get_hl(0, 'xmlTagName'),
    get_hl(0, 'xmlEndTag'),
    get_hl(0, 'asciidocQuotedEmphasized'),
    get_hl(0, 'diffBDiffer'),
    get_hl(0, 'diffCommon'),
    get_hl(0, 'diffDiffer'),
    get_hl(0, 'diffIdentical'),
    get_hl(0, 'diffIsA'),
    get_hl(0, 'diffNoEOL'),
    get_hl(0, 'diffOnly'),
    get_hl(0, 'diffRemoved'),
    get_hl(0, 'diffAdded'),
    get_hl(0, 'QuickFixLine'),
    get_hl(0, 'ConId'),
    get_hl(0, 'yamlBlockMappingKey'),
    get_hl(0, 'yamlFlowIndicator'),
    get_hl(0, 'markdownCode'),
    get_hl(0, 'markdownCodeDelimiter'),
    get_hl(0, 'markdownCodeBlock'),
    get_hl(0, 'markdownHeadingDelimiter'),
    get_hl(0, 'markdownLinkText'),
    get_hl(0, 'markdownItalic'),
    get_hl(0, 'cssTagName'),
    get_hl(0, 'cssClassName'),
    get_hl(0, 'cssDefinition'),
    get_hl(0, 'cssProp'),
    get_hl(0, 'fugitiveHash'),
    get_hl(0, 'pythonBuiltin'),
    get_hl(0, 'jsxComponentName'),
    get_hl(0, 'jsxTagName'),
    get_hl(0, 'NeomakeErrorSign'),
    get_hl(0, 'NeomakeWarningSign'),
    get_hl(0, 'NeomakeMessageSign'),
    get_hl(0, 'NeomakeInfoSign'),
    get_hl(0, 'NeomakeVirtualtextError'),
    get_hl(0, 'NeomakeVirtualtextWarning'),
    get_hl(0, 'NeomakeVirtualtextMessage'),
    get_hl(0, 'NeomakeVirtualtextInfo'),

}


local buf = vim.api.nvim_create_buf(true, true)

for _, def in ipairs(defs) do
    vim.api.nvim_buf_set_lines(buf, -1, -1, false, vim.split(vim.inspect(def), "\n"))
    -- print(vim.inspect(def))
end
