* Amirreza Emacs Configuration
This is my emacs configuration written in literate format.
** Basic Emacs setups
#+begin_src emacs-lisp
(setq backup-by-copying t) ;; Always copy files for backup.
(setq version-control t) ;; Use version numbers for backup.
(setq delete-old-versions t) ;; Delete old backup of files.
(setq kept-new-versions 6) ;; Number of newest versions to keep.
(setq kept-old-versions 2) ;; Number of old versions to keep.
(setq create-lockfiles nil) ;; Don't create .# files as lock.
(setq backup-directory-alist ;; all backups should go here (PATTERN . LOCATION)
      '(("." . "~/.config/emacs/backup/")))

(setq-default indent-tabs-mode nil ;; Don't insert tabs for indentation.
                tab-width 4) ;; Width of the TAB character in display.


(defalias 'yes-or-no-p 'y-or-n-p) ;; Show y or n instead of yes or no for question prompts.

(setq echo-keystrokes 0.1) ;; Show keystrokes in minibuffer faster than default.

(setq use-dialog-box nil) ;; Don't use any kind of GUI dialog box.

(setq inhibit-splash-screen 0) ;; Disable Emacs start screen.

(setq ring-bell-function 'ignore) ;; No bell ringing.

(set-terminal-coding-system 'utf-8) ;; default emacs encodings
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(setq-default fill-column 80) ;; column number which emacs start to line wrap.

(setq scroll-step 5) ;; When point moves out of screen, number of lines to scroll
(setq scroll-margin 5) ;; Scroll margin lines, when point arrives at these margins scroll the display.
(setq scroll-conservatively 101) ;; Number of lines to scroll to bring point back into view.
(setq scroll-up-aggressively 0.11) ;; When scrolling how much to move the view.
(setq scroll-down-aggressively 0.01) ;; Same as above.
(setq auto-window-vscroll nil) ;; Disable changing window-vscroll automatically.
(setq fast-but-imprecise-scrolling nil) ;; Disable fast scroll since it does not feel good.
(setq mouse-wheel-scroll-amount '(5
                                  ((shift) . 10)))
(setq mouse-wheel-progressive-speed t)

;; Horizontal Scroll
(setq hscroll-step 1) ;; Number of columns to scroll when point is to close to edge.
(setq hscroll-margin 1) ;; How many columns away from edge to start scrolling.

(setq custom-file "~/.config/emacs/custom.el") ;; Don't tamper with init.el for custom variables and use given file.
#+end_src
** Show more information in modeline
#+begin_src emacs-lisp
(column-number-mode +1) ;; Show column number in modeline.
(display-battery-mode 1) ;; Show battery in modeline.
(display-time-mode 1) ;; Show time in modeline.
(global-display-line-numbers-mode 1) ;; Ensure line numbers globally.
#+end_src
** Editor basics
#+begin_src emacs-lisp
  (use-package emacs
    :config
      (setq kill-ring-max 15) ;; Capacity of kill-ring.
      (show-paren-mode 1) ;; Highlight matching parens
      (setq show-paren-delay 0) ;; highlight matching parens instantly.
      (when (> emacs-major-version 26) (global-tab-line-mode -1)) ;; Disable tab line in Emacs 27+.
      (setq-default cursor-type 'bar) ;; Shape of the cursor.
      (blink-cursor-mode 1) ;; Cursor blinks.
      (global-hl-line-mode +1) ;; Highlight current line.
      )
#+end_src
** Appereance
#+begin_src emacs-lisp
  (use-package doom-themes :ensure t)
  (use-package doom-modeline :ensure t)
  (doom-modeline-mode 1) ;; enable doom modeline
  (load-theme 'doom-moonlight t) ;; set theme
  (set-frame-font "JetBrainsMono Nerd Font Mono 16" nil t) ;; Set font
#+end_src
** Which Key setup
show available keymaps based on what you typed
#+begin_src emacs-lisp
  (use-package which-key :ensure t
    :config 
      (setq which-key-sort-order #'which-key-prefix-then-key-order
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10)

      (setq which-key-idle-delay 0.3)

      (which-key-mode 1)

      (which-key-setup-minibuffer)
      )
#+end_src
** Evil Mode: Vim emualtion in Emacs
#+begin_src emacs-lisp
  (defun amirreza/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
     (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :ensure t
    :hook
    (evil-mode . amirreza/evil-hook)
    :init
      (setq evil-want-keybinding nil)
      (evil-mode 1)
    :bind
    (:map evil-normal-state-map
          ("g r" . 'xref-find-references)
          ("g d" . 'xref-find-definitions))
    :config
      (setq evil-want-integration t)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-ex-search-vim-style-regexp t
              evil-ex-visual-char-range t  ; column range for ex commands
              evil-mode-line-format 'nil
              ;; more vim-like behavior
              evil-symbol-word-search t
              ;; if the current state is obvious from the cursor's color/shape, then
              ;; we won't need superfluous indicators to do it instead.
              evil-default-cursor '+evil-default-cursor-fn
              evil-normal-state-cursor 'box
              evil-emacs-state-cursor  '(box +evil-emacs-cursor-fn)
              evil-insert-state-cursor 'bar
              evil-visual-state-cursor 'hollow
              ;; Only do highlighting in selected window so that Emacs has less work
              ;; to do highlighting them all.
              evil-ex-interactive-search-highlight 'selected-window
              ;; It's infuriating that innocuous "beginning of line" or "end of line"
              ;; errors will abort macros, so suppress them:
              evil-kbd-macro-suppress-motion-error t
      )
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
      (evil-global-set-key 'normal ";" 'evil-ex)
      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal)
      (evil-select-search-module 'evil-search-module 'evil-search)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
      (setq evil-want-Y-yank-to-eol t)
    )


  (use-package evil-collection
    :ensure t
    :config (evil-collection-init))

  (use-package evil-escape :ensure t
      :init
      (setq-default evil-escape-key-sequence "jk")
      (setq evil-escape-unordered-key-sequence t)
      (setq-default evil-escape-delay 0.1)
      (evil-escape-mode 1))

  (use-package evil-surround
    :ensure t
    :config (global-evil-surround-mode 1))


#+end_src
** Project based functionalities
#+begin_src emacs-lisp
  (use-package projectile
    :config
      (defvar amirreza/project-locations '("~/src/gitlab.snapp.ir" "~/src/github.com/amirrezaask" "~/src/gitlab.snapp.ir"))
      (defun amirreza/find-project ()
      "List of projects in pre defined project locations."
      (interactive)
      (let ((output '()))
          (dolist (path amirreza/project-locations)
          (dolist (p (directory-files path t)) (add-to-list 'output p))
          )
          (dired (completing-read "Project: " output))
          ))
      (global-set-key (kbd "C-c f p") 'amirreza/find-project)

      (autoload 'projectile-project-p "projectile.el")
      (defun amirreza/grep ()
      (interactive)
      (cond
      ((projectile-project-p) (consult-git-grep))
      ((executable-find "rg") (consult-ripgrep))))

      (defun amirreza/find-file ()
      "If we are in project use projectile-find-file else use internal find-file"
      (interactive)
      (cond
      ((projectile-project-p) (projectile-find-file))
      (t (call-interactively 'find-file))))

      (defun amirreza/find-symbol-at-point ()
      (interactive)
      (let* ((symbol (thing-at-point 'word)))
          (consult-ripgrep (projectile-project-root) symbol)))

      (global-set-key (kbd "C-c f f") 'amirreza/find-file)

      (global-set-key (kbd "C-c f s") 'amirreza/grep)

      (with-eval-after-load 'evil
      (evil-global-set-key 'normal (kbd "SPC f f") 'amirreza/find-file)
      (evil-global-set-key 'normal (kbd "SPC f p") 'amirreza/find-project)
      (evil-global-set-key 'normal (kbd "SPC f s") 'amirreza/grep)
      (evil-global-set-key 'normal (kbd "??") 'amirreza/grep))


    )

#+end_src
** Org mode
#+begin_src emacs-lisp
  (defun amirreza/--org-insert-elisp-code-block ()
    (interactive)
    (insert (format "#+begin_src emacs-lisp\n\n#+end_src"))
    (previous-line)
    (beginning-of-line))

  (defun amirreza/--org-insert-no-tangle ()
    ""
    (interactive)
    (insert (format ":PROPERTIES:\n:header-args: :tangle no\n:END:\n"))
    (previous-line)
    (beginning-of-line))

  (setq org-ellipsis "â¤µ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-support-shift-select t)
  (setq org-src-window-setup 'current-window)
  (setq org-startup-folded t)


  (with-eval-after-load 'org
      (define-key org-mode-map (kbd "C-c m n") 'amirreza/--org-insert-no-tangle)
      (define-key org-mode-map (kbd "C-c m b") 'amirreza/--org-insert-elisp-code-block))

  (add-hook 'org-mode-hook #'org-bullets-mode)
  (add-hook 'org-mode-hook #'toc-org-mode)
#+end_src
** Highlight indents
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook ((yaml-mode-hook . #'highlight-indent-guides)
           (focus-in-hook . #'highlight-indent-guides-auto-set-faces))
      :ensure t
      :config
      (setq highlight-indent-guides-method 'character))
#+end_src
** Expand selection smartly
#+begin_src emacs-lisp
  (use-package expand-region :ensure t
    :bind
    (("C-=" . er/expand-region)
     ("C--" . er/contract-region)))
#+end_src
** Highlight todos in code
#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :config
      (global-hl-todo-mode 1)
      (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold)))
    )
#+end_src
** Don't choke on long lines pls
#+begin_src emacs-lisp
  (global-so-long-mode 1)
#+end_src
** Emacs over SSH: Tramp mdoe
#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src
** Enable menu bar on when loading pdf tools
#+begin_src emacs-lisp
  (add-hook 'pdf-tools-ensured-hook #'menu-bar-mode)
#+end_src
** Some config file formats
#+begin_src emacs-lisp
   (use-package apache-mode :ensure t
       :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'" "access\\.conf\\'"))

     (use-package systemd :ensure t
       :mode ("\\.service\\'" "\\.timer\\'"))

     (use-package nginx-mode :ensure 
       :mode ("/etc/nginx/conf.d/.*" "/etc/nginx/.*\\.conf\\'"))

   (use-package docker-compose-mode
       :ensure t
       :mode "docker-compose\\.yml")
   (use-package dockerfile-mode :ensure t :mode "\\Dockerfile\\'")


#+end_src
** Copy env variables from default shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell :ensure t
    :config
      (setq exec-path-from-shell-shell-name "zsh")
      (exec-path-from-shell-copy-envs '("GOPROXY" "GOPRIVATE"))
      (exec-path-from-shell-initialize))

#+end_src
** Go setup
#+begin_src emacs-lisp
  (defun amirreza/go-hook ()
        (interactive)
        ;; add go binaries to exec-path
        (add-to-list 'exec-path (concat (getenv "HOME") "/go/bin")))

  (use-package go-mode
    :ensure t
    :hook
    (go-mode . #'amirreza/go-hook))
  

#+end_src
** Rust setup
#+begin_src emacs-lisp
  (defun amirreza/rust-hook ()
    (message "Rust mode loading...")
    )
#+end_src
** Zig Setup
#+begin_src emacs-lisp

#+end_src
** Python Setup
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook #'(py-autopep8-ensure-on-save))
#+end_src
** LSP Setup
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands
    lsp
    :hook
    (((purescript-mode
      go-mode
      rust-mode
      php-mode
      c-mode
      lua-mode
      python-mode
      erlang-mode
      haskell-mode
      zig-mode
      ) . lsp))

    :bind
    (:map evil-normal-state-map
          ("g i" . lsp-find-implementation)
     )
    :config
      (setq xref-prompt-for-identifier nil)
      ;; TODO lsp-ui-doc-show/hide toggle key
      (setq lsp-clients-lua-language-server-install-dir "/home/amirreza/.local/lua-language-server")
      (setq lsp-clients-lua-language-server-bin (concat lsp-clients-lua-language-server-install-dir "/bin/lua-language-server"))
      (setq lsp-clients-lua-language-server-main-location (concat lsp-clients-lua-language-server-install-dir "/main.lua"))
    )

  (use-package lsp-ui :ensure t
    :bind
    (:map evil-normal-state-map
          ("K" . amirreza/lsp-ui-doc-toggle))
    :init
    (setq amirreza/--lsp-ui-doc-state 0)
    (defun amirreza/lsp-ui-doc-toggle ()
      "Toggle doc popup"
      (interactive)
      (if (= amirreza/--lsp-ui-doc-state 0)
          (progn (lsp-ui-doc-show) (setq amirreza/--lsp-ui-doc-state 1))
        (progn (lsp-ui-doc-hide) (setq amirreza/--lsp-ui-doc-state 0)))
      ))

 #+end_src
** Company mode for Autocomplete
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (prog-mode-hook . company-mode)
    :bind
    (:map company-active-map
          ("C-n" . #'company-select-next)
          ("C-p" . #'company-select-previous)
          ("C-o" . #'company-other-backend)
          ("<tab>" . #'company-complete-common-or-cycle)
          ("RET" . #'company-complete-selection)
          )
    :config
      (setq company-minimum-prefix-lenght 1)
      (setq company-tooltip-limit 30)
      (setq company-idle-delay 0.0)
      (setq company-echo-delay 0.1)
      (setq company-show-numbers t)
      (setq company-backends '(company-capf company-dabbrev company-files company-dabbrev-code))
    )
#+end_src
** Git messenger: Git blame
#+begin_src emacs-lisp
  (use-package git-messenger :ensure t
    :config
      (setq git-messenger:show-detail t)
      (setq git-messenger:use-magit-popup t)
    )
#+end_src
** Yasnippets: Code snippets
#+begin_src emacs-lisp
  (use-package yasnippet :ensure t
    :bind
    (("C-x C-x" . yas-expand)
     ("C-x C-l" . yas-insert-snippet))
    :config
      (yas-global-mode 1)
    )
#+end_src
** Eldoc mode
#+begin_src emacs-lisp
    (global-eldoc-mode 1)
#+end_src
** Vertico And Consult
#+begin_src emacs-lisp
    (use-package vertico
      :ensure t
      :init
      (vertico-mode 1)
      :config
      (setq vertico-resize nil
            vertico-count 17
            vertico-cycle t
            completion-in-region-function
            (lambda (&rest args)
              (apply (if vertico-mode
                         #'consult-completion-in-region
                       #'completion--in-region)
                     args))))
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package consult
    :ensure t
    :bind
    (:map evil-normal-state-map
          ("SPC SPC" . find-file)
          ("??" . consult-ripgrep)
          ("SPC f p" . amirreza/find-project)
          ("SPC g" . magit-status)
          ("SPC h f" . describe-function)
          ("SPC h k" . describe-key)
          ("SPC h v" . describe-variable)
          ("SPC h a" . describe-apropos)
          )
    :config
    (persp-mode 1)
    (define-key evil-normal-state-map (kbd "SPC w s") 'persp-switch)
    (define-key evil-normal-state-map (kbd "SPC w n") 'persp-next)
    (define-key evil-normal-state-map (kbd "SPC w d") 'persp-kill-buffer*)
  )
#+end_src

** Edit Dotfiles
#+begin_src emacs-lisp
  ;; (evil-global-set-key (kbd "SPC e c") (lambda ()
  ;;                                         (find-file "~/.emacs.d/README.org")))
#+end_src
