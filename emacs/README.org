* AmirrezaAsk Gnu Emacs Configuration
** Basics
*** Disable GUI stuff
#+BEGIN_SRC emacs-lisp :tangle yes
(tool-bar-mode 0) ;; disable top toolbar
(scroll-bar-mode 0) ;; disable scroll bar
(menu-bar-mode -1) ;; Disable menu bar
#+END_SRC
*** Load custom ELISP scripts in my local
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory)) ;; add my scripts to load path
#+END_SRC
*** Custom file
#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC
*** Package Manager setup
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
*** Use y-n instead of yes-or-no
#+BEGIN_SRC emacs-lisp :tangle yes
  (defalias 'yes-or-no-p 'y-or-n-p) ;; Show y or n instead of yes or no for question prompts.
#+END_SRC
** User Interface
*** Cursor shape
#+BEGIN_SRC emacs-lisp :tangle yes
  (blink-cursor-mode -1)
  (setq-default cursor-type 'box)
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp :tangle README.el
  (package-install 'ef-themes)
  (package-install 'gruber-darker-theme)

  (defun amirreza/jblow-theme ()
    (set-face-attribute 'default nil :foreground "#d3b58d" :background "#072626")
    (set-face-attribute 'cursor nil :background "green")
    (set-face-attribute 'font-lock-comment-face nil :foreground "#118a1a")
    (set-face-attribute 'font-lock-function-name-face nil :foreground "white" :bold nil)
    (set-face-attribute 'font-lock-keyword-face nil :foreground "#d4d4d4")
    (set-face-attribute 'font-lock-string-face nil :foreground "#2ec09c")
    (set-face-attribute 'font-lock-variable-name-face nil :foreground "#c8d4ec")
    (set-face-attribute 'font-lock-warning-face nil :foreground "#504038")
    (set-face-attribute 'font-lock-constant-face nil :foreground "#7ad0c6")
    (set-face-attribute 'highlight nil :foreground "white")
    (set-face-attribute 'mode-line nil :foreground "black" :background "#d3b58d")
    (set-face-attribute 'region nil :background "#3c02fa")
    )

   (load-theme 'ef-dark t)
#+END_SRC
*** Font
#+BEGIN_SRC emacs-lisp :tangle README.el
  (defun amirreza/home-monitor ()
    (interactive)
    (set-frame-font "Iosevka 20" nil t))

  (defun amirreza/snapp-monitor ()
    (interactive)
    (set-frame-font "Iosevka 15" nil t))

  (defun amirreza/laptop ()
    (interactive)
    (set-frame-font "Iosevka 13" nil t))
  (amirreza/laptop)
#+END_SRC
*** Disable Tab line mode
#+BEGIN_SRC emacs-lisp :tangle yes
(when (> emacs-major-version 26) (global-tab-line-mode -1)) ;; Disable tab line in Emacs 27+.
#+END_SRC
*** Minibuffer completion
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'vertico)
(vertico-mode)
(setq vertico-cycle t)

(package-install 'orderless)
(setq completion-styles '(substring orderless basic))

;; minibuffer annotations
(package-install 'marginalia)
(marginalia-mode)

;; Some useful functionalities
(package-install 'consult)

#+END_SRC
** Text Editor
*** Backups and versioning
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-by-copying t) ;; Always copy files for backup.
  (setq version-control t) ;; Use version numbers for backup.
  (setq delete-old-versions t) ;; Delete old backup of files.
  (setq kept-new-versions 6) ;; Number of newest versions to keep.
  (setq kept-old-versions 2) ;; Number of old versions to keep.
  (setq create-lockfiles nil) ;; Don't create .# files as lock.

  (setq backup-directory-alist ;; all backups should go here (PATTERN . LOCATION)
        '(("." . "~/.emacs.d/backup")))
#+END_SRC

*** Delete selection when start typing
#+BEGIN_SRC emacs-lisp :tangle yes
(delete-selection-mode 1)
#+END_SRC
*** Scrolling improvements
#+BEGIN_SRC emacs-lisp :tangle yes
(setq scroll-step 5) ;; When point moves out of screen, number of lines to scroll
(setq scroll-margin 5) ;; Scroll margin lines, when point arrives at these margins scroll the display.
(setq scroll-conservatively 101) ;; Number of lines to scroll to bring point back into view.
(setq scroll-up-aggressively 0.11) ;; When scrolling how much to move the view.
(setq scroll-down-aggressively 0.01) ;; Same as above.
(setq auto-window-vscroll nil) ;; Disable changing window-vscroll automatically.
(setq fast-but-imprecise-scrolling nil) ;; Disable fast scroll since it does not feel good.
(setq mouse-wheel-scroll-amount '(5
                                  ((shift) . 10)))
(setq mouse-wheel-progressive-speed t)
;; Horizontal Scroll
(setq hscroll-step 1) ;; Number of columns to scroll when point is to close to edge.
(setq hscroll-margin 1) ;; How many columns away from edge to start scrolling.
#+END_SRC
*** Tab stuff
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil ;; Don't insert tabs for indentation.
              tab-width 4) ;; Width of the TAB character in display.
#+END_SRC
*** UTF8 everywhere
#+BEGIN_SRC emacs-lisp :tangle yes
(set-terminal-coding-system 'utf-8) ;; default emacs encodings
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
*** Show matching parens
#+BEGIN_SRC emacs-lisp :tangle yes
(show-paren-mode 1) ;; Highlight matching parens
(setq show-paren-delay 0) ;; highlight matching parens instantly.
#+END_SRC
*** Display line numbers everywhere
#+BEGIN_SRC emacs-lisp :tangle yes
(global-display-line-numbers-mode 1) ;; Ensure line numbers globally.
#+END_SRC
*** Better YAML support
#+BEGIN_SRC emacs-lisp :tangle yes
  (package-install 'highlight-indent-guides)
  (add-hook 'yaml-mode-hook-hook #'highlight-indent-guides)
  (add-hook 'focus-in-hook #'highlight-indent-guides-auto-set-faces)
  (setq highlight-indent-guides-method 'character)
#+END_SRC

*** Wdired
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'dired-mode-hook (lambda ()
                             (define-key dired-mode-map (kbd "C-c C-e") 'wdired-change-to-wdired-mode)
                             ))

#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook (lambda ()
                           (define-key org-src-mode-map (kbd "C-c C-c") #'org-edit-src-exit) ;; consitent with magit commit
                           (setq org-ellipsis "â¤µ")
                           (setq org-src-fontify-natively t)
                           (setq org-src-tab-acts-natively t)
                           (setq org-support-shift-select t)
                           (setq org-src-window-setup 'current-window)
                           (setq org-startup-folded t)
                           ))
#+END_SRC
*** Handle really large files
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'vlf)
(global-so-long-mode 1)
#+END_SRC
*** Expand Region
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C--") 'er/contract-region)
#+END_SRC
*** Misc
#+BEGIN_SRC emacs-lisp :tangle yes

    (global-set-key (kbd "M-p") (lambda () (interactive) (previous-line 10)))
    (global-set-key (kbd "M-n") (lambda () (interactive) (next-line 10)))

    (setq echo-keystrokes 0.1) ;; Show keystrokes in minibuffer faster than default.

    (setq use-dialog-box nil) ;; Don't use any kind of GUI dialog box.
    (setq inhibit-splash-screen 0) ;; Disable Emacs start screen.
    (setq ring-bell-function 'ignore) ;; No bell ringing.


    (setq-default fill-column 80) ;; column number which emacs start to line wrap.

    (setq kill-ring-max 15) ;; Capacity of kill-ring.

    (unless (eq system-type 'windows-nt)
      (package-install 'exec-path-from-shell)
      (setq exec-path-from-shell-shell-name "zsh")
      (exec-path-from-shell-copy-envs '("GOPROXY" "GOPRIVATE"))
      (exec-path-from-shell-initialize)
    )

  (package-install 'apache-mode)

  (package-install 'systemd)

  (package-install 'nginx-mode)

  (package-install 'docker-compose-mode)

  (package-install 'dockerfile-mode)

#+END_SRC
** IDE
*** Languages
**** Golang
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'go-mode)
(add-hook 'go-mode-hook (lambda () (add-to-list 'exec-path (concat (getenv "HOME") "/bin"))))
(add-hook 'go-mode-hook
       (lambda ()
	     (if (or (file-exists-p "makefile")
		             (file-exists-p "Makefile"))
             (setq-local compile-command "make")
           (setq-local compile-command "go build ./...")
           )
         )
       )

#+END_SRC
**** Jai
#+BEGIN_SRC emacs-lisp :tangle yes
;; Jai
(require 'jai-mode)
#+END_SRC
**** OCaml
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'tuareg)
#+END_SRC
**** PHP
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'php-mode)
#+END_SRC
**** Rust
#+BEGIN_SRC emacs-lisp :tangle yes
  (package-install 'rust-mode)
  (add-hook 'rust-mode-hook
         (lambda ()
           (if (or (file-exists-p "makefile")
                       (file-exists-p "Makefile"))
               (setq-local compile-command "make")
             (setq-local compile-command "cargo build")
             )
           )
         )

#+END_SRC
**** Zig
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'zig-mode)
(add-hook 'zig-mode-hook
       (lambda ()
	     (if (or (file-exists-p "makefile")
		             (file-exists-p "Makefile"))
             (setq-local compile-command "make")
           (setq-local compile-command "zig build")
           )
         )
       )

(setq zig-format-on-save nil)
#+END_SRC
**** Haskell
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'haskell-mode)
#+END_SRC
*** Terminal Emulator ( VTerm )
#+BEGIN_SRC emacs-lisp :tangle yes
(when (not (eq 'system-type 'windows-nt))
  (package-install 'vterm))
#+END_SRC

*** Autocomplete
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'corfu)
(setq corfu-auto t)
#+END_SRC

*** Git Support
#+BEGIN_SRC emacs-lisp :tangle yes
(package-install 'magit)
#+END_SRC

** TODO
#+BEGIN_SRC emacs-lisp :tangle yes
;; Configuration formats

;; LSP
(package-install 'eglot)

;; disable eglot mouse things
(add-hook 'eglot-managed-mode-hook (lambda ()
          (put 'eglot-node 'flymake-overlay-control nil)
          (put 'eglot-warning 'flymake-overlay-control nil)
          (put 'eglot-error 'flymake-overlay-control nil)
          ))

(add-hook 'go-mode-hook #'eglot-ensure)
(add-hook 'rust-mode-hook #'eglot-ensure)

(add-to-list 'auto-mode-alist '("\\.loki\\'" . jai-mode))

(defun my-c++-mode-hook ()
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0))
(add-hook 'c++-mode-hook 'my-c++-mode-hook)

(package-install 'cmake-mode)

;; Modeline
(setq-default mode-line-format
              '("%e"
                mode-line-front-space
                mode-line-mule-info
                mode-line-client
                mode-line-modified
                mode-line-remote
                mode-line-frame-identification
                mode-line-buffer-identification
                "   "
                mode-line-position
                (vc-mode vc-mode)
                "  "
                mode-line-end-spaces))


(defun ASYNC-SHELL-COMMAND ()
  (interactive)
  (let ((default-directory (vc-root-dir)))
    (call-interactively 'async-shell-command)
    )
  )

(global-set-key (kbd "C-9") #'compile)
(global-set-key (kbd "C-8") #'ASYNC-SHELL-COMMAND)
(global-set-key (kbd "C-x C-d") 'dired)
(global-set-key (kbd "C-6") 'eglot-format-buffer)
(global-set-key (kbd "C-1") (lambda () (interactive) (find-file (expand-file-name "README.org" user-emacs-directory))))
(add-hook 'grep-mode-hook (lambda ()
                            (define-key grep-mode-map (kbd "M-.") 'find-file-at-point)
                            ))


(package-install 'ace-window)
(global-set-key (kbd "C-x o") 'ace-select-window)



;; UI stuff



#+END_SRC
