* Amirreza Emacs Configuration
** Basic Performance
   for performance improvement stuff look at =early-init.el= file.
** Basic Emacs stuff
   #+BEGIN_SRC elisp
     (setq backup-by-copying t) ;; Always copy files for backup.
     (setq version-control t) ;; Use version numbers for backup.
     (setq delete-old-versions t) ;; Delete old backup of files.
     (setq kept-new-versions 6) ;; Number of newest versions to keep.
     (setq kept-old-versions 2) ;; Number of old versions to keep.
     (setq create-lockfiles nil) ;; Don't create .# files as lock.
     (setq backup-directory-alist ;; all backups should go here (PATTERN . LOCATION)
           '(("." . "~/.emacs.d/backup/")))

     (setq-default indent-tabs-mode nil ;; Don't insert tabs for indentation.
                     tab-width 4) ;; Width of the TAB character in display.


     (defalias 'yes-or-no-p 'y-or-n-p) ;; Show y or n instead of yes or no for question prompts.

     (setq echo-keystrokes 0.1) ;; Show keystrokes in minibuffer faster than default.

     (setq use-dialog-box nil) ;; Don't use any kind of GUI dialog box.

     (setq inhibit-splash-screen 0) ;; Disable Emacs start screen.

     (setq ring-bell-function 'ignore) ;; No bell ringing.

     (set-terminal-coding-system 'utf-8) ;; default emacs encodings
     (set-keyboard-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)

     (setq-default fill-column 80) ;; column number which emacs start to line wrap.

     (setq scroll-step 5) ;; When point moves out of screen, number of lines to scroll
     (setq scroll-margin 5) ;; Scroll margin lines, when point arrives at these margins scroll the display.
     (setq scroll-conservatively 101) ;; Number of lines to scroll to bring point back into view.
     (setq scroll-up-aggressively 0.11) ;; When scrolling how much to move the view.
     (setq scroll-down-aggressively 0.01) ;; Same as above.
     (setq auto-window-vscroll nil) ;; Disable changing window-vscroll automatically.
     (setq fast-but-imprecise-scrolling nil) ;; Disable fast scroll since it does not feel good.
     (setq mouse-wheel-scroll-amount '(5
                                       ((shift) . 10)))
     (setq mouse-wheel-progressive-speed t)

     ;; Horizontal Scroll
     (setq hscroll-step 1) ;; Number of columns to scroll when point is to close to edge.
     (setq hscroll-margin 1) ;; How many columns away from edge to start scrolling.

     (setq custom-file "~/.emacs.d/custom.el") ;; Don't tamper with init.el for custom variables and use given file.

     (use-package delsel ;; delete region when start typing
       :hook (after-init . delete-selection-mode))

     (column-number-mode +1) ;; Show column number in modeline.

     (setq kill-ring-max 15) ;; Capacity of kill-ring.

     (display-battery-mode 1) ;; Show battery in modeline.

     (display-time-mode 1) ;; Show time in modeline.

     (global-display-line-numbers-mode 1) ;; Enable line numbers globally.

     (show-paren-mode 1) ;; Highlight matching parens
     (setq show-paren-delay 0) ;; highlight matching parens instantly.


     (global-set-key (kbd "M-n") (lambda ()
                                   (interactive)
                                   (forward-line 10)))

     (global-set-key (kbd "M-p") (lambda ()
                                   (interactive)
                                   (forward-line -10)))

     (when (> emacs-major-version 26) (global-tab-line-mode -1)) ;; Disable tab line in Emacs 27+.


     (setq-default cursor-type 'bar) ;; Shape of the cursor.

     (blink-cursor-mode 1) ;; Cursor blinks.

     (global-hl-line-mode +1) ;; Highlight current line.
#+END_SRC
** Themes
   =Doom-themes= is a great package containing beautiful color themes for Emacs.
   #+BEGIN_SRC elisp
     (use-package doom-themes :straight t :defer t)

     (defvar amirreza/current-mode 'dark "Current color mode of Emacs.")
     (defvar amirreza/dark-theme 'doom-dracula)
     (defvar amirreza/light-theme 'doom-one-light)

     (defmacro amirreza/--load-theme (&rest theme-opts)
       `(progn (mapc #'disable-theme custom-enabled-themes)
               (load-theme ,@theme-opts)))

     (defun amirreza/load-theme ()
       (interactive)
       (let ((theme (intern  (completing-read "Theme: " (mapcar #'symbol-name
                                                                (custom-available-themes))))))
         (amirreza/--load-theme theme t)))

     (defun amirreza/apply-color (mode)
       "Apply current color mode to Emacs."
       (if (eq amirreza/current-mode 'dark)
           (amirreza/--load-theme amirreza/dark-theme t)
         (amirreza/--load-theme  amirreza/light-theme t)))

     (defun amirreza/transparent-frame (pct)
       "Sets transparency of the frame to PCT"
       (interactive)
       (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
       (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
       (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
       (add-to-list 'default-frame-alist '(fullscreen . maximized)))

     (defun amirreza/toggle-color-mode ()
       "Toggle current mode to the opposite"
       (interactive)
       (if (eq amirreza/current-mode 'dark)
           (setq amirreza/current-mode 'light)
         (setq amirreza/current-mode 'dark))
       (amirreza/apply-color amirreza/current-mode))
     (amirreza/transparent-frame 90)
     (amirreza/apply-color amirreza/current-mode)

   #+END_SRC
** Font
   #+BEGIN_SRC elisp
     (defun amirreza/change-font (font)
       (setq default-frame-alist `((font . ,font))))

     (defvar amirreza/font "JetBrainsMono Nerd Font Mono-11")
     (amirreza/change-font amirreza/font)

     (define-key global-map (kbd "C--") (lambda () (interactive) (text-scale-adjust -1)))
     (define-key global-map (kbd "C-=") (lambda () (interactive) (text-scale-adjust +1)))
   #+END_SRC
** Keybindings
*** Evil
    Enables Vi emulation layer for Emacs.
   #+BEGIN_SRC elisp
     (defun amirreza/evil-hook ()
       (dolist (mode '(custom-mode
                       eshell-mode
                       git-rebase-mode
                       erc-mode
                       circe-server-mode
                       circe-chat-mode
                       circe-query-mode
                       sauron-mode
                       term-mode))
        (add-to-list 'evil-emacs-state-modes mode)))

     (use-package evil
       :disabled t
       :straight t
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-C-i-jump nil)
       :hook (evil-mode . amirreza/evil-hook)
       :config
       (evil-mode 1)
       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

       ;; Use visual line motions even outside of visual-line-mode buffers
       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

       (evil-global-set-key 'normal ";" 'evil-ex)

       (evil-set-initial-state 'messages-buffer-mode 'normal)
       (evil-set-initial-state 'dashboard-mode 'normal)

       (use-package evil-collection
         :straight t
         :after evil
         :config
         (evil-collection-init)))

     (use-package evil-escape :straight t :after evil :config (setq-default evil-escape-key-sequence "jk") (setq evil-escape-unordered-key-sequence t) (evil-escape-mode 1))

     (use-package evil-surround
       :straight t
       :after evil
       :config
       (global-evil-surround-mode 1))

     (use-package general
       :straight t
       :after evil
       :config
       (general-evil-setup t)

       (general-create-definer amirreza/COMMA-keys
         :keymaps '(normal insert visual emacs)
         :prefix ","
         :global-prefix "C-,")

       (general-create-definer amirreza/SPC-keys
         :keymaps '(normal insert visual emacs)
         :prefix "SPC"
         :global-prefix "C-SPC")

       (amirreza/SPC-keys
         "b" 'switch-to-buffer
         "h f" 'describe-function
         "h v" 'describe-variable
         "h a" 'apropos
         "h k" 'describe-key)

       (amirreza/COMMA-keys
         "," 'find-file
         "x" 'execute-extended-command))

   #+END_SRC
*** Which-key
    Shows possible candidates for continuing a keychord in minibuffer.
   #+begin_src emacs-lisp
     (use-package which-key
       :straight t
       :init
       (setq which-key-sort-order #'which-key-prefix-then-key-order
               which-key-sort-uppercase-first nil
               which-key-add-column-padding 1
               which-key-max-display-columns nil
               which-key-min-display-lines 6
               which-key-side-window-slot -10)
       :config
       (setq which-key-idle-delay 0.3)
       (defalias 'which-key! 'which-key-add-key-based-replacements)
       (which-key-mode 1)
       (which-key-setup-minibuffer))
   #+end_src
** Modeline
*** My custom one
    :PROPERTIES:
    :header-args: :tangle no
    :END:
   #+BEGIN_SRC elisp
     (setq mode-line-percent-position '(-3 "%p"))

     (defface amirreza/buffer-face
       '(
         (((background dark))  :foreground "IndianRed1" :weight bold)
         (((background light)) :foreground "blue violet" :weight bold)
         )
       "Face for buffer name.")

     (defface amirreza/date-face
       '(
         (((background dark)) :foreground "yellow" :weight bold)
         (((background light)) :foreground "tomato" :weight bold)
         )
       "Face for global variables.")


     (defface amirreza/vcs-face
       '(
         (((background dark)) :foreground "cyan" :weight bold)
         (((background light)) :foreground "olive drab" :weight bold)
         )
       "Face for global variables.")

     (defface amirreza/mode-face
       '(
         (((background dark)) :foreground "spring green" :weight bold)
         (((background light)) :foreground "royal blue" :weight bold)
         )
       "Face for global variables.")

     (defface amirreza/pos-face
       '(
         (((background dark)) :foreground "light slate blue" :weight bold)
         (((background light)) :foreground "firebrick" :weight bold)
         )
       "Face for global variables.")

     (defface amirreza/workspace-face
       '(
         (((background dark)) :foreground "orange" :weight bold)
         (((background light)) :foreground "violet red" :weight bold)
         )
       "Face for global variables.")


     (setq display-time-string-forms
           '((propertize
              (concat 24-hours ":" minutes " " day "/" month "/" year)
              'face 'marco-date)))

     (setq-default mode-line-format
                   (list
                    "["
                    '(:eval
                      (let ((workspace-number (format "%d" (eyebrowse--get 'current-slot))))
                        (if (= (length workspace-number) 0)
                            ""
                          (propertize workspace-number 'face 'amirreza/workspace-face))))

                    "]"
                    "  "
                    "[" '(:eval (propertize "%b" 'face 'amirreza/buffer-face)) "]"
                    " "
                    "[" '(:eval (propertize "%m" 'face 'amirreza/mode-face)) "]"
                    " "
                    "[" '(:eval (propertize "%l,%c" 'face 'amirreza/pos-face)) "]"
                    " "

                    "[" '(:eval (when-let (vc vc-mode)
                                  (list " "
                                        (propertize (substring vc 5)
                                                    'face 'amirreza/vcs-face)
                                        " "))) "]"
                    " "
                    "[" '(:eval (propertize display-time-string 'face 'amirreza/date-face)) "] "))




   #+END_SRC
*** Doom modeline
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :straight t
       :config
       (doom-modeline-mode 1)
       (setq doom-modeline-height 35))
#+end_src
** Buffer Management
   #+BEGIN_SRC elisp
     (use-package ibuffer
       :bind (("C-x C-b" . 'ibuffer)))

     (use-package ibuffer-vc :straight t
       :hook (ibuffer-mode . (lambda () (interactive) (ibuffer-vc-set-filter-groups-by-vc-root))))
   #+END_SRC
** Minibuffer
*** Ivy/Counsel/Swiper
    #+BEGIN_SRC elisp
      (use-package flx :straight t)

      (use-package ivy
        :straight t
        :disabled t
        :bind
        (:map ivy-switch-buffer-map
              ("C-k" . 'ivy-previous-line)
              :map ivy-minibuffer-map
              ("C-j" . 'ivy-next-line)
              ("C-k" . 'ivy-previous-line)
              ("RET" . 'ivy-alt-done))
        :config
        (setq ivy-height 15)
        ;; loopish cycling through list
        (setq ivy-wrap t)
        ;; don't show recents in minibuffer
        (setq ivy-use-virtual-buffers nil)
        ;; ...but if that ever changes, show their full path
        (setq ivy-virtual-abbreviate 'full)
        ;; ;; don't quit minibuffer on delete-error
        (setq ivy-on-del-error-function #'ignore)
        (setf (alist-get 't ivy-format-functions-alist)
              #'ivy-format-function-line)
        (setq ivy-initial-inputs-alist nil)
        (setq ivy-re-builders-alist
              '((t . ivy--regex-ignore-order)))
        (ivy-mode +1))

      (use-package counsel
        :straight t
        :disabled t
        :after ivy
        :bind
        (("M-x" . 'counsel-M-x)
         ("C-x C-f" . 'counsel-find-file)
         ("C-h b" . 'counsel-descbinds)
         ("C-h f" . 'counsel-describe-function)
         ("C-h v" . 'counsel-describe-variable)
         ("C-h a" . 'counsel-apropos)
         ("M-i" . 'counsel-imenu) ;; code semantics
         ("M-y" . 'counsel-yank-pop)
         ("C-S-s" . 'counsel-rg))
        :init
        (with-eval-after-load 'evil
          (amirreza/COMMA-keys
            "," 'counsel-find-file
            "x" 'counsel-M-x)
          (amirreza/SPC-keys
            "h f" 'counsel-describe-function
            "h v" 'counsel-describe-variable
            "h a" 'counsel-apropos
            "h b" 'counsel-descbinds)))

      (use-package ivy-rich :straight t :disabled t :config (ivy-rich-mode 1))


    #+END_SRC
*** Vertico/Consult
    #+begin_src emacs-lisp
      ;; minibuffer completion engine
      (use-package vertico
        :straight t
        :init
        (setq vertico-cycle t)
        (vertico-mode +1)
        :bind (:map vertico-map
                    ("C-j" . vertico-next)
                    ("C-k" . vertico-previous)
                    ))

      ;; Use history when ranking results
      (use-package savehist
        :after vertico
        :init
        (savehist-mode))

      ;; Advance Fuzzy search over results
      (use-package orderless
        :straight t
        :after vertico
        :init
        (setq completion-styles '(orderless)
              completion-category-defaults nil
              completion-category-overrides '((file (styles partial-completion)))))

      ;; useful commands like ivy's counsel

      (use-package consult
        :after vertico
        :straight t
        :bind (("C-s" . consult-line)
               ("C-S-s" . consult-ripgrep)
               ("C-c g" . consult-ripgrep))
        :config
        (with-eval-after-load 'evil
          (evil-global-set-key 'normal (kbd "??") 'consult-ripgrep)
          )
        )


      (use-package marginalia
        :after vertico
        :straight t
        ;; Either bind `marginalia-cycle` globally or only in the minibuffer
        :bind (("M-A" . marginalia-cycle)
               :map minibuffer-local-map
               ("M-A" . marginalia-cycle))
        :init
        (marginalia-mode))

      (use-package embark
        :after vertico
        :straight t
        :bind
        (("C-." . embark-act)         ;; pick some comfortable binding
         ("C-;" . embark-dwim)        ;; good alternative: M-.
         ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

        :init
        ;; Optionally replace the key help with a completing-read interface
        (setq prefix-help-command #'embark-prefix-help-command)
        (setq embark-action-indicator
              (lambda (map)
                (which-key--show-keymap "Embark" map nil nil 'no-paging)
                #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator)
        :config
        ;; Hide the mode line of the Embark live/completions buffers
        (add-to-list 'display-buffer-alist
                     '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                       nil
                       (window-parameters (mode-line-format . none)))))

      ;; Consult users will also want the embark-consult package.

      (use-package embark-consult
        :straight t
        :after (vertico embark consult)
        :hook
        (embark-collect-mode . consult-preview-at-point-mode))

    #+end_src
** Editor
*** Highlight indents
   #+BEGIN_SRC elisp
     (use-package highlight-indent-guides
       :straight t
       :hook ((yaml-mode) . highlight-indent-guides-mode)
       :init
       (setq highlight-indent-guides-method 'character)
       :config
       (add-hook 'focus-in-hook #'highlight-indent-guides-auto-set-faces))
    #+END_SRC
*** Edit files with sudo access
    #+BEGIN_SRC elisp
     (use-package sudo-edit
          :straight t
          :commands (sudo-edit))
    #+END_SRC
*** Expand currently selected region
    #+BEGIN_SRC elisp
     (use-package expand-region
       :straight t
       :bind (("C-=" . 'er/expand-region)
             ("C--" . 'er/contract-region)))
    #+END_SRC

*** Highlight TODO/FIXME/... items in text
    #+BEGIN_SRC elisp
     (use-package hl-todo
       :straight t
       :hook ((prog-mode) . hl-todo-mode)
       :config
       (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
    #+END_SRC
*** Handle large files and long lines
    #+BEGIN_SRC elisp
     (use-package so-long 
       :config (global-so-long-mode 1))

     (use-package vlf :straight t :commands (vlf))
    #+END_SRC
*** Edit files over SSH
    #+BEGIN_SRC elisp
     (use-package tramp
           :commands (tramp)
           :config
           (setq tramp-default-method "ssh"))
    #+END_SRC
*** Markdown
    #+BEGIN_SRC elisp
     (use-package markdown-mode
       :straight t
       :mode ("\\.md$" . markdown-mode))
    #+END_SRC
*** Pdf tools
    #+BEGIN_SRC elisp
      (use-package pdf-tools
        :straight t
        :hook (pdf-tools-enabled-hook . menu-bar-mode))
    #+END_SRC
*** Configuration syntax support
    #+BEGIN_SRC elisp
      (use-package crontab-mode :defer t :straight t)

      (use-package apache-mode :straight t
        :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'" "access\\.conf\\'"))

      (use-package systemd :straight t
        :mode ("\\.service\\'" "\\.timer\\'"))

      (use-package nginx-mode :straight 
        :mode ("/etc/nginx/conf.d/.*" "/etc/nginx/.*\\.conf\\'"))
    #+END_SRC
*** IMenu: Language agnostic movement in buffer
    #+BEGIN_SRC elisp
      (use-package imenu
        :bind ("M-i" . imenu))
    #+END_SRC
*** Colorize matching parens
    #+BEGIN_SRC elisp
      (use-package rainbow-delimiters :straight t :hook (prog-mode . rainbow-delimiters-mode))
    #+END_SRC
*** Emacs documentation engine
    #+BEGIN_SRC elisp
      (use-package eldoc
        :config (global-eldoc-mode 1))
    #+END_SRC
** IDE
*** LSP
**** Lsp-Mode
     :PROPERTIES:
:header-args: :tangle no
:END:

    #+BEGIN_SRC elisp
  (use-package lsp-mode :straight t
    :init
    (setq lsp-file-watch-threshold 10000)
    (setq lsp-auto-guess-root t)
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-before-save-edit t)
    (defun amirreza-lsp-format ()
      (interactive)
      (when (lsp-feature? "textDocument/formatting") (lsp-format-buffer)))

    (defun amirreza/lsp-keys (map)
      (define-key map (kbd "M-.") 'lsp-find-definition)
      (define-key map (kbd "M-i") 'lsp-find-implementation)
      (define-key map (kbd "M-r") 'lsp-find-references)

      (with-eval-after-load 'evil
        (evil-define-key 'normal map (kbd "gd") 'lsp-find-definition)
        (evil-define-key 'normal map (kbd "gi") 'lsp-find-implementation)
        (evil-define-key 'normal map (kbd "gr") 'lsp-find-references)))
  
    (defun amirreza/lsp (lang)
      (lsp)
      (let ((map (intern (concat (symbol-name 'go) "-mode-map"))))
        (amirreza/lsp-keys (symbol-value map))))


    :bind
    (:map lsp-mode-map
          ("C-S-r" . lsp-find-references)
          ("C-S-i" . lsp-find-implementation))

    :hook ((lsp-mode . lsp-enable-which-key-integration)
           (lsp-mode . (lambda () (interactive) (lsp-headerline-breadcrumb-mode -1))) 
           (before-save . amirreza-lsp-format)))

  (use-package lsp-ivy
    :straight t
    :after ivy
    :bind
    (:map lsp-mode-map
          ("C-S-s" . lsp-ivy-workspace-symbol)))
#+END_SRC
**** Eglot
     #+begin_src emacs-lisp
       (use-package eglot
         :straight t
         :hook
         ((go-mode php-mode python-mode lua-mode c-mode) . #'eglot-ensure)
         :bind
         (
          ("M-?" . xref-find-references)
          ("M-." . xref-find-definitions)
          ("M-i" . eglot-find-implementation)))
     #+end_src
*** Code Completion
   #+BEGIN_SRC elisp
     (use-package company
       :straight t
       :hook (prog-mode . company-mode)
       :bind (:map company-active-map
                   ("C-n" . company-select-next)
                   ("C-p" . company-select-previous)
                   ("C-o" . company-other-backend)
                   ("<tab>" . company-complete-common-or-cycle)
                   ("RET" . company-complete-selection))
       :config
       (setq company-minimum-prefix-lenght 1)
       (setq company-tooltip-limit 30)
       (setq company-idle-delay 0.0)
       (setq company-echo-delay 0.1)
       (setq company-show-numbers t)
       (setq company-backends '(company-capf company-dabbrev company-files company-dabbrev-code)))

   #+END_SRC
*** Projectile
   #+BEGIN_SRC elisp
     (use-package projectile
           :straight t
           :commands (projectile-find-file projectile-project-root)
           :bind
           (("C-c p p" . amirreza/find-project)
            ("C-c f" . projectile-find-file)
            ("C-M-s" . 'amirreza/find-symbol-at-point)
            ("<f1>" . 'amirreza/find-file-at-point)
            ("<f2>" . 'amirreza/find-symbol-at-point)
            ("C-M-f" . 'amirreza/find-file-at-point)
            ("C-M-g" . 'amirreza/find-symbol-at-point))
           :general
           (amirreza/SPC-keys
             "SPC" 'projectile-find-file
             "pp" 'amirreza/find-project)

           :config
           (defun amirreza/find-project ()
             "List of projects in pre defined project locations."
             (interactive)
             (dired (completing-read "Project: "
                                     (directory-files-recursively "~/src"
                                                                  ".*"
                                                                  t
                                                                  (lambda (path) (not (projectile-project-p path)))
                                                                  t))))

           (defun amirreza/recursive-search-path (initial path)
             (completing-read "Find File: " (directory-files-recursively path directory-files-no-dot-files-regexp nil (lambda (name)
                                                                                                                        (not (string-match "\\.git" name)))
                                                                         t) nil nil initial))

           (defun amirreza/find-symbol-at-point ()
             (interactive)
             (let* ((symbol (thing-at-point 'word)))
               (consult-ripgrep (projectile-project-root) symbol))))


     (use-package project :defer t)
   #+END_SRC
*** Terminal
   #+begin_src elisp
     (use-package vterm :straight t :bind ("C-c t" . vterm-other-window))
   #+end_src
*** Git
    #+begin_src emacs-lisp
      (use-package magit
        :straight t
        :commands (magit-status magit-get-current-branch)
        :init
        (with-eval-after-load 'evil (evil-global-set-key 'normal (kbd "SPC v g") 'magit-status))
        :bind
        (("C-x g" . 'magit-status)
         ("C-c v s" . 'magit-status)
         )
        )

      (use-package diff-hl
        :straight t
        :config (global-diff-hl-mode 1))

      (use-package gitconfig-mode
        :straight t
        :mode "/\\.gitconfig\\'")

      (use-package gitignore-mode
        :straight t
        :mode "/\\.gitignore\\'")

      (use-package gitattributes-mode
        :straight t
        :mode "/\\.gitattributes\\'")

      (use-package git-messenger
        :straight t
        :commands
        (git-messenger:popup-message)
        :bind
        (("C-c v b" . git-messenger:popup-message))

        :config
        (setq git-messenger:show-detail t)
        (setq git-messenger:use-magit-popup t))
#+end_src
*** Snippets
    #+begin_src emacs-lisp
      (use-package yasnippet
        :straight t
        :demand t
        :config (yas-global-mode 1)
        :bind
        (("C-x C-x" . yas-expand)
         ("C-x C-l" . yas-insert-snippet)))

      (use-package yasnippet-snippets :straight t)
    #+end_src
** Org
   #+BEGIN_SRC elisp
     (use-package org
           :init
           (with-eval-after-load 'evil
             (evil-define-key 'normal org-mode-map "SPC m n" 'amirreza/--org-insert-no-tangle)
             (evil-define-key 'normal org-mode-map "SPC m b" 'amirreza/--org-insert-elisp-code-block)
             )
           :config
     (defun amirreza/--org-insert-elisp-code-block ()
       (interactive)
       (insert (format "#+begin_src emacs-lisp\n\n#+end_src"))
       (previous-line)
       (beginning-of-line))

     (defun amirreza/--org-insert-no-tangle ()
       ""
       (interactive)
       (insert (format ":PROPERTIES:\n:header-args: :tangle no\n:END:\n"))
       (previous-line)
       (beginning-of-line))

     (setq org-ellipsis "⤵")
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-support-shift-select t)
     (setq org-src-window-setup 'current-window)
     (setq org-startup-folded t)
     :bind (:map org-mode-map
                 ("C-c m n" . amirreza/--org-insert-no-tangle)
                 ("C-c m b" . amirreza/--org-insert-elisp-code-block)))

     (use-package org-bullets
       :straight t
       :hook (org-mode . (lambda () (org-bullets-mode 1))))


     (use-package toc-org :straight t :hook (org-mode . toc-org-mode))

     (use-package htmlize :straight t :defer t)

   #+END_SRC
** Environment Variables
   Since emacs is a GUI app and is not launched by your default shell, probably it's not going to have correct env variables so we need to force all env
   variables from default shell to be in Emacs process as well.
   #+BEGIN_SRC elisp
     (use-package exec-path-from-shell 
       :straight t
       :config
       (setq exec-path-from-shell-shell-name "zsh")
       (exec-path-from-shell-initialize))
   #+END_SRC
** Programming Languages
*** Golang
   #+BEGIN_SRC elisp
     (use-package go-mode
       :straight t
       :mode ("\\.go\\'" . go-mode)
       :hook
       (go-mode . amirreza/go-hook)
       :config
       (defun amirreza/go-ggtags ()
         (interactive)
         (shell-command-to-string (format"gogtags -p %s" (amirreza/find-root)))
         )
       (defun amirreza/go-hook ()
         (interactive)
         ;; add go binaries to exec-path
         (add-to-list 'exec-path (concat (getenv "HOME") "/go/bin"))))


     (use-package go-add-tags :straight t :bind (:map go-mode-map ("C-c m s" . go-add-tags)))
     (use-package gotest :straight t 
       :after go-mode
       :config
       (define-key go-mode-map (kbd "C-c m t f") 'go-test-current-file) 
       (define-key go-mode-map (kbd "C-c m t t") 'go-test-current-test))
   #+END_SRC
*** Lisp
   #+BEGIN_SRC elisp
     (use-package paredit :straight t
       :hook ((clojure-mode emacs-lisp-mode) . paredit-mode))

     (use-package parinfer :straight t  :hook ((clojure-mode emacs-lisp-mode) . parinfer-mode))
   #+END_SRC
*** PHP
#+BEGIN_SRC elisp
  (use-package php-mode
    :straight t 
    :mode "\\.php\\'")
#+END_SRC
*** Python
   #+BEGIN_SRC elisp
     (use-package python-mode
       :mode "\\.py\\'")

     (use-package py-autopep8
       :straight t
       :hook python-mode
       :config
       (py-autopep8-enable-on-save))
   #+END_SRC
*** Lua
   #+BEGIN_SRC elisp
     (use-package lua-mode :straight t :mode "\\.lua")
     (setq lsp-clients-lua-language-server-install-dir "/home/amirreza/.local/lua-language-server")
     (setq lsp-clients-lua-language-server-bin (concat lsp-clients-lua-language-server-install-dir "/bin/Linux/lua-language-server"))
     (setq lsp-clients-lua-language-server-main-location (concat lsp-clients-lua-language-server-install-dir "/main.lua"))
   #+END_SRC
*** C/C++
   #+begin_src emacs-lisp
(use-package ccls :straight t)
   #+end_src
** Window management and Switching
   #+BEGIN_SRC elisp
     (setq display-buffer-alist
           '(("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|Messages\\)\\*"
                (display-buffer-in-side-window)
                (window-width . 0.40)
                (side . right)
                (slot . 0))
             ("^vterm"
               (display-buffer-in-side-window)
               (window-width . 0.40)
               (side . right)
               (slot . 0))
             ("\*eshell.*"
               (display-buffer-in-side-window)
               (window-width . 0.40)
               (side . right)
               (slot . 0))
             ("\\*rg"
               (display-buffer-in-side-window)
               (window-width . 0.50)
               (side . right)
               (slot . 0))))


     (use-package ace-window
       :straight t
       :commands (ace-window)
       :bind (("C-x o" . 'ace-window)
              ("C-x C-o" . 'ace-window)))
   #+END_SRC
** Workspaces
   Using =perspective= you can have groups of windows and buffers associated with a name, this helps you to have just one instance of Emacs and
   work on multiple projects, it's like having multiple workspaces in the desktop environment.
   #+begin_src emacs-lisp
     (use-package perspective
       :straight t
       :bind (("C-c p s" . persp-switch)
              ("C-c p n" . persp-next)
              ("C-x p k" . persp-kill-buffer*))
       :general
       (amirreza/SPC-keys
         "ps" 'persp-switch
         "pn" 'persp-next)
       :custom
       (persp-initial-frame-name "Main")
       :config
       ;; Running `persp-mode' multiple times resets the perspective list...
       (unless (equal persp-mode t)
         (persp-mode))
         )
   #+end_src 
** DevOps
   #+begin_src emacs-lisp
     (use-package docker-compose-mode
       :straight t
       :mode "docker-compose\\.yml")

     (use-package docker :straight t 
       :bind
       ("C-c i d" . docker))
     (use-package dockerfile-mode :straight t :mode "\\Dockerfile\\'")
     (use-package kubel :straight t :commands (kubel) :bind (("C-c i k" . kubel)))
   #+end_src
** Dotfiles
   #+begin_src emacs-lisp
     (defvar amirreza/dotfiles-location (exec-path-from-shell-copy-env "DOTFILES") "Location of my dotfiles.")

     (defun amirreza/edit-dot-config ()
       (interactive)
       (find-file (completing-read "Edit: " (directory-files-recursively amirreza/dotfiles-location ".*" nil (lambda (name)
                                                                                                               (not (string-match "\\.git" name)))
                                                                         t))))
     (with-eval-after-load 'evil
       (amirreza/SPC-keys
        "ec" 'amirreza/edit-dot-config))

     (define-key global-map (kbd "C-c e c") 'amirreza/edit-dot-config)
   #+end_src

** Emacs Server
   #+begin_src emacs-lisp
     (server-start)
   #+end_src
