* Amirreza Emacs Configuration
** Basic Performance
   for performance improvement stuff look at =early-init.el= file.
** Basic Emacs stuff
   #+BEGIN_SRC elisp
     (setq backup-by-copying t) ;; Always copy files for backup.
     (setq version-control t) ;; Use version numbers for backup.
     (setq delete-old-versions t) ;; Delete old backup of files.
     (setq kept-new-versions 6) ;; Number of newest versions to keep.
     (setq kept-old-versions 2) ;; Number of old versions to keep.
     (setq create-lockfiles nil) ;; Don't create .# files as lock.
     (setq backup-directory-alist ;; all backups should go here (PATTERN . LOCATION)
           '(("." . "~/.config/emacs/backup/")))

     (setq-default indent-tabs-mode nil ;; Don't insert tabs for indentation.
                     tab-width 4) ;; Width of the TAB character in display.


     (defalias 'yes-or-no-p 'y-or-n-p) ;; Show y or n instead of yes or no for question prompts.

     (setq echo-keystrokes 0.1) ;; Show keystrokes in minibuffer faster than default.

     (setq use-dialog-box nil) ;; Don't use any kind of GUI dialog box.

     (setq inhibit-splash-screen 0) ;; Disable Emacs start screen.

     (setq ring-bell-function 'ignore) ;; No bell ringing.

     (set-terminal-coding-system 'utf-8) ;; default emacs encodings
     (set-keyboard-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)

     (setq-default fill-column 80) ;; column number which emacs start to line wrap.

     (setq scroll-step 5) ;; When point moves out of screen, number of lines to scroll
     (setq scroll-margin 5) ;; Scroll margin lines, when point arrives at these margins scroll the display.
     (setq scroll-conservatively 101) ;; Number of lines to scroll to bring point back into view.
     (setq scroll-up-aggressively 0.11) ;; When scrolling how much to move the view.
     (setq scroll-down-aggressively 0.01) ;; Same as above.
     (setq auto-window-vscroll nil) ;; Disable changing window-vscroll automatically.
     (setq fast-but-imprecise-scrolling nil) ;; Disable fast scroll since it does not feel good.
     (setq mouse-wheel-scroll-amount '(5
                                       ((shift) . 10)))
     (setq mouse-wheel-progressive-speed t)

     ;; Horizontal Scroll
     (setq hscroll-step 1) ;; Number of columns to scroll when point is to close to edge.
     (setq hscroll-margin 1) ;; How many columns away from edge to start scrolling.

     (setq custom-file "~/.config/emacs/custom.el") ;; Don't tamper with init.el for custom variables and use given file.

     (use-package delsel ;; delete region when start typing
       :hook (after-init . delete-selection-mode))

     (column-number-mode +1) ;; Show column number in modeline.

     (setq kill-ring-max 15) ;; Capacity of kill-ring.

     (display-battery-mode 1) ;; Show battery in modeline.

     (display-time-mode 1) ;; Show time in modeline.

     (global-display-line-numbers-mode 1) ;; Ensure line numbers globally.

     (show-paren-mode 1) ;; Highlight matching parens
     (setq show-paren-delay 0) ;; highlight matching parens instantly.


     (global-set-key (kbd "M-n") (lambda ()
                                   (interactive)
                                   (forward-line 10)))

     (global-set-key (kbd "M-p") (lambda ()
                                   (interactive)
                                   (forward-line -10)))

     (when (> emacs-major-version 26) (global-tab-line-mode -1)) ;; Disable tab line in Emacs 27+.


     (setq-default cursor-type 'bar) ;; Shape of the cursor.

     (blink-cursor-mode 1) ;; Cursor blinks.

     (global-hl-line-mode +1) ;; Highlight current line.
#+END_SRC
** Theme
   #+BEGIN_SRC elisp
     (package-install 'doom-themes)
     (package-install 'all-the-icons-completion)

   (load-theme 'doom-dracula t)
   (all-the-icons-completion-mode 1)
   #+END_SRC
** Modeline
#+begin_src emacs-lisp
  (package-install 'doom-modeline)

  (setq doom-modeline-height 30)

  (doom-modeline-mode 1)
#+end_src
** Font
   #+BEGIN_SRC elisp
(set-frame-font "JetBrainsMono Nerd Font Mono 16" nil t)
   #+END_SRC
** Keybindings
*** Which-key
    Shows possible candidates for continuing a keychord in minibuffer.
   #+begin_src emacs-lisp
     (package-install 'which-key)
     (setq which-key-sort-order #'which-key-prefix-then-key-order
           which-key-sort-uppercase-first nil
           which-key-add-column-padding 1
           which-key-max-display-columns nil
           which-key-min-display-lines 6
           which-key-side-window-slot -10)

     (setq which-key-idle-delay 0.3)

     (which-key-mode 1)

     (which-key-setup-minibuffer)
   #+end_src
** Buffer Management
   #+BEGIN_SRC elisp
     (package-install 'bufler)
     (global-set-key (kbd "C-x C-b") 'bufler)
   #+END_SRC
** Window management and Switching
   #+BEGIN_SRC elisp
     (package-install 'ace-window)
     (global-set-key (kbd "C-x o") 'ace-window)
   #+END_SRC
** Workspaces
   Using =perspective= you can have groups of windows and buffers associated with a name, this helps you to have just one instance of Emacs and
   work on multiple projects, it's like having multiple workspaces in the desktop environment.
   #+begin_src emacs-lisp
     (use-package perspective
       :ensure t
       :init
       (with-eval-after-load 'evil
         (evil-define-key 'normal 'global (kbd "SPC w s") 'persp-switch)
         (evil-define-key 'normal 'global (kbd "SPC w n") 'persp-next)
         (evil-define-key 'normal 'global (kbd "SPC w k") 'persp-kill-buffer*))
  
       :bind (("C-x w s" . persp-switch)
              ("C-x w n" . persp-next)
              ("C-x w k" . persp-kill-buffer*))
       :custom
       (persp-initial-frame-name "Main")
       :config
       ;; Running `persp-mode' multiple times resets the perspective list...
       (unless (equal persp-mode t)
         (persp-mode))
       )
   #+end_src 
** Minibuffer Completion
*** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (setq vertico-cycle t)
  (vertico-mode +1)
  :bind (:map vertico-map
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous)
              ))

;; Use history when ranking results
(use-package savehist
  :after vertico
  :init
  (savehist-mode))

;; Advance Fuzzy search over results
(use-package orderless
  :ensure t
  :after vertico
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** Embark/Consult
#+begin_src emacs-lisp
    (use-package consult
      :ensure t
      :bind (("C-s" . consult-line)
             ("M-s" . consult-ripgrep))
      :config
      (with-eval-after-load 'evil
        (evil-global-set-key 'normal (kbd "??") 'consult-ripgrep)))

    (use-package embark
      :ensure t
      :bind
      (("C-." . embark-act)         ;; pick some comfortable binding
       ("C-;" . embark-export)        ;; good alternative: M-.
       ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

      :init
      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)
      (setq embark-action-indicator
            (lambda (map)
              (which-key--show-keymap "Embark" map nil nil 'no-paging)
              #'which-key--hide-popup-ignore-command)
            embark-become-indicator embark-action-indicator)
      :config
      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none)))))

    ;; Consult users will also want the embark-consult package.

    (use-package marginalia
      :ensure t
      ;; Either bind `marginalia-cycle` globally or only in the minibuffer
      :bind (("M-A" . marginalia-cycle)
             :map minibuffer-local-map
             ("M-A" . marginalia-cycle))
      :init
      (marginalia-mode))
    (use-package embark-consult
      :ensure t
      :after (embark consult)
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))

#+end_src
** Projects
*** Find project
#+begin_src emacs-lisp
  (defvar amirreza/project-locations '("~/src/gitlab.snapp.ir" "~/src/github.com/amirrezaask" "~/src/gitlab.snapp.ir"))
  (defun amirreza/find-project ()
    "List of projects in pre defined project locations."
    (interactive)
    (let ((output '()))
      (dolist (path amirreza/project-locations)
        (dolist (p (directory-files path t)) (add-to-list 'output p))
        )
      (dired (completing-read "Project: " output))
      ))
   (global-set-key (kbd "C-c f p") 'amirreza/find-project)
#+end_src
*** Inteligent searches
   #+BEGIN_SRC elisp
     (package-install 'projectile)
     (autoload 'projectile-project-p "projectile.el")
     (defun amirreza/grep ()
       (interactive)
       (cond
        ((projectile-project-p) (consult-git-grep))
        ((executable-find "rg") (consult-ripgrep))))

     (defun amirreza/find-file ()
       "If we are in project use projectile-find-file else use internal find-file"
       (interactive)
       (cond
        ((projectile-project-p) (projectile-find-file))
        (t (call-interactively 'find-file))))

     (defun amirreza/find-symbol-at-point ()
       (interactive)
       (let* ((symbol (thing-at-point 'word)))
         (consult-ripgrep (projectile-project-root) symbol)))

     (global-set-key (kbd "C-c f f") 'amirreza/find-file)

     (global-set-key (kbd "C-c f s") 'amirreza/grep)

     (with-eval-after-load 'evil
       (evil-global-set-key 'normal (kbd "SPC f f") 'amirreza/find-file)
       (evil-global-set-key 'normal (kbd "SPC f p") 'amirreza/find-project)
       (evil-global-set-key 'normal (kbd "SPC f s") 'amirreza/grep)
       (evil-global-set-key 'normal (kbd "??") 'amirreza/grep))
   #+END_SRC
** Org
   #+BEGIN_SRC elisp
     (defun amirreza/--org-insert-elisp-code-block ()
       (interactive)
       (insert (format "#+begin_src emacs-lisp\n\n#+end_src"))
       (previous-line)
       (beginning-of-line))

     (defun amirreza/--org-insert-no-tangle ()
       ""
       (interactive)
       (insert (format ":PROPERTIES:\n:header-args: :tangle no\n:END:\n"))
       (previous-line)
       (beginning-of-line))

     (setq org-ellipsis "⤵")
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-support-shift-select t)
     (setq org-src-window-setup 'split-window-right)
     (setq org-startup-folded t)

     (define-key org-mode-map (kbd "C-c m n") 'amirreza/--org-insert-no-tangle)

     (define-key org-mode-map (kbd "C-c m b") 'amirreza/--org-insert-elisp-code-block)

     (package-install 'org-bullets)
     (package-install 'toc-org)
     (package-install 'htmlize)
 
     (add-hook 'org-mode-hook #'org-bullets-mode)
     (add-hook 'org-mode-hook #'toc-org-mode)
   #+END_SRC
** Editor
*** Highlight indents
   #+BEGIN_SRC elisp
     (package-install 'highlight-indent-guides)

     (add-hook 'yaml-mode-hook #'highlight-indent-guide)

     (setq highlight-indent-guides-method 'character)

     (add-hook 'focus-in-hook #'highlight-indent-guides-auto-set-faces)

    #+END_SRC
*** Edit files with sudo access
    #+BEGIN_SRC elisp
      (package-install 'sudo-edit)
    #+END_SRC
*** Expand currently selected region
    #+BEGIN_SRC elisp
      (package-install 'expand-region)

      (global-set-key (kbd "C-=") 'er/expand-region)

      (global-set-key (kbd "C--") 'er/contract-region)
    #+END_SRC
*** Highlight TODO/FIXME/... items in text
    #+BEGIN_SRC elisp
      (package-install 'hl-todo)
      (add-hook 'prog-mode-hook #'hl-todo-mode)
      (setq hl-todo-highlight-punctuation ":"
            hl-todo-keyword-faces
            `(("TODO"       warning bold)
              ("FIXME"      error bold)
              ("HACK"       font-lock-constant-face bold)
              ("REVIEW"     font-lock-keyword-face bold)
              ("NOTE"       success bold)
              ("DEPRECATED" font-lock-doc-face bold)))
    #+END_SRC
*** Handle large files and long lines
    #+BEGIN_SRC elisp
      (package-install 'so-long)
      (global-so-long-mode 1)
      (package-install 'vlf)

    #+END_SRC
*** Edit files over SSH aka Tramp
    #+BEGIN_SRC elisp
      (setq tramp-default-method "ssh")
    #+END_SRC
*** Markdown
    #+BEGIN_SRC elisp
      (package-install 'markdown-mode)
      (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
    #+END_SRC
*** Pdf tools
    #+BEGIN_SRC elisp
      (package-install 'pdf-tools)
      (add-hook 'pdf-tools-ensured-hook #'menu-bar-mode)
    #+END_SRC
*** Configuration syntax support
    #+BEGIN_SRC elisp
       (use-package crontab-mode :defer t :ensure t)

       (use-package apache-mode :ensure t
         :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'" "access\\.conf\\'"))

       (use-package systemd :ensure t
         :mode ("\\.service\\'" "\\.timer\\'"))

       (use-package nginx-mode :ensure 
         :mode ("/etc/nginx/conf.d/.*" "/etc/nginx/.*\\.conf\\'"))

      (use-package docker-compose-mode
        :ensure t
        :mode "docker-compose\\.yml")
     (use-package dockerfile-mode :ensure t :mode "\\Dockerfile\\'")
    #+END_SRC
*** Colorize matching parens
    #+BEGIN_SRC elisp
      (use-package rainbow-delimiters :ensure t :defer t)
    #+END_SRC
** Environment Variables
   Since emacs is a GUI app and is not launched by your default shell, probably it's not going to have correct env variables so we need to force all env
   variables from default shell to be in Emacs process as well.
   #+BEGIN_SRC elisp
     (use-package exec-path-from-shell 
       :ensure t
       :config
       (setq exec-path-from-shell-shell-name "zsh")
       (exec-path-from-shell-copy-envs '("GOPROXY" "GOPRIVATE"))
       (exec-path-from-shell-initialize))
   #+END_SRC
** Programming Languages
*** Golang
Golang is my main programming language, but after doing a minimalistic life style of Acme for some time
I know tend to use simplest tools and less is more, and also trying to integrate more with command line tools so i have no
fancy feature for Go or any other language, other than the lsp itself.
   #+BEGIN_SRC elisp
     (use-package go-mode
       :ensure t
       :mode ("\\.go\\'" . go-mode)
       :hook
       (go-mode . amirreza/go-hook)
       :config
       
       (defun amirreza/go-hook ()
         (interactive)
         ;; add go binaries to exec-path
         (add-to-list 'exec-path (concat (getenv "HOME") "/go/bin"))))

     (use-package go-add-tags :ensure t :bind (:map go-mode-map ("C-c m s" . go-add-tags)))
     (use-package gotest :ensure t 
       :after go-mode
       :config
       (define-key go-mode-map (kbd "C-c m t f") 'go-test-current-file) 
       (define-key go-mode-map (kbd "C-c m t t") 'go-test-current-test))
   #+END_SRC
*** Lisp
   #+BEGIN_SRC elisp
     (use-package paredit :ensure t
       :hook ((clojure-mode emacs-lisp-mode) . paredit-mode))
   #+END_SRC
*** PHP
#+BEGIN_SRC elisp
  (use-package php-mode
    :ensure t 
    :mode "\\.php\\'"
    :hook (php-mode . amirreza/php-hook)
    :init
    (defun amirreza/php-hook ()
      ))
#+END_SRC
*** Python
   #+BEGIN_SRC elisp
     (use-package python-mode
       :mode "\\.py\\'")

     (use-package py-autopep8
       :ensure t
       :hook python-mode
       :config
       (py-autopep8-ensure-on-save))
   #+END_SRC
*** Lua
   #+BEGIN_SRC elisp
     (use-package lua-mode :ensure t :mode "\\.lua")
     (setq lsp-clients-lua-language-server-install-dir "/home/amirreza/.local/lua-language-server")
     (setq lsp-clients-lua-language-server-bin (concat lsp-clients-lua-language-server-install-dir "/bin/lua-language-server"))
     (setq lsp-clients-lua-language-server-main-location (concat lsp-clients-lua-language-server-install-dir "/main.lua"))
   #+END_SRC
*** C/C++
   #+begin_src emacs-lisp
(use-package ccls :ensure t)
   #+end_src
*** Elixir
#+begin_src emacs-lisp
  (use-package elixir-mode :ensure t :mode ("\\.exs?\\'" . elixir-mode))
  (use-package alchemist :ensure t)
#+end_src
*** Erlang
    #+begin_src emacs-lisp
      (package-install 'erlang)
#+end_src
*** Purescript
    #+begin_src emacs-lisp
      (package-install 'purescript-mode)
      (add-hook 'purescript-mode-hook #'turn-on-purescript-indentation)
    #+end_src
*** Haskell
    #+begin_src emacs-lisp
      (package-install 'haskell-mode)
      (package-install 'lsp-haskell)
    #+end_src
** IDE
*** Language Servers
#+begin_src emacs-lisp
  (package-install 'lsp-mode)
  ;; Adds hooks for languages
  (add-hook 'go-mode-hook #'lsp)

  (add-hook 'go-mode-hook #'lsp)

  (add-hook 'php-mode-hook #'lsp)

  (add-hook 'c-mode-hook #'lsp)

  (add-hook 'lua-mode-hook #'lsp)

  (add-hook 'python-mode-hook #'lsp)

  (add-hook 'erlang-mode-hook #'lsp)

  (add-hook 'purescript-mode-hook #'lsp)

  (add-hook 'haskell-mode #'lsp)

  (add-hook 'lsp-mode-hook (lambda ()
                             (local-set-key (kbd "C-c f i") 'lsp-find-implementation)
                             ))
#+end_src
*** Code Completion
   #+BEGIN_SRC elisp
     (use-package company
       :ensure t
       :diminish company-mode
       :hook (prog-mode . company-mode)
       :bind (:map company-active-map
                   ("C-n" . company-select-next)
                   ("C-p" . company-select-previous)
                   ("C-o" . company-other-backend)
                   ("<tab>" . company-complete-common-or-cycle)
                   ("RET" . company-complete-selection))
       :config
       (setq company-minimum-prefix-lenght 1)
       (setq company-tooltip-limit 30)
       (setq company-idle-delay 0.0)
       (setq company-echo-delay 0.1)
       (setq company-show-numbers t)
       (setq company-backends '(company-capf company-dabbrev company-files company-dabbrev-code)))

   #+END_SRC
*** Git
    #+begin_src emacs-lisp
      (use-package magit
        :ensure t
        :commands (magit-status magit-get-current-branch)
        :init
        (with-eval-after-load 'evil (evil-global-set-key 'normal (kbd "SPC g s") 'magit-status))
        :bind
        (("C-x g" . 'magit-status)))

      (use-package diff-hl
        :ensure t
        :config (global-diff-hl-mode 1))

      (use-package git-messenger
        :ensure t
        :commands
        (git-messenger:popup-message)
        :init
        (with-eval-after-load 'evil (evil-global-set-key 'normal (kbd "SPC g b") 'git-messenger:popup-message))
        :bind
        (("C-c g b" . git-messenger:popup-message))

        :config
        (setq git-messenger:show-detail t)
        (setq git-messenger:use-magit-popup t))
#+end_src
*** Snippets
    #+begin_src emacs-lisp
      (use-package yasnippet
        :ensure t
        :diminish yas-minor-mode
        :config (yas-global-mode 1)
        :bind
        (("C-x C-x" . yas-expand)
         ("C-x C-l" . yas-insert-snippet)))

      (use-package yasnippet-snippets :ensure t :after yasnippet)
    #+end_src
*** Eldoc: Emacs documentation engine
    #+BEGIN_SRC elisp
      (use-package eldoc
        :diminish eldoc-mode
        :config (global-eldoc-mode 1))
    #+END_SRC
** Dotfiles
   #+begin_src emacs-lisp
     (require 'dotfiles)
   #+end_src
