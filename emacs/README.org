#+TITLE: AmirrezaAsk Emacs configuration
#+AUTHOR: amirrezaask
* Table Of contents                                                     :TOC@4:
- [[#introduction][Introduction]]
- [[#what-is-emacs-][What is Emacs ?]]
  - [[#editor--ide--mail-client--window-manager--terminal-emulator--lisp-interpreter--all-of-them--none-][Editor ? IDE ? Mail client ? Window manager ? Terminal emulator ? Lisp interpreter ? all of them ? none ?]]
- [[#ascend-from-darkness][Ascend from darkness]]
  - [[#installing-emacs][Installing Emacs]]
  - [[#let-your-feet-get-wet][Let your feet get wet]]
    - [[#opening-a-file][Opening a file]]
    - [[#motions][Motions]]
    - [[#emacs-is-self-documenting][Emacs is self documenting]]
    - [[#elisp][Elisp]]
      - [[#hello-world][Hello World]]
      - [[#loading-evaluating-file][Loading (Evaluating) file]]
  - [[#start-your-configuration][Start Your configuration]]
  - [[#introducing-emacs-27][Introducing Emacs 27]]
- [[#about-this-configuration][About this configuration]]
- [[#keybindings][Keybindings]]

* Introduction
=Emacs= is one of the oldest softwares that has active development and community after 40 years passed from the initial release, but why is
that ? Why when there battries included, easy to use, full-featured solutions like =VSCode=, =Jetbrains IDEA= (I mean whole Jetbrains family),
 =Atom=, =Sublime=, etc... people still use =Emacs=, What is the reason that keeps these programs alive? Is it just some people want to look
cool ? Or is there really something ? We are going to take a journey into the deepest parts of EMACS and find the answer.
* What is Emacs ?
** Editor ? IDE ? Mail client ? Window manager ? Terminal emulator ? Lisp interpreter ? all of them ? none ?
At the 70s at =MIT= AI lab computers were running an editor called =TECO= which was modal editor, as the time passed
problems of =TECO= started to create the need for a new editor paradigm, and one new implemention
 catched on very well, guy named =Fred Wright= created an editor called =E=, which was much more similar to modern
editors we know, and Stallman added same functionality to =TECO= program.
At the year 1984 =Stallman= Sta[INC]
So Emacs is an editor implemented in Emacs-lisp which is an Lisp dialect implemented in C, so basically Emacs is
a Lisp interpreter which happens to have a editor inside as well. All editor functionality is written in pure emacs-lisp
or they have the API for emacs-lisp so you can change them, you can actually change almost anything in Emacs since
every thing is a function or a variable defined in Emacs-lisp and evaluated using Emacs internal lisp evaluator and 
Emacs-lisp like many lisps has no function scoping, in simpler terms there is no private functions or variables so 
you can change the most core parts of EMACS easily with just redefining them.
* Ascend from darkness
** Installing Emacs
Installing Emacs is easy, if you are on a =GNU/Linux= distro you should be able to get it from the package manager and
in =macOS= it's available in =homebrew= and you can download windows version from gnu/emacs website.
** Let your feet get wet
*** Opening a file
Open up Emacs, what you see is a tedious white screen with an ugly Emacs logo and some links for tutorials on Emacs
(these links are actually useful take a look at them). First let's get on the same page, from this point to the
end of the document =C= in keybindings refers to control key and =M= refers to Meta(Alt) key, =S= is shift and =s= 
is super key. Open a file by pressing =<C-x C-f>=, you get a prompt to enter a file name, enter some random file name
an hit enter, file is opened and you can see the content. Let's create a table to remember the keychords we are using

| Keychord | functionality |
| C-x C-f  | opens a file  |

*** Motions
Let's move around, ofcourse you can use the mouse and click around or the arrow keys but there are more efficient
ways doing this, Just press =<C-f>= you see your cursor moves forward by a character, now press =<C-b>= and your 
cursor moves backward by a character so lets update our table. Remember there are so much more in motions these two
were just examples.

| Keychord | functionality                 |
| C-f      | moves forward by a character  |
| C-b      | moves backward by a character |

*** Emacs is self documenting
Do you remember that I told you in Emacs every thing is just an Elisp(Emacs-lisp) function, let's discuss that.
Let me introduce you to the Emacs self documenting feature, press =<C-h k>=, you should be prompted then enter
=<C-x C-f>= a new window(we'll discuss this concept later), you see a document that tolds you what this keychord
is bound to and the documentation of that function, in this case you should see that =<C-x C-f>= is bound to 
=find-file= command and you have the option to see the actual source code of that function. =<C-h>= is the prefix 
for all Emacs help commands and these keys themselves runs elisp functions you can actually do the =<C-h k>=
on itself and see the function behind it so let's update our table and from now on we write the actual function name 
in our table.

| Keychord | function          |
|----------+-------------------|
| C-h k    | describe-key      |
| C-h f    | describe-function |
| C-h v    | describe-variable |

*** Elisp
I'm not going to do a complete tutorial on Elisp just gonna tell you how you can stay alive in Emacs.
**** Hello World
Elisp or Emacs-Lisp is the language that almost all Emacs functions are written in, so let's tip our toes in it as 
well.
Open up a new file ( you already know how to do that ) name that anything but with the extension of =.el=.
at the first line write the following 
#+BEGIN_SRC 
(message "Hello World")
#+END_SRC
and then move your cursor to the end of the line using =<C-e>= and then press =<C-x C-e>=, now look at the =minibuffer=
you see the ="Hello World"= in there. Don't forget to =describe-key= the two keychords that you just used.
**** Loading (Evaluating) file
:PROPERTIES:
  :header-args: :tangle no
  :END:
You can evaluate eLisp expressions like you now know but you also can load a whole elisp file using =load-file= function
#+BEGIN_SRC 
(load-file "file.el")
#+END_SRC
** Start Your configuration
 Emacs configuration is nothing other than a simple elisp file that emacs loads at the startup we can specify that
 using =-l= flag to load specific file. so let's do that. Open an elisp file and name that =config.el=, and just put
 a simple hello world message in it, now go to terminal and enter =emacs -l config.el= when this instance of emacs starts
 up =switch-to-buffer= (this is a function you can describe-function it and find the keybindings little exercise)
 to the buffer called =*Messages*= and you should see your message in that buffer somewhere.
 Now you can write any elisp code in your config.el file and emacs always evaluates them as long as you pass the
 -l flag, but the conventional way of doing emacs configuration is using =~/.emacs.d/init.el= file which emacs 
 automatically loads in the startup, it's kind of the default file for this purpose.
** Introducing Emacs 27
Emacs 27 has a lot to offer, a new json parser that is implemented natively (C code) so it should speed
up the JSON based operations like LSP a lot, another thing about Emacs 27 is =early-init.el= file that gets
loaded before init.el and before GUI and package manager starts so it can help us configure Emacs even further.
* About this configuration
I actually don't use a lot of setup that I have in this configuration,
all the unused parts are disabled using =:disabled= in use-package declaration.
* Keybindings
I respect Emacs keybinding conventions in my configuration with a few ideas borrowed from spacemacs.
+ All keybindings should be prefixed with =C-c= and then a single letter to avoid conflict with major modes keybindings.
+ Window related functionality like eyebrowse workspaces prefix with =w=
+ Major mode / language specific functions bind with prefix =m=
+ Operating System integration keys should be prefixed with =o=
+ Devops related stuff prefixed with =d=.
