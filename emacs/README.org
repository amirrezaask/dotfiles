#+TITLE: AmirrezaAsk Emacs
#+AUTHOR: amirrezaask
* Table Of contents                                                   :TOC@3:
- [[#personal-information][Personal information]]
- [[#startup-time][Startup Time]]
- [[#core][Core]]
  - [[#package-manager][Package manager]]
  - [[#module-system][Module System]]
  - [[#gcmh][GCMH]]
- [[#enabled-modules][Enabled Modules]]
- [[#development][Development]]
  - [[#auto-header][Auto Header]]
  - [[#languages][Languages]]
    - [[#cc][C/C++]]
    - [[#java][Java]]
    - [[#scheme][Scheme]]
    - [[#lua][Lua]]
    - [[#zig][Zig]]
    - [[#lisp-configuration][Lisp configuration]]
    - [[#common-lisp][Common Lisp]]
    - [[#protobuf][Protobuf]]
    - [[#nix][Nix]]
    - [[#terraform][Terraform]]
- [[#integrated-tools][Integrated Tools]]
  - [[#process-management][Process management]]
  - [[#rhythmbox][Rhythmbox]]
  - [[#video][Video]]
  - [[#docker][Docker]]
  - [[#kubernetes][Kubernetes]]
  - [[#application-laucnherdmenu][Application Laucnher(dmenu)]]
  - [[#terminal][Terminal]]

* Personal information
#+begin_src emacs-lisp
    (setq user-full-name "AmirrezaAskarpour"
          user-mail-address "raskarpour@gmail.com")
#+end_src
* Startup Time
#+begin_src emacs-lisp
  (defun amirreza/startup-time ()
    (interactive)
    (message "Emacs start time: %.2f" (float-time (time-subtract after-init-time before-init-time))))
#+end_src
* Core
Core is a set of basic functionalities i need to build my emacs upon them.
** Package manager
My package manager is based on combining `Straight.el` and `use-package` together with some extra sugar on top.
** Module System
My module system is a way to enable/disable an elisp block using a central list of enabled modules.
** GCMH
Tune garbage collector to act smarter. ( credits to Andre for creating this library )
* Enabled Modules
#+begin_src emacs-lisp

#+end_src
* Development
** Auto Header
#+begin_src emacs-lisp
  (pkg! autoinsert
    :hook (prog-mode . auto-insert-mode))
#+end_src
** Languages
*** C/C++
#+begin_src emacs-lisp
  (pkg! ccls :straight t)
  ;;(pkg! cmake-mode :defer t :straight t)
  ;;(pkg! disaster :defer t :straight t)
#+end_src
*** Java
#+begin_src emacs-lisp
  (pkg! gradle-mode :straight t :mode "\\Gradle")
  (pkg! flycheck-gradle :straight t :mode "Gradle")
  (pkg! groovy-mode :straight t :mode "\\.groovy")
  ;; (pkg! meghanada :straight t :hook (java-mode . (lambda ()
  ;;                                                         (meghanada-mode t)
  ;;                                                         (flycheck-mode +1)
  ;;                                                         (setq c-basic-offset 2))))
  (pkg! lsp-java :straight t)
#+end_src
*** Scheme
 I use guile as my scheme compiler.
 #+begin_src emacs-lisp
   (pkg! scheme
   :mode "\\.scm"
   :config
   (setq scheme-program-name "guile"))
 #+end_src
*** Lua
#+begin_src emacs-lisp
(pkg! lua-mode :straight t :mode "\\.lua" :hook (lua-mode . amirreza/lsp))
#+end_src
*** Zig
 #+begin_src emacs-lisp
   (pkg! zig-mode 
     :straight t
     :mode "\\.zig\\'")
 #+end_src
*** Lisp configuration
#+begin_src emacs-lisp
  (pkg! paredit :straight t
    :hook ((clojure-mode emacs-lisp-mode) . paredit-mode))
  (pkg! parinfer :straight t  :hook ((clojure-mode emacs-lisp-mode) . parinfer-mode))
#+end_src
*** Common Lisp
**** Common-lisp mode
 #+BEGIN_SRC emacs-lisp
 (pkg! lisp-mode :mode "\\.cl\\'")
 #+END_SRC
**** Common Lisp Integrated Environment
 #+BEGIN_SRC emacs-lisp
 (pkg! sly :straight t :mode "\\.cl\\'")
 #+END_SRC
*** Protobuf
#+begin_src emacs-lisp
(pkg! protobuf-mode :straight t :mode "\\.proto\\'")
#+end_src
*** Nix
#+begin_src emacs-lisp
(pkg! nix-mode :straight t :mode "\\.nix'")
#+end_src
*** Terraform
#+begin_src emacs-lisp
(pkg! terraform-mode :straight t :mode "\\.tf")
#+end_src
* Integrated Tools
** Process management
#+begin_src emacs-lisp
  (pkg! proced
    :bind (("<f10>" . amirreza/kill-process))
    :commands (proced amirreza/kill-process)
    :config

    (defun amirreza/kill-process (name)
      (interactive "sProcess: ")
      (shell-command-to-string (format "pkill %s" name))))
#+end_src
** Rhythmbox
#+begin_src emacs-lisp
  (if-enabled? rhythmbox
               (pkg! rhythmbox
                 :bind (("C-c i m l" . Rhythmbox)
                        ("C-c i m p" . Rhythmbox/playpause-current-song)
                        ("C-c i m n" . Rhythmbox/current-song-name))
                 :load-path "~/.emacs.d/site-lisp/"))
#+end_src
** Video
#+begin_src emacs-lisp
  (defun amirreza/start-vlc (filename)
    (start-process (format "*VLC: %s*" filename) "*VLC*" "vlc" filename))

  (defvar amirreza/video-location "~/Videos")

  (defun amirreza/video-list ()
    (interactive)
    (amirreza/start-vlc (expand-file-name (completing-read "Video: " (directory-files-recursively amirreza/video-location ".*")))))
#+end_src
** Docker
#+BEGIN_SRC emacs-lisp
  (pkg! docker-compose-mode
    :straight t
    :mode "docker-compose\\.yml")

  (pkg! docker :straight t 
    :bind
    ("C-c i d" . docker))
  (pkg! dockerfile-mode :straight t :mode "\\Dockerfile\\'")
#+END_SRC
** Kubernetes
#+begin_src emacs-lisp
(pkg! kubel :straight t :commands (kubel) :bind (("C-c i k" . kubel)))
#+end_src
** Application Laucnher(dmenu)
Dmenu replacement in Emacs.
#+begin_src emacs-lisp
  (defun amirreza/run-command (cmd)
    (let* ((process-name (format "External: %s" cmd))
           (args ""))
      (when (string-match-p "\\.desktop" cmd)
        (setq args cmd)
        (setq cmd "gtk-launch"))

      (start-process process-name process-name cmd (car (last (split-string args "/"))))))

  (defun amirreza/launch ()
    (interactive)
    (let* ((bins '())
           (_ (mapc (lambda (path)
                      (ignore-errors (setq bins (append bins (directory-files-recursively path directory-files-no-dot-files-regexp))))
                      ) exec-path))
           (cmd (completing-read "Run: " bins)))
      (amirreza/run-command cmd)))

(global-set-key (kbd "s-d") 'amirreza/launch)
#+end_src
** Terminal
#+begin_src emacs-lisp
  (defvar amirreza/terminal "alacritty")
    (defun amirreza/terminal ()
      (interactive)
      (start-process (format "%s: %s" amirreza/terminal default-directory)
                     (format "%s: %s" amirreza/terminal default-directory) "alacritty"))
#+end_src
