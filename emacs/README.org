* Amirreza Emacs Configuration
This is my emacs configuration written in literate format. I tend to keep my emacs configuration as minimal
as possible. No unnecessary package is installed.
** Emacs base
*** early-init.el file
From Emacs 27 there is file called early-init.el. This file gets loaded before =init.el= file and also before UI gets loaded so i can disable UI elements I don't use.
#+begin_src emacs-lisp :tangle early-init.el
(tool-bar-mode 0) ;; disable top toolbar
(scroll-bar-mode 0) ;; disable scroll bar
(menu-bar-mode -1) ;; Disable menu bar
(setq package-enable-at-startup nil) ;; disable emacs default package manager
#+end_src
*** Package manager setup
Emacs ofcourse has concept of packages, It also has a builtin package manager called =package.el= but it's not a deterministic approach and you can not lock packages
to a specific version and also packages should be present at Emacs package archives and not all packages (99% does) do, so let's use alternative called =straight.el=.
#+begin_src emacs-lisp :tangle init.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

#+end_src
*** Use-package
use-package is a declarative way for Emacs users to define their configurations using a declarative syntax.
#+begin_src emacs-lisp :tangle init.el
(straight-use-package 'use-package)
#+end_src
*** Read THIS file at startup
As you can see we are doing emacs config in a literate format, emacs by default does not read anything other that =init.el= and recently the =early-init.el= file, so we need to make sure
that it reads our literate configuration.
#+begin_src emacs-lisp :tangle init.el
  (defvar amirreza/config-file (expand-file-name "README.org" user-emacs-directory))

  (defun amirreza/reload ()
    "Reload user configuration file"
    (interactive)
    (org-babel-load-file amirreza/config-file))


  (org-babel-load-file amirreza/config-file)
#+end_src
*** Basic Emacs setups
#+begin_src emacs-lisp
(setq backup-by-copying t) ;; Always copy files for backup.
(setq version-control t) ;; Use version numbers for backup.
(setq delete-old-versions t) ;; Delete old backup of files.
(setq kept-new-versions 6) ;; Number of newest versions to keep.
(setq kept-old-versions 2) ;; Number of old versions to keep.
(setq create-lockfiles nil) ;; Don't create .# files as lock.
(setq backup-directory-alist ;; all backups should go here (PATTERN . LOCATION)
      '(("." . "~/.config/emacs/backup/")))

(setq-default indent-tabs-mode nil ;; Don't insert tabs for indentation.
                tab-width 4) ;; Width of the TAB character in display.


(defalias 'yes-or-no-p 'y-or-n-p) ;; Show y or n instead of yes or no for question prompts.

(setq echo-keystrokes 0.1) ;; Show keystrokes in minibuffer faster than default.

(setq use-dialog-box nil) ;; Don't use any kind of GUI dialog box.

(setq inhibit-splash-screen 0) ;; Disable Emacs start screen.

(setq ring-bell-function 'ignore) ;; No bell ringing.

(set-terminal-coding-system 'utf-8) ;; default emacs encodings
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(setq-default fill-column 80) ;; column number which emacs start to line wrap.

(setq scroll-step 5) ;; When point moves out of screen, number of lines to scroll
(setq scroll-margin 5) ;; Scroll margin lines, when point arrives at these margins scroll the display.
(setq scroll-conservatively 101) ;; Number of lines to scroll to bring point back into view.
(setq scroll-up-aggressively 0.11) ;; When scrolling how much to move the view.
(setq scroll-down-aggressively 0.01) ;; Same as above.
(setq auto-window-vscroll nil) ;; Disable changing window-vscroll automatically.
(setq fast-but-imprecise-scrolling nil) ;; Disable fast scroll since it does not feel good.
(setq mouse-wheel-scroll-amount '(5
                                  ((shift) . 10)))
(setq mouse-wheel-progressive-speed t)

;; Horizontal Scroll
(setq hscroll-step 1) ;; Number of columns to scroll when point is to close to edge.
(setq hscroll-margin 1) ;; How many columns away from edge to start scrolling.

(setq custom-file "~/.config/emacs/custom.el") ;; Don't tamper with init.el for custom variables and use given file.
#+end_src
*** Show more information in modeline
#+begin_src emacs-lisp
(column-number-mode +1) ;; Show column number in modeline.
(display-battery-mode 1) ;; Show battery in modeline.
(display-time-mode 1) ;; Show time in modeline.
(global-display-line-numbers-mode 1) ;; Ensure line numbers globally.
#+end_src
*** Sync env with default shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell :straight t
    :config
      (setq exec-path-from-shell-shell-name "zsh")
      (exec-path-from-shell-copy-envs '("GOPROXY" "GOPRIVATE"))
      (exec-path-from-shell-initialize))
#+end_src
** UI
#+begin_src emacs-lisp
  (use-package doom-themes :straight t)
  (use-package doom-modeline :straight t)
  (doom-modeline-mode 1) ;; enable doom modeline
  (load-theme 'doom-moonlight t) ;; set theme
  (set-frame-font "JetBrainsMono Nerd Font Mono 16" nil t) ;; Set font
#+end_src
** Editor
*** Editor basics
#+begin_src emacs-lisp
  (use-package emacs
    :config
      (setq kill-ring-max 15) ;; Capacity of kill-ring.
      (show-paren-mode 1) ;; Highlight matching parens
      (setq show-paren-delay 0) ;; highlight matching parens instantly.
      (when (> emacs-major-version 26) (global-tab-line-mode -1)) ;; Disable tab line in Emacs 27+.
      (setq-default cursor-type 'bar) ;; Shape of the cursor.
      (blink-cursor-mode 1) ;; Cursor blinks.
      (global-hl-line-mode +1) ;; Highlight current line.
      )
#+end_src
*** Evil Mode: Vim emualtion in Emacs
#+begin_src emacs-lisp
  (defun amirreza/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    term-mode))
     (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :straight t
    :hook
    (evil-mode . amirreza/evil-hook)
    :init
      (setq evil-want-keybinding nil)
      (evil-mode 1)
    :bind
    :config
      (setq evil-want-integration t)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-ex-search-vim-style-regexp t
              evil-ex-visual-char-range t  ; column range for ex commands
              evil-mode-line-format 'nil
              ;; more vim-like behavior
              evil-symbol-word-search t
              ;; if the current state is obvious from the cursor's color/shape, then
              ;; we won't need superfluous indicators to do it instead.
              evil-default-cursor '+evil-default-cursor-fn
              evil-normal-state-cursor 'box
              evil-emacs-state-cursor  '(box +evil-emacs-cursor-fn)
              evil-insert-state-cursor 'bar
              evil-visual-state-cursor 'hollow
              ;; Only do highlighting in selected window so that Emacs has less work
              ;; to do highlighting them all.
              evil-ex-interactive-search-highlight 'selected-window
              ;; It's infuriating that innocuous "beginning of line" or "end of line"
              ;; errors will abort macros, so suppress them:
              evil-kbd-macro-suppress-motion-error t
      )
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
      (evil-global-set-key 'normal ";" 'evil-ex)
      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal)
      (evil-select-search-module 'evil-search-module 'evil-search)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
      (evil-global-set-key 'normal (kbd "SPC b k") 'kill-buffer)  
      (evil-set-leader nil "SPC")
      (setq evil-want-Y-yank-to-eol t)
    )


  (use-package evil-collection
    :straight t
    :config (evil-collection-init))

  (use-package evil-escape :straight t
      :init
      (setq-default evil-escape-key-sequence "jk")
      (setq evil-escape-unordered-key-sequence t)
      (setq-default evil-escape-delay 0.1)
      (evil-escape-mode 1))

  (use-package evil-surround
    :straight t
    :config (global-evil-surround-mode 1))

  (use-package evil-commentary :straight t :config (evil-commentary-mode 1))


#+end_src
*** Better *help* buffers
#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :bind
    (("C-h s" . helpful-symbol)
          ("C-h k" . helpful-key)
          ("C-h v" . helpful-variable)
          ("C-h c" . helpful-command)
          ("C-h f" . helpful-function)
          :map evil-normal-state-map
          ("SPC h v" . helpful-variable)
          ("SPC h k" . helpful-key)
          ("SPC h f" . helpful-function)
          ("SPC h s" . helpful-symbol)
          ("SPC h c" . helpful-command)
          )
  )
#+end_src
*** Which Key setup
show available keymaps based on what you typed
#+begin_src emacs-lisp
  (use-package which-key :straight t
    :config 
      (setq which-key-sort-order #'which-key-prefix-then-key-order
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10)

      (setq which-key-idle-delay 0.5)

      (which-key-mode 1)

      (which-key-setup-minibuffer)
      )
#+end_src
*** Edit Dotfiles
#+begin_src emacs-lisp
  (evil-global-set-key 'normal (kbd "SPC e c") (lambda ()
                                          (interactive)
                                          (find-file "~/.emacs.d/README.org")))
#+end_src
*** Highlight indents
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook ((yaml-mode-hook . #'highlight-indent-guides)
           (focus-in-hook . #'highlight-indent-guides-auto-set-faces))
      :straight t
      :config
      (setq highlight-indent-guides-method 'character))
#+end_src
*** Expand selection smartly
#+begin_src emacs-lisp
  (use-package expand-region :straight t
    :bind
    (("C-=" . er/expand-region)
     ("C--" . er/contract-region)))
#+end_src
*** Highlight todos in code
#+begin_src emacs-lisp
  (use-package hl-todo
    :straight t
    :config
      (global-hl-todo-mode 1)
      (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold)))
    )
#+end_src
*** Long files and lines 
#+begin_src emacs-lisp
  (use-package vlf :straight t)
  (global-so-long-mode 1)
#+end_src
*** Auto close parens
#+begin_src emacs-lisp
  (use-package smartparens
    :straight t
    :hook
    (prog-mode . smartparens-mode)
    :config
    (require 'smartparens-config))
#+end_src
** Completions
*** Minibuffer 
#+begin_src emacs-lisp
    (use-package vertico
      :straight t
      :init
      (vertico-mode 1)
      :config
      (setq vertico-resize nil
            vertico-count 17
            vertico-cycle t
            completion-in-region-function
            (lambda (&rest args)
              (apply (if vertico-mode
                         #'consult-completion-in-region
                       #'completion--in-region)
                     args))))
  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package consult
    :straight t
    :bind
    (:map evil-normal-state-map
          ("??" . consult-ripgrep)
          )
    )
#+end_src
*** In buffer 
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :hook (after-init . global-company-mode)
    :bind
    (:map company-active-map
          ("C-n" . #'company-select-next)
          ("C-p" . #'company-select-previous)
          ("C-o" . #'company-other-backend)
          ("<tab>" . #'company-complete-common-or-cycle)
          ("RET" . #'company-complete-selection)
          )
    :config
      (setq company-minimum-prefix-lenght 1)
      (setq company-tooltip-limit 30)
      (setq company-idle-delay 0.0)
      (setq company-echo-delay 0.1)
      (setq company-show-numbers t)
      (setq company-backends '(company-capf company-dabbrev company-files company-dabbrev-code))
    )
#+end_src
** Tools
*** Git 
**** Magit
BEST git client ever ?
#+begin_src emacs-lisp
  (use-package magit :straight t
    :bind
    (:map evil-normal-state-map
          ("SPC g g" . magit-status)))
#+end_src
**** Git messenger
#+begin_src emacs-lisp
  (use-package git-messenger :straight t
      :config
        (setq git-messenger:show-detail t)
        (setq git-messenger:use-magit-popup t))
#+end_src
*** Tramp: Emacs over SSH 
#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src
*** Enable menu bar on when loading pdf tools
#+begin_src emacs-lisp
  (add-hook 'pdf-tools-ensured-hook #'menu-bar-mode)
#+end_src
*** Terminal Emulator
#+begin_src emacs-lisp
  (use-package vterm
    :straight t)
#+end_src
                     
*** Org mode
#+begin_src emacs-lisp
  (use-package org
    :config
      (evil-define-key 'normal org-mode-map (kbd "SPC m b") 'amirreza/--org-insert-elisp-code-block)
      (evil-define-key 'normal org-mode-map (kbd "SPC m n") 'amirreza/--org-insert-no-tangle)
      (define-key org-src-mode-map (kbd "C-c C-c") #'org-edit-src-exit) ;; consitent with magit commit

      (defun amirreza/--org-insert-elisp-code-block ()
          (interactive)
          (insert (format "#+begin_src emacs-lisp\n\n#+end_src"))
          (previous-line)
          (beginning-of-line))

      (defun amirreza/--org-insert-no-tangle ()
          ""
          (interactive)
          (insert (format ":PROPERTIES:\n:header-args: :tangle no\n:END:\n"))
          (previous-line)
          (beginning-of-line))

      (setq org-ellipsis "⤵")
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-support-shift-select t)
      (setq org-src-window-setup 'current-window)
      (setq org-startup-folded t)
    )
#+end_src
** Projects
Emacs has a builtin =project.el= library to help with project based functions.
#+begin_src emacs-lisp
  (use-package project
    :bind
    (:map evil-normal-state-map
          ("SPC SPC" . project-find-file)
          ("SPC p s" . project-switch-project)
          ("SPC p p" . project-switch-project)
          ("SPC p d" . project-dired)
          ("SPC b b" . project-switch-to-buffer)  
          ("SPC f f" . find-file)
     )
    )
#+end_src
** Workspaces
Perspective provides a way to have multiple workspaces in Emacs.
#+begin_src emacs-lisp
  (use-package perspective :straight t
    :config
    (setq persp-suppress-no-prefix-key-warning t)
    (persp-mode 1)
    (evil-global-set-key 'normal (kbd "SPC w s") 'persp-switch)
    (evil-global-set-key 'normal (kbd "SPC w n") 'persp-next)
    (evil-global-set-key 'normal (kbd "SPC w d") 'persp-kill-buffer*)
    (evil-global-set-key 'normal (kbd "SPC w k") 'persp-kill)
    )
#+end_src
** Languages
*** Go
#+begin_src emacs-lisp
    (use-package go-mode
        :straight t
        :mode "\\.go\\'"
        :hook
        (go-mode . (lambda () (add-to-list 'exec-path (concat (getenv "HOME") "/go/bin")))))
#+end_src
*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode :straight t :mode "\\.rs\\'")
#+end_src
*** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :mode "\\.zig\\'"
    :straight t)
#+end_src
*** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode :straight t)
  (use-package lsp-haskell :straight t)
#+end_src
*** Misc
#+begin_src emacs-lisp
   (use-package apache-mode :straight t
       :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'" "access\\.conf\\'"))

     (use-package systemd :straight t
       :mode ("\\.service\\'" "\\.timer\\'"))

     (use-package nginx-mode :straight 
       :mode ("/etc/nginx/conf.d/.*" "/etc/nginx/.*\\.conf\\'"))

   (use-package docker-compose-mode
       :straight t
       :mode "docker-compose\\.yml")
   (use-package dockerfile-mode :straight t :mode "\\Dockerfile\\'")
#+end_src
** IDE
*** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode 
    :straight t
    :config
    (setq lsp-auto-guess-root t)
    (setq lsp-file-watch-threshold 100000)
    :bind
    (:map evil-normal-state-map
          ("K" . (lambda () (interactive) (lsp-hover))))
    :hook
    ((prog-mode) . lsp)

    )
#+end_src
*** Yasnippets: Code snippets
#+begin_src emacs-lisp
  (use-package yasnippet :straight t
    :bind
    (("C-x C-x" . yas-expand)
     ("C-x C-l" . yas-insert-snippet))
    :config
      (yas-global-mode 1)
    )
#+end_src

*** Flymake: inline diagnostics
#+begin_src emacs-lisp
  (use-package flymake
    :bind
    (:map evil-normal-state-map
          ("[d" . flymake-goto-next-error)
          ("]d" . flymake-goto-prev-error)
          ))
#+end_src
