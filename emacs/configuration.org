* Amirreza Emacs Distribution
** Store current time for further benchmark
#+BEGIN_SRC emacs-lisp
(setq start (float-time)) ;; to measure emacs startup time
#+END_SRC
** Startup optimizations
*** Suppress garbage collector at startup and defer it until after startup
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
      gc-cons-percentage 0.6)
(add-hook 'emacs-startup-hook
  (lambda ()
    (setq gc-cons-threshold 16777216 ; 16mb
          gc-cons-percentage 0.1)))

#+END_SRC
*** Suppress garbage collector in minibuffer
#+BEGIN_SRC emacs-lisp
(defun defer-garbage-collection-h ()
  (setq gc-cons-threshold 16777216))

(defun restore-garbage-collection-h ()
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold most-positive-fixnum))))
(setq package-enable-at-startup nil)
(add-hook 'minibuffer-setup-hook #'defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'restore-garbage-collection-h)

#+END_SRC
*** Unset file-name-handler-alist temporarily
#+BEGIN_SRC emacs-lisp
(defvar --file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
  (lambda ()
    (setq file-name-handler-alist --file-name-handler-alist)))
#+END_SRC
*** Start Emacs in fundamental mode 
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'fundamental-mode)
#+END_SRC
** My Personal Info
#+BEGIN_SRC emacs-lisp
(setq user-full-name    "Amirreza Askarpour"
      user-mail-address "amirrezaask@protonmail.com")

#+END_SRC
** Variables
#+BEGIN_SRC emacs-lisp
(defvar vars-file-path "~/.emacs_vars.el" "Path to vars file to load for configs")
(defvar font-family "mononoki" "Font to use for Emacs.")
(defvar font-size 11 "Font size for Emacs.")
(defvar dark-theme 'doom-dracula "Default dark theme to use")
(defvar light-theme 'doom-one-light "Default light theme to use")
(defvar incremental-completion 'helm "What incremental completion framework to use ['helm, 'ivy, 'ido]")
(defvar side 'gamer "Dark side or the Light side ['holy, 'evil 'god]")
(defvar modeline 'doom "What modeline to use ['default 'doom 'spacemacs 'powerline]")
(defvar ui-mode 'modern-dark "A combination of theme and modeline together ['classic 'modern-dark 'modern-light]")
(setq debug-on-error nil) ;; basically emacs debug mode.
#+END_SRC
** Load vars file
All variables should be written in the vars file and be loaded during Emacs startup
#+BEGIN_SRC emacs-lisp
(load-file vars-file-path)
#+END_SRC
** Basic package manager and use-package setup
*** Straight package manager
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq straight-use-package-by-default t)
#+END_SRC
*** Install use-package macro
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
#+END_SRC
** Some Basic Emacs setup
*** setup custom file so emacs won't mess with init.el
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.__custom.el")
#+END_SRC
*** Turn off emacs annoying and ugly startup page
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen 0) ;; turn off emacs annoying startup page.
#+END_SRC
*** Turn off Emacs annoying ~ files
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ;; turn off emacs annoying ~ files
#+END_SRC
*** Turn Emacs # files
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil) ;; turn off emacs annoying # files
#+END_SRC

*** Turn Emacs annoying beeps
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
*** Turn off emacs GUI toolbar, menubar and scrollbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0) ;; turn off emacs GUI toolbar
(scroll-bar-mode 0) ;; turn off emacs GUI scrollbar
(menu-bar-mode 0) ;; turn emacs GUI menubar
#+END_SRC
*** Define alias for emacs question
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p) ;; instead of yes-or-no ask y-or-no, only for convinience
#+END_SRC
*** Enable Line numbers globally
#+BEGIN_SRC emacs-lisp
(global-linum-mode t) ;; enable line numbers
#+END_SRC

** Some UI Enhancements and Theme setup
*** Disable GUI Pop Up
#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC
*** Prettify Lisp codes
#+BEGIN_SRC emacs-lisp
(defconst lisp--prettify-symbols-alist
  '(("lambda"  . ?Î»))) ;; shows lambda word as the symbol
(global-prettify-symbols-mode 1)
#+END_SRC
*** Font setup
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist (cons 'font (format "%s-%d" font-family font-size)))
#+END_SRC
*** Themes Setup
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  (use-package doom-themes  :defer t)
  (use-package badwolf-theme :defer t)
  (defvar current-mode 0 "Current mode 0=> dark 1=>light")
  (defun light-mode ()
    "Light it up."
    (interactive)
    (load-theme light-theme t))
  (defun dark-mode ()
    "Ascend to darkness"
    (interactive)
    (load-theme dark-theme t))
  (defun toggle-color-mode ()
    (interactive)
    (if (= current-mode 0) (progn (dark-mode) (setq current-mode 1)) (progn (light-mode) (setq current-mode 0)))
  )
  (global-set-key (kbd "C-x t t") 'toggle-color-mode)
  (dark-mode)
#+END_SRC
*** Show emojis
#+BEGIN_SRC emacs-lisp
(use-package emojify  :config (emojify-mode 1))
#+END_SRC
*** Modeline...
#+BEGIN_SRC emacs-lisp
  (when (eq modeline 'doom)
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)))
#+END_SRC
*** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (setq dashboard-banner-logo-title "Welcome to dark side of Emacs")
  (setq dashboard-startup-banner 'logo) 
  (setq dashboard-center-content t)
  (dashboard-setup-startup-hook))
#+END_SRC
** Keybindings
*** Keybinding Macro
#+BEGIN_SRC emacs-lisp
      (defun -bindkey-evil (map fn keys)
	"Bind given FN to given KEYS on given MAP."
	(let ((normal-key (plist-get keys :normal))
	      (visual-key (plist-get keys :visual))
	      (insert-key (plist-get keys :insert))
	      (emacs-key (plist-get keys :emacs)))
	  (cond
	  ((not (null normal-key)) (evil-define-key 'normal map (kbd normal-key) fn))
	  ((not (null visual-key)) (evil-define-key 'visual map (kbd visual-key) fn))
	  ((not (null insert-key)) (evil-define-key 'insert map (kbd insert-key) fn))
	  ((not (null emacs-key)) (evil-define-key 'emacs map (kbd emacs-key) fn)))))
  
      (defun -bindkey-holy (map fn keys)
	"Bind given FN to given KEYS on given MAP."
	(define-key map (kbd keys) fn))

      (defmacro bindkey (map fn &rest keys)
	"Binds FN to KEYS on given MAP based on side you are on."
	(let ((evil-keys (plist-get keys :evil)) (holy-keys (plist-get keys :holy)))
	(cond
	  ((eq side 'evil) `(-bindkey-evil ,map ,fn (quote ,evil-keys)))
	  ((eq side 'holy) `(-bindkey-holy ,map ,fn ,holy-keys))
	  ((eq side 'gamer) `(-bindkey-holy ,map ,fn ,holy-keys))
	 )
	))
  (macroexpand '(bindkey global-map 'helm-mini :holy "M-e"))
#+END_SRC
*** Choose your side
**** Some macro to identify evil from holy
#+BEGIN_SRC emacs-lisp
  (defmacro when-evil (&rest body)
    `(when (eq side 'evil)
       ,@body))
  (defmacro when-holy (&rest body) `(when (eq side 'holy) ,@body))
#+END_SRC
**** Gamer Side
If you have experience in games which use left hand for movement
#+BEGIN_SRC emacs-lisp
  (when (or (eq side 'gamer))
    (use-package gamer.el :straight (:host github :repo "amirrezaask/gamer.el") :config (global-gamer-mode 1)))
#+END_SRC
**** Holy Side
You're good god fearing man
#+BEGIN_SRC emacs-lisp
(when-holy
      (use-package guru-mode  
	:config (guru-global-mode 1)))
  (when (not (eq side 'evil)) 
    (progn
      (global-set-key (kbd "C--") 'text-scale-decrease)
      (global-set-key (kbd "C-=") 'text-scale-increase)
      (global-set-key (kbd "C-o") 'other-window)
      (global-set-key (kbd "C-1") 'delete-other-windows)
      (global-set-key (kbd "C-2") 'split-window-below) 
      (global-set-key (kbd "C-3") 'split-window-right)
      (global-set-key (kbd "C-,") 'previous-buffer)
      (global-set-key (kbd "C-.") 'next-buffer)
      ))

#+END_SRC
**** Evil Side
You are devil's advocate by choice
#+BEGIN_SRC emacs-lisp
  (when-evil
   (use-package evil 
     :init
     (setq evil-want-keybinding nil)
     (add-hook 'simple-mode-hook 'evil-mode)
     :config
     (evil-mode 1)
     (bindkey global-map 'find-file :evil (:normal "SPC f f"))
     (bindkey global-map 'kill-buffer :evil (:normal "SPC b k"))
     (bindkey global-map 'save-buferr :evil (:normal "SPC b s"))
     (bindkey global-map 'next-buffer :evil (:normal "SPC b n"))
     (bindkey global-map 'previous-buffer :evil (:normal "SPC b p"))
     (bindkey global-map 'switch-to-buffer :evil (:normal "SPC b l"))
     (bindkey global-map 'other-window :evil (:normal "SPC w o"))
     (bindkey global-map 'delete-window :evil (:normal "SPC w d"))
     (bindkey global-map 'delete-other-windows :evil (:normal "SPC w m"))
     (bindkey global-map 'split-window-vertically :evil (:normal "SPC w s v"))
     (bindkey global-map 'kill-buffer :evil (:normal "SPC b k"))
     (bindkey global-map 'eval-last-sexp :evil (:normal "SPC e e"))
     (bindkey global-map 'eval-buffer :evil (:normal "SPC e b"))
     (bindkey global-map 'comment-line :evil (:normal "SPC l c"))
     (bindkey global-map 'describe-key :evil (:normal "SPC d k"))
     (bindkey global-map 'describe-function :evil (:normal "SPC d f"))
     (bindkey global-map 'describe-variable :evil (:normal "SPC d v"))
     (bindkey global-map 'toggle-color-mode :evil (:normal "SPC t t")))
   (use-package linum-relative :config (linum-relative-mode))) 
#+END_SRC
*** Which key helps us when we only remember part of a keybinding
#+BEGIN_SRC emacs-lisp
(use-package which-key  :init (setq echo-keystrokes 0.3) :config (which-key-mode 1))
#+END_SRC
** Incremental Completion
*** Helm
#+BEGIN_SRC emacs-lisp
  (when (eq incremental-completion 'helm)
      (use-package helm
	:init (setq helm-buffers-fuzzy-matching t
		    helm-recentf-fuzzy-match t)
	:bind* (:map helm-map
		     ("TAB" . #'helm-execute-persistent-action)
		     ("<tab>" . #'helm-execute-persistent-action)
		     ("C-z". #'helm-select-action))
	:config
	(helm-mode 1)
	(bindkey global-map 'helm-find-files :evil (:normal "SPC f f") :holy "C-x C-f")
	(bindkey global-map 'helm-M-x :evil (:normal "SPC SPC") :holy "M-x")
	(bindkey global-map 'helm-recentf :evil (:normal "SPC f r") :holy "C-x C-r")
	(bindkey global-map 'helm-mini :evil (:normal "SPC b l") :holy "C-x b")))
#+END_SRC
*** Ivy
#+BEGIN_SRC emacs-lisp
  (when (eq incremental-completion 'ivy)
    (progn
      (use-package swiper
	:commands (swiper)
	:config
	(bindkey global-map 'swiper :evil (:normal "SPC s s") :holy "C-s"))
    
      (use-package counsel
	:commands (counsel-M-x counsel-find-file ivy-switch-buffer)
	:config
	(bindkey global-map 'counsel-M-x :evil (:normal "SPC SPC") :holy "M-x")
	(bindkey global-map 'counsel-find-file :evil (:normal "SPC f f") :holy "C-x C-f")
	(bindkey global-map 'ivy-switch-buffer :evil (:normal "SPC b l") :holy "C-x b"))))
#+END_SRC
*** IDO
#+BEGIN_SRC emacs-lisp
  (when (eq incremental-completion 'ido)
    (progn
      (use-package ido-vertical-mode
	:config
	(ido-mode 1)
	(ido-everywhere 1)
	(ido-vertical-mode 1)
	(setq ido-vertical-define-keys 'C-n-and-C-p-only))
      (use-package smex
	:commands
	(smex)
	:init
	(bindkey global-map 'smex :evil (:normal "SPC SPC") :holy "M-x"))))
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets :defer t :commands (org-bullets-mode) :init (add-hook 'org-mode-hook #'org-bullets-mode))
  (use-package htmlize :defer t)
#+END_SRC
** Editor setup
*** Add Support for json, yaml and markdown
#+BEGIN_SRC emacs-lisp
(use-package json-mode  :mode "\\.json\\'"
  :config
  (add-hook 'before-save-hook 'json-mode-beautify))
(use-package markdown-mode  :mode "\\.md\\'")
(use-package yaml-mode  :mode "\\.ya?ml\\'")
#+END_SRC
*** Whitespace mode
#+BEGIN_SRC emacs-lisp
  (use-package whitespace :hook ((prog-mode text-mode) . whitespace-mode)
    :init
	   (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))
	   (setq whitespace-display-mappings
	  '(
	    (space-mark 32 [183] [46])
	    (newline-mark 10 [182 10])
	    (tab-mark 9 [9655 9] [92 9])
	    ))
	   )
#+END_SRC
** IDE stuff
*** Auto Insert File Header
#+BEGIN_SRC emacs-lisp
 (use-package autoinsert :ensure t 
  :init 
  (setq auto-insert-query nil)
  (auto-insert-mode 1))
#+END_SRC
*** Syntax Checker
#+BEGIN_SRC emacs-lisp
(use-package flycheck  :hook ((python-mode go-mode php-mode emacs-lisp-mode) . flycheck-mode))
#+END_SRC
*** Debugger Support
#+BEGIN_SRC emacs-lisp
;; (use-package dap-mode  :defer t :hook ((go-mode python-mode php-mode) . dap-mode))
#+END_SRC
*** Version Control
#+BEGIN_SRC emacs-lisp
    (use-package magit
      :commands (magit-status)
      :init
      (bindkey global-map 'magit-status :holy "C-x g" :evil (:normal "SPC g s")))
    (use-package diff-hl  :config (global-diff-hl-mode))
  (when
  (eq side 'evil)
      (use-package evil-magit :defer t :init (add-hook 'magit-mode-hook (lambda () (require 'evil-magit)) 
    )))
#+END_SRC
*** Language Server protocol Support
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode  :defer t)
(use-package lsp-ui  :defer t)
#+END_SRC
*** Auto complete
#+BEGIN_SRC emacs-lisp
(use-package company-lsp  :defer t)
(use-package company 
  :config
  (global-company-mode t)
  (setq company-tooltip-limit 30)
  (setq company-idle-delay .1)
  (setq company-echo-delay 0)
  (setq company-dabbrev-downcase nil)
  (add-to-list 'company-backends 'company-dabbrev)
  (add-to-list 'company-backends 'company-dabbrev-code))
#+END_SRC
** Go setup
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    
    :config
	(lsp)
	(add-hook 'before-save-hook #'lsp-format-buffer t t)
	(add-hook 'before-save-hook #'lsp-organize-imports t t)
	(add-hook 'go-mode-hook 'go-eldoc-setup)
	(local-set-key (kbd "M-.") 'godef-jump)
	(local-set-key (kbd "M-*") 'pop-tag-mark)
	(add-to-list 'exec-path (concat (concat (getenv "HOME") "/go") "/bin")))

  (use-package go-add-tags  :defer t :config (global-set-key "C-c C-s" 'go-add-tags))
  (use-package gotest  :defer t :config (global-set-key (kbd "C-c C-t C-t") 'go-test-current-test) (global-set-key (kbd "C-c C-t C-f") 'go-test-current-file))
#+END_SRC
** Haskell setup
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode :mode "\\.hs\\'")
#+END_SRC
** Python Setup
*** Python Mode 
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :defer t
  :mode "\\.py\\'"
  :config
  (add-to-list 'exec-path (concat (getenv "HOME") "/.local/bin"))
  (lsp))
#+END_SRC
*** Pyhon Language Server
#+BEGIN_SRC emacs-lisp
(use-package lsp-python-ms
  
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp)))) 
#+END_SRC
*** Autopep8 formatting
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8  :defer t :hook python-mode)
#+END_SRC
** Elixir Setup
#+BEGIN_SRC emacs-lisp
(use-package elixir-mode  :mode "\\.ex\\'" :config (lsp))
(use-package alchemist  :defer t)
#+END_SRC
** Rust Setup
#+BEGIN_SRC emacs-lisp
(use-package rust-mode  :mode "\\.rs\\'" :init (add-hook 'rust-mode-hook #'lsp))
(use-package flycheck-rust :mode "\\.rs\\'" :init (add-hook 'flycheck-mode-hook #'flycheck-rust-setup) :hook rust-mode)
(use-package cargo :mode "\\.rs\\'" :init (add-hook 'rust-mode-hook #'cargo-minor-mode))
#+END_SRC
** Lisp Setup
*** General Paren helpers
#+BEGIN_SRC emacs-lisp
  (use-package paredit :hook ((emacs-lisp-mode clojure-mode) . paredit-mode))
  (use-package parinfer
    :hook ((emacs-lisp-mode clojure-mode) . parinfer-mode))
  (use-package rainbow-delimiters  :hook ((emacs-lisp-mode python-mode go-mode php-mode) . rainbow-delimiters-mode))
#+END_SRC
*** Clojure setup
 #+BEGIN_SRC emacs-lisp
   (use-package clojure-mode :mode "\\.cljs?\\'" :config (lsp))
   (use-package cider 
     :init
     (add-hook 'cider-mode-hook (lambda () (call-interactively 'cider-jack-in)))
     :config
     (bindkey cider-mode-map 'cider-eval-last-sexp :evil (:normal "SPC e e") :holy "C-x C-e"))
 #+END_SRC
** Lua Setup...
#+BEGIN_SRC emacs-lisp
(use-package lua-mode :mode "\\.lua\\'")
#+END_SRC
** PHP Setup
#+BEGIN_SRC emacs-lisp
  (use-package php-mode  :defer :init (add-hook 'php-mode-hook #'lsp))
  (use-package phpunit  :defer t
    :bind (("C-c C-t t" . phpunit-current-test) ("C-c C-t c" . phpunit-current-class) ("C-c C-t p" . phpunit-current-project)))
#+END_SRC
** Javascript Setup
#+BEGIN_SRC emacs-lisp
(use-package js2-mode  :defer t :hook js-mode)
#+END_SRC
** Typescript Setup
#+BEGIN_SRC emacs-lisp
(use-package tide  :defer t :mode "\\.ts\\'")
#+END_SRC
** Some webish stuff
*** Web Mode
   #+BEGIN_SRC emacs-lisp
   (use-package web-mode  :defer t :mode ("\\.html\\'" "\\.css\\'"))
   #+END_SRC
** Devops Setup
#+BEGIN_SRC emacs-lisp
  (use-package kubel  :commands (kubel))
  (use-package dockerfile-mode :defer t :mode "Dockerfile")
  (use-package ansible :defer t :init (add-hook 'yaml-mode-hook (lambda () (ansible))))
#+END_SRC

** Database Client
*** truncate lines in SQL mode
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))
#+END_SRC
** Benchmark startup time
#+BEGIN_SRC emacs-lisp
(message "Startup Time %f" (- (float-time) start))
#+END_SRC
