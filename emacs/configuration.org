* Amirreza Emacs Configuration
** Debug On error
#+BEGIN_SRC emacs-lisp
(setq debug-on-error 1)
#+END_SRC
** My Personal Info
#+BEGIN_SRC emacs-lisp
(setq user-full-name    "Amirreza Askarpour"
      user-mail-address "amirrezaask@protonmail.com")

#+END_SRC
** Basic package manager and use-package setup
*** Store current time for further benchmark
#+BEGIN_SRC emacs-lisp
(setq start (float-time)) ;; to measure emacs startup time
#+END_SRC
*** Setup Emacs Package manager and add repos
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize) ;; initialize emacs built-in package manager
(setq package-archives '(;; ("org"       . "http://orgmode.org/elpa/")
			 ("gnu"       . "http://elpa.gnu.org/packages/")
			 ("melpa"     . "https://melpa.org/packages/")
			 ("marmalade" . "http://marmalade-repo.org/packages/")))
#+END_SRC

*** Bootstrap Straight.el
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
*** Install use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
** Some Basic Emacs setup
*** Sync PATH with OS
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :straight t
  :init
    (when (memq window-system '(mac ns x))
     (exec-path-from-shell-initialize)))
#+END_SRC
*** setup custom file so emacs won't mess with init.el
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.__custom.el")
#+END_SRC
*** Turn off emacs annoying and ugly startup page
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen 0) ;; turn off emacs annoying startup page.
#+END_SRC
*** Turn off Emacs annoying ~ files
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ;; turn off emacs annoying ~ files
#+END_SRC
*** Turn Emacs # files
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil) ;; turn off emacs annoying # files
#+END_SRC

*** Turn Emacs annoying beeps
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
*** Turn off emacs GUI toolbar, menubar and scrollbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0) ;; turn off emacs GUI toolbar
(scroll-bar-mode 0) ;; turn off emacs GUI scrollbar
(menu-bar-mode 0) ;; turn emacs GUI menubar
#+END_SRC
*** Define alias for emacs question 
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p) ;; instead of yes-or-no ask y-or-no, only for convinience
#+END_SRC
*** Enable Line numbers globally
#+BEGIN_SRC emacs-lisp
(global-linum-mode t) ;; enable line numbers
#+END_SRC

*** Ask for confirmation before emacs quiting
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
*** Winner mode for better undo/redo
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Some UI Enhancements and Theme setup
*** Disable GUI Pop Up
#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC
*** Prettify Lisp codes
#+BEGIN_SRC emacs-lisp
(defconst lisp--prettify-symbols-alist
  '(("lambda"  . ?Î»))) ;; shows lambda word as the symbol
(global-prettify-symbols-mode 1)
#+END_SRC
*** Font setup
    
#+BEGIN_SRC emacs-lisp
(defvar font-family "Jetbrains Mono" "Font to use for Emacs.")
(defvar font-size 11 "Font size for Emacs.")
(add-to-list 'default-frame-alist (cons 'font (format "%s-%d" font-family font-size)))
(set-face-attribute 'default nil
		    :family font-family
		    :height (* 10 font-size))
#+END_SRC
*** Themes Setup
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  (use-package dracula-theme :straight t :defer t)
  (use-package solarized-theme :straight t :defer t)
  (use-package spacemacs-theme :straight t :defer t)
  (use-package doom-themes :straight t :defer t)
  (defvar dark-theme 'doom-one "Default dark theme to use")
  (defvar light-theme 'doom-one-light "Default light theme to use")
  (defvar current-mode 0 "Current mode 0=> dark 1=>light")
  (defun light-mode ()
    "Light it up."
    (interactive)
    (load-theme light-theme t))
  (defun dark-mode ()
    "Ascend to darkness"
    (interactive)
    (load-theme dark-theme t))
  (defun toggle-color-mode ()
    (interactive)
    (if (= current-mode 0) (progn (dark-mode) (setq current-mode 1)) (progn (light-mode) (setq current-mode 0)))
  )
  (global-set-key (kbd "C-x t") 'toggle-color-mode)
  ;; (light-mode)
  (dark-mode)
#+END_SRC
*** Show emojis
#+BEGIN_SRC emacs-lisp
(use-package emojify :straight t :config (emojify-mode 1))
#+END_SRC
*** All the icons  
    #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons :straight t)
    (use-package all-the-icons-dired :straight t :hook dired-mode)
    #+END_SRC
*** Doom modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline :straight t :init (doom-modeline-mode 1))

#+END_SRC
** Enhance Emacs internals
*** IDO
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode :straight t :config (ido-mode 1) (ido-vertical-mode 1) (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC
*** Smex (Better M-x)
#+BEGIN_SRC emacs-lisp
(use-package smex :straight t :bind (("M-x" . smex)))
#+END_SRC
*** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper :straight t :init (global-set-key (kbd "C-s") 'swiper))
#+END_SRC
*** Helpful for better helps
#+BEGIN_SRC emacs-lisp
  (use-package helpful  :straight t
    :bind (("C-h f" . helpful-callable)
	   ("C-h v" . helpful-variable)
	   ("C-h k" . helpful-key)
	   ("C-h F" . helpful-function)
	   ("C-h C" . helpful-command)))
#+END_SRC
** Add support for various Markup languages
*** Add Support for json, yaml and markdown
#+BEGIN_SRC emacs-lisp
(use-package json-mode :straight t :mode "\\.json\\'"
  :config
  (add-hook 'before-save-hook 'json-mode-beautify))
(use-package markdown-mode :straight t :mode "\\.md\\'")
(use-package yaml-mode :straight t :mode "\\.ya?ml\\'")
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets :straight t :defer t :commands (org-bullets-mode) :init (add-hook 'org-mode-hook #'org-bullets-mode))
  (use-package htmlize :straight t :defer t)
#+END_SRC
** Make Emacs best editor possible
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides :straight t 
      :hook
      ((prog-mode yaml-mode json-mode) . highlight-indent-guides-mode) 
      :init
      (setq highlight-indent-guides-method 'character)
      (setq highlight-indent-guides-character ?\|))
#+END_SRC
** Keybindings
*** Some better keybindings for emacs internal actions
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-x -") 'split-window-vertically)
(global-set-key (kbd "C-x '") 'split-window-horizontally)
#+END_SRC
# *** Vi is great editor so let's have that as well ...
# #+BEGIN_SRC emacs-lisp
# (use-package evil :ensure t :config (evil-mode t)) ;; Only for editing.
# #+END_SRC
*** Which key helps us when we only remember part of a keybinding
#+BEGIN_SRC emacs-lisp
(use-package which-key :straight t :init (setq echo-keystrokes 0.3) :config (which-key-mode 1))
#+END_SRC
# *** Help us a lot when using Vi Text Objects and motions
# #+BEGIN_SRC emacs-lisp
# ;; (use-package linum-relative :ensure t :config (linum-relative-mode))
# #+END_SRC

** IDE stuff
*** Auto Insert File Header
#+BEGIN_SRC emacs-lisp
 (use-package autoinsert :ensure t :straight t
  :init 
  (setq auto-insert-query nil)
  (auto-insert-mode 1))
#+END_SRC
*** Syntax Checker
#+BEGIN_SRC emacs-lisp
(use-package flycheck :straight t :hook ((python-mode go-mode php-mode emacs-lisp-mode) . flycheck-mode))
#+END_SRC
*** Debugger Support
#+BEGIN_SRC emacs-lisp
(use-package dap-mode :straight t :defer t :hook ((go-mode python-mode php-mode) . dap-mode))
#+END_SRC
*** Code Folding
#+BEGIN_SRC emacs-lisp
  (use-package dash :straight t :defer t)
  (use-package s :straight t :defer t)
  (use-package origami :straight t :defer t)
#+END_SRC
*** Version Controll
#+BEGIN_SRC emacs-lisp
  (use-package magit :straight t :commands (magit-status) :bind (("C-x g" . magit-status)))
  (use-package diff-hl :straight t :config (global-diff-hl-mode))
#+END_SRC
*** Language Server protocol Support
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode :straight t :defer t)
(use-package lsp-ui :straight t :defer t)
#+END_SRC
*** Projectile 
Provides fuzzy file search and so much more in a project (git repo)
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :straight t
  :config
  (projectile-mode)
  (setq-default projectile-mode-line
   '(:eval
     (if (file-remote-p default-directory)
	 " Proj"
       (format " Proj[%s]" (projectile-project-name))))))
#+END_SRC
*** Completion Framework
#+BEGIN_SRC emacs-lisp
(use-package company-lsp :straight t :defer t)
(use-package company :straight t
  :config
  (setq company-tooltip-limit 30)
  (setq company-idle-delay .1)
  (setq company-echo-delay 0)
  (global-company-mode))
#+END_SRC
*** Engine Mode
**** A must have mode for every developer on the planet
#+BEGIN_SRC emacs-lisp
(use-package engine-mode :straight t :config (engine-mode t))
#+END_SRC
**** defining engines
#+BEGIN_SRC emacs-lisp
(defengine stackoverflow
 "https://stackoverflow.com/search?q=%s")
(defengine github
 "https://github.com/search?ref=simplesearch&q=%s")
#+END_SRC

** Go setup
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    :straight t
    :config
	(lsp)
	(add-hook 'before-save-hook #'lsp-format-buffer t t)
	(add-hook 'before-save-hook #'lsp-organize-imports t t)
	(add-hook 'go-mode-hook 'go-eldoc-setup)
	(local-set-key (kbd "M-.") 'godef-jump)
	(local-set-key (kbd "M-*") 'pop-tag-mark)
	(add-to-list 'exec-path (concat (concat (getenv "HOME") "/go") "/bin")))

  (use-package go-add-tags :straight t :defer t :config (global-set-key "C-c C-s" 'go-add-tags))
  (use-package gotest :straight t :defer t :config (global-set-key (kbd "C-c C-t C-t") 'go-test-current-test) (global-set-key (kbd "C-c C-t C-f") 'go-test-current-file))
#+END_SRC
** Clojure setup
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode :straight t :defer t :mode "\\.cljs?\\'")
(use-package cider :straight t :defer t :hook clojure-mode :config (cider-jack-in))
#+END_SRC
** Python Setup
*** Python Mode 
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :straight t
  :defer t
  :mode "\\.py\\'"
  :config
  (add-to-list 'exec-path (concat (getenv "HOME") "/.local/bin"))
  (lsp))
#+END_SRC
*** Autopep8 formatting
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8 :straight t :defer t :hook python-mode)
#+END_SRC
** Elixir Setup
#+BEGIN_SRC emacs-lisp
(use-package elixir-mode :straight t :defer t :mode "\\.ex\\'")
(use-package alchemist :straight t :defer t)
#+END_SRC
** Rust Setup
#+BEGIN_SRC emacs-lisp
(use-package rust-mode :straight t :defer t :mode "\\.rs\\'" :init (add-hook 'rust-mode-hook #'lsp))
#+END_SRC
** Lisp Setup
*** Help us with parens
#+BEGIN_SRC emacs-lisp
  (use-package paredit :straight t :hook (emacs-lisp-mode . paredit-mode))
  (use-package rainbow-delimiters :straight t :hook ((emacs-lisp-mode python-mode go-mode php-mode) . rainbow-delimiters-mode))
#+END_SRC
** PHP Setup
#+BEGIN_SRC emacs-lisp
  (use-package php-mode :straight t :defer :init (add-hook 'php-mode-hook #'lsp))
  (use-package phpunit :straight t :defer t
    :bind (("C-c C-t t" . phpunit-current-test) ("C-c C-t c" . phpunit-current-class) ("C-c C-t p" . phpunit-current-project)))
#+END_SRC
** Javascript/Typescript Setup
#+BEGIN_SRC emacs-lisp
(use-package js2-mode :straight t :defer t :hook js-mode)
(use-package tide :straight t :defer t :mode "\\.ts\\'")
#+END_SRC
** Some webish stuff
*** Web Mode
   #+BEGIN_SRC emacs-lisp
   (use-package web-mode :straight t :defer t :mode ("\\.html\\'" "\\.css\\'"))
   #+END_SRC
** Devops Setup
#+BEGIN_SRC emacs-lisp
  (use-package kubel :straight t)
  (use-package dockerfile-mode :straight t :defer t)
  (use-package ansible :straight t :defer t :init (add-hook 'yaml-mode-hook (lambda () (ansible))))
#+END_SRC

** Benchmark startup time
#+BEGIN_SRC emacs-lisp
(message "Startup Time %f" (- (float-time) start))
#+END_SRC
** Open my TODO file
#+BEGIN_SRC emacs-lisp
(find-file "~/.TODO.org")
#+END_SRC
