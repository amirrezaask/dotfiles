"Effient Over Fancy"
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-jdaddy'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'fatih/vim-go' 
Plug 'ekalinin/dockerfile.vim'
Plug 'tpope/vim-fugitive'
Plug 'michaeljsmith/vim-indent-object'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'ryanolsonx/vim-lsp-python'
Plug 'pearofducks/ansible-vim'
Plug 'dense-analysis/ale'
Plug 'airblade/vim-gitgutter'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
call plug#end()


"Basic setup"
set guifont=Jetbrains\ Mono\ 13
colorscheme dracula
set nocompatible
set number
set belloff=all
set encoding=utf-8
set showcmd
filetype indent on
filetype plugin on
set wildmenu
set showmatch
set ignorecase
set relativenumber
set incsearch
set hlsearch
set foldenable
set foldlevelstart=10
set tabstop=8
set foldmethod=indent
set path=./
set path+=**
set ruler
set laststatus=2
set autowrite
set clipboard=unnamedplus
"Basic setup ends here"
au User lsp_setup call lsp#register_server({
\ 'name': 'intelephense',
\ 'cmd': {server_info->['node', expand('/usr/lib/node_modules/intelephense/lib/intelephense.js'), '--stdio']},
\ 'initialization_options': {"storagePath": "/usr/lib/node_modules/intelephense"},
\ 'whitelist': ['php'],
\ 'workspace_config': { 'intelephense': {
\   'files.associations': ['*.php'],
\ }},
\ })
"Helpers Functions"
function! RecursiveGrep()
	let pattern = input("enter pattern: ")
	!grep -rnw './' -e pattern 

endfunction

"Keybidings"
let mapleader="\<SPACE>"
nnoremap <Leader>sc <C-W>o
nnoremap <Leader>ff :FZF<CR> 
nnoremap <Leader>sh <C-W><C-H>
nnoremap <Leader>sj <C-W><C-j>
nnoremap <Leader>sk <C-W><C-k>
nnoremap <Leader>sl <C-W><C-l>
nnoremap <Leader>bs :w<CR>
nnoremap <Leader>ss :/
nnoremap <Leader>fr :%s/
nnoremap <Leader>sg :Rg<CR> 
map <Up> <NOP>
map <Down> <NOP>
map <Right> <NOP>
map <Left> <NOP>

"Go setup"
nnoremap <Leader>gb :GoBuild<CR>
nnoremap <Leader>gt :GoTest<CR>
nnoremap <Leader>gr :GoRun<CR>
autocmd Filetype go iabbrev pkgm package main<CR>func main(){<CR>}
autocmd Filetype go iabbrev iferr if err != nil {<CR>    panic(err)<CR>}
autocmd Filetype go iabbrev print fmt.Println()
autocmd Filetype go iabbrev abbrev fprint fmt.Fprintf()
autocmd Filetype go iabbrev printf fmt.Printf()
