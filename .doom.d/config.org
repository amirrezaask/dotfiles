* My DOOM Emacs Configuration
This is my DOOM Emacs configuration file, I also have a vanilla Emacs configuration but I have moved into DOOM for it's large community and support
** Use lexical bindings
#+begin_src elisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src
** Personal information
#+begin_src emacs-lisp
(setq user-full-name "Amirreza Askarpour"
      user-mail-address "raskarpour@gmail.com")
#+end_src
** DOOM Modules
Doom uses a module system to decouple different packages and configurations from each other and also provide a way for user to easily enable
or disable a module. Now let's enable what I want.
#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +eglot)               ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;; pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       (haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;; (java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;; (ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       zig               ; C, but simpler

       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src
** Theme
#+begin_src elisp
(setq doom-theme 'doom-moonlight)
#+end_src
** Font
#+begin_src elisp
(setq doom-font "JetBrainsMono Nerd Font Mono-14")
#+end_src
** Windows
#+begin_src emacs-lisp
(map! "<up>" 'evil-window-increase-height)
(map! "<down>" 'evil-window-decrease-height)

(map! "<right>" 'evil-window-increase-height)
(map! "<left>" 'evil-window-decrease-height)

#+end_src
** Evil split
#+begin_src emacs-lisp
(setq evil-split-window-below t)
(setq evil-vsplit-window-right t)
#+end_src
** Map ; to :
for ease of use I map ; to : for simpler evil commands.
#+begin_src emacs-lisp
(map! :n ";" 'evil-ex)
#+end_src
** Workspaces
Workspaces like i3, each workspace has it's own windows and buffers, mostly I have one Emacs open and multiple workspaces for each project.
#+begin_src elisp
(map! :leader :map global-map "w s" #'persp-switch)
#+end_src
** Org
I don't do a lot of configuration for org, most important ones are "SPC m b" which inserts a code block
and "SPC m n" which inserts a no tangle block.
#+begin_src elisp
(use-package! org
        :config
        (map! :leader :n :map org-mode-map "m b" 'amirreza/--org-insert-elisp-code-block)
        (map! :leader :n :map org-mode-map "m n" 'amirreza/--org-insert-no-tangle)
        (defun amirreza/--org-insert-elisp-code-block ()
                (interactive)
                (insert (format "#+begin_src emacs-lisp\n\n#+end_src"))
                (previous-line)
                (beginning-of-line))

        (defun amirreza/--org-insert-no-tangle ()
                ""
                (interactive)
                (insert (format ":PROPERTIES:\n:header-args: :tangle no\n:END:\n"))
                (previous-line)
                (beginning-of-line))

        (setq org-src-fontify-natively t)
        (setq org-src-tab-acts-natively t)
        (setq org-support-shift-select t)
        (setq org-src-window-setup 'current-window)
        (setq org-startup-folded t)
        )
#+end_src
** LSP
LSP configurations in DOOM is almost complete I just need some simpler keybindings for most used operations
#+begin_src emacs-lisp
(after! lsp-mode
        (map! :map lsp-mode-map :n (kbd "gd") 'xref-find-definitions) ;; I know it's default, but I wanted to have it for explicitness.
        (map! :map lsp-mode-map :n (kbd "gr") 'xref-find-references)
        (map! :map lsp-mode-map :n (kbd "gi") 'lsp-find-implementation)
        )
(after! eglot
        (map! :map eglot-mode-map :n (kbd "gd") 'xref-find-definitions) ;; I know it's default, but I wanted to have it for explicitness.
        (map! :map eglot-mode-map :n (kbd "gr") 'xref-find-references)
        (map! :map eglot-mode-map :n (kbd "gi") 'eglot-find-implementation)
        )
#+end_src
** Very large files
#+begin_src emacs-lisp :tangle packages.el
(package! vlf
  :recipe (:host github :repo "m00natic/vlfi" :files ("*.el"))
  :pin "cc02f2533782d6b9b628cec7e2dcf25b2d05a27c")
#+end_src
#+begin_src emacs-lisp
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+end_src
** Projectile
*** Indexing method
defines how projectile should index project names and files.
#+begin_src emacs-lisp
(setq projectile-indexing-method 'alien)
#+end_src
*** Caching
Disables caching to always see updated files list.
#+begin_src emacs-lisp
(setq projectile-enable-caching nil)
#+end_src
