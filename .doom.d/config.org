* My DOOM Emacs Configuration
This is my DOOM Emacs configuration file, I also have a vanilla Emacs configuration but I have moved into DOOM for it's large community and support
** Use lexical bindings
#+begin_src elisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src
** Personal information
#+begin_src emacs-lisp
(setq user-full-name "Amirreza Askarpour"
      user-mail-address "raskarpour@gmail.com")
#+end_src
** Theme
#+begin_src elisp
(setq doom-theme 'doom-moonlight)
#+end_src
** Font
#+begin_src elisp
(setq doom-font "JetBrainsMono Nerd Font Mono-14")
#+end_src
** Map ; to :
for ease of use I map ; to : for simpler evil commands.
#+begin_src emacs-lisp
(map! :n ";" 'evil-ex)
#+end_src
** Workspaces
Workspaces like i3, each workspace has it's own windows and buffers, mostly I have one Emacs open and multiple workspaces for each project.
#+begin_src elisp
(map! :leader :map global-map "w s" #'persp-switch)
#+end_src
** Org
I don't do a lot of configuration for org, most important ones are "SPC m b" which inserts a code block
and "SPC m n" which inserts a no tangle block.
#+begin_src elisp
(use-package! org
        :config
        (map! :leader :n :map org-mode-map "m b" 'amirreza/--org-insert-elisp-code-block)
        (map! :leader :n :map org-mode-map "m n" 'amirreza/--org-insert-no-tangle)
        (defun amirreza/--org-insert-elisp-code-block ()
                (interactive)
                (insert (format "#+begin_src emacs-lisp\n\n#+end_src"))
                (previous-line)
                (beginning-of-line))

        (defun amirreza/--org-insert-no-tangle ()
                ""
                (interactive)
                (insert (format ":PROPERTIES:\n:header-args: :tangle no\n:END:\n"))
                (previous-line)
                (beginning-of-line))

        (setq org-src-fontify-natively t)
        (setq org-src-tab-acts-natively t)
        (setq org-support-shift-select t)
        (setq org-src-window-setup 'current-window)
        (setq org-startup-folded t)
        )
#+end_src
** LSP
LSP configurations in DOOM is almost complete I just need some simpler keybindings for most used operations
#+begin_src emacs-lisp
(after! eglot
        (map! :map eglot-mode-map :n (kbd "gd") 'xref-find-definitions) ;; I know it's default, but I wanted to have it for explicitness.
        (map! :map eglot-mode-map :n (kbd "gr") 'xref-find-references)
        (map! :map eglot-mode-map :n (kbd "gi") 'eglot-find-implementation)
        )
#+end_src
** Very large files
#+begin_src emacs-lisp :tangle packages.el
(package! vlf
  :recipe (:host github :repo "m00natic/vlfi" :files ("*.el"))
  :pin "cc02f2533782d6b9b628cec7e2dcf25b2d05a27c")
#+end_src
#+begin_src emacs-lisp
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+end_src
** String style conversion
#+begin_src emacs-lisp :tangle packages.el
(package! string-inflection
  :pin "c4a519be102cb99dd86be3ee8c387f008d097635")
#+end_src
#+begin_src emacs-lisp
(use-package! string-inflection
  :commands (string-inflection-all-cycle
             string-inflection-toggle
             string-inflection-camelcase
             string-inflection-lower-camelcase
             string-inflection-kebab-case
             string-inflection-underscore
             string-inflection-capital-underscore
             string-inflection-upcase)
  :init
  (map! :leader :prefix ("c~" . "naming convention")
        :desc "cycle" "~" #'string-inflection-all-cycle
        :desc "toggle" "t" #'string-inflection-toggle
        :desc "CamelCase" "c" #'string-inflection-camelcase
        :desc "downCase" "d" #'string-inflection-lower-camelcase
        :desc "kebab-case" "k" #'string-inflection-kebab-case
        :desc "under_score" "_" #'string-inflection-underscore
        :desc "Upper_Score" "u" #'string-inflection-capital-underscore
        :desc "UP_CASE" "U" #'string-inflection-upcase)
  (after! evil
    (evil-define-operator evil-operator-string-inflection (beg end _type)
      "Define a new evil operator that cycles symbol casing."
      :move-point nil
      (interactive "<R>")
      (string-inflection-all-cycle)
      (setq evil-repeat-info '([?g ?~])))
    (define-key evil-normal-state-map (kbd "g~") 'evil-operator-string-inflection)))
#+end_src

** Projectile
*** Indexing method
defines how projectile should index project names and files.
#+begin_src emacs-lisp
(setq projectile-indexing-method 'alien)
#+end_src
*** Caching
Disables caching to always see updated files list.
#+begin_src emacs-lisp
(setq projectile-enable-caching nil)
#+end_src

**
