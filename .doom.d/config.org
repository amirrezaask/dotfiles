* My DOOM Emacs Configuration
This is my DOOM Emacs configuration file, I also have a vanilla Emacs configuration but I have moved into DOOM for it's large community and support
** Use lexical bindings
#+begin_src elisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src
** Theme
#+begin_src elisp
(setq doom-theme 'doom-moonlight)
#+end_src
** Font
#+begin_src elisp
(setq doom-font "JetBrainsMono Nerd Font Mono-14")
#+end_src
** Workspaces
Workspaces like i3, each workspace has it's own windows and buffers, mostly I have one Emacs open and multiple workspaces for each project.
#+begin_src elisp
(map! :leader :map global-map "w s" #'persp-switch)
#+end_src

** Org
#+begin_src elisp
(use-package! org
  :init
  (map! :leader :n :map org-mode-map "m b" 'amirreza/--org-insert-elisp-code-block)
  (map! :leader :n :map org-mode-map "m n" 'amirreza/--org-insert-no-tangle)
  :config
    (defun amirreza/--org-insert-elisp-code-block ()
          (interactive)
          (insert (format "#+begin_src emacs-lisp\n\n#+end_src"))
          (previous-line)
          (beginning-of-line))

      (defun amirreza/--org-insert-no-tangle ()
          ""
          (interactive)
          (insert (format ":PROPERTIES:\n:header-args: :tangle no\n:END:\n"))
          (previous-line)
          (beginning-of-line))

      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-support-shift-select t)
      (setq org-src-window-setup 'current-window)
      (setq org-startup-folded t)
  )
#+end_src
** LSP
#+begin_src emacs-lisp
(map! :map lsp-mode-map :n (kbd "gr") 'xref-find-references)
(map! :map lsp-mode-map :n (kbd "gi") 'lsp-find-implementation)
#+end_src

** Very large files
#+begin_src emacs-lisp
(package! screenshot
  :recipe (:host github :repo "tecosaur/screenshot")
  :pin "41b92a2a885d517fc14626dd0e666ae9ca20e529")
#+end_src


** String style conversion
#+begin_src emacs-lisp
(package! string-inflection
  :pin "c4a519be102cb99dd86be3ee8c387f008d097635")

(use-package! string-inflection
  :commands (string-inflection-all-cycle
             string-inflection-toggle
             string-inflection-camelcase
             string-inflection-lower-camelcase
             string-inflection-kebab-case
             string-inflection-underscore
             string-inflection-capital-underscore
             string-inflection-upcase)
  :init
  (map! :leader :prefix ("c~" . "naming convention")
        :desc "cycle" "~" #'string-inflection-all-cycle
        :desc "toggle" "t" #'string-inflection-toggle
        :desc "CamelCase" "c" #'string-inflection-camelcase
        :desc "downCase" "d" #'string-inflection-lower-camelcase
        :desc "kebab-case" "k" #'string-inflection-kebab-case
        :desc "under_score" "_" #'string-inflection-underscore
        :desc "Upper_Score" "u" #'string-inflection-capital-underscore
        :desc "UP_CASE" "U" #'string-inflection-upcase)
  (after! evil
    (evil-define-operator evil-operator-string-inflection (beg end _type)
      "Define a new evil operator that cycles symbol casing."
      :move-point nil
      (interactive "<R>")
      (string-inflection-all-cycle)
      (setq evil-repeat-info '([?g ?~])))
    (define-key evil-normal-state-map (kbd "g~") 'evil-operator-string-inflection)))
#+end_src
