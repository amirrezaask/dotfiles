{
    /*
        Change this to `false` if you don't wish to be prompted when
        discarding files.
     */
    "prompt_before_destructive_action": true,

    /*
        Uncomment the setting below to explicitly set which git binary
        to use.  An empty string will search PATH for "git".  The setting may
        be a direct string to a git binary, e.g.:

            "git_path": "/usr/bin/git",

        Or it may be a dictionary keyed off what sublime.platform() returns,
        so it may be customized on a per-platform basis.  e.g.:

            "git_path": {
                "default": "",
                "windows": "C:/Program Files/Git/cmd/git.exe"
            },
     */
    "git_path": "",

    /*
        Set custom environment variables for git command execution.
        Expanding by environment variables and project variables also works. e.g.:
        "PATH": "${project_path}/venv/bin:${PATH}"
    */
    "env": {
    },

    /*
        Change this to `true` when doing dev work on GitSavvy.
     */
    "dev_mode": false,

    /*
        Enter your github API key in the field below.  To interact with
        a GitHub Enterprise instance, add a field with the FQDN as the key
        and the API key as the value.
     */
    "api_tokens": {
        // "github.com": "ADD YOUR GITHUB TOKEN HERE"
        // "gitlab.com": "ADD YOUR GITLAB TOKEN HERE"
    },

    /*
        Only supported on GitHub.
        When creating a fork, do only copy the main branch.  Especially do
        *not* copy the tags from the original repo to your repo.
        Instead of changing the default, you can also add a command, for
        example to your `User.sublime-commands` file, e.g.:
            {
                "caption": "git: create fork (non-sparse)",
                "command": "gs_github_create_fork",
                "args": { "default_branch_only": false}
            },

        See: https://github.blog/changelog/2022-07-27-you-can-now-fork-a-repo-and-copy-only-the-default-branch/
    */
    "sparse_fork": true,

    /*
    maximum number of items per page when requesting from github
    */
    "github_per_page_max" : 100,

    /*
    maximum number of items per page when requesting from gitlab
    */
    "gitlab_per_page_max" : 100,

    /*
        Change this to "full" to display a full diff for the current commit
        when writing a commit message.

        Change this to "stat" to display a diff stat for the current commit
        when writing a commit message.

        Change this to `false` to disable.
     */
    "show_commit_diff": "full",

    /*
        Change this to `false` to not scroll to the first hunk automatically when
        you open the inline-diff view from the status dashboard.
     */
    "inline_diff_auto_scroll": true,

    "colors": {
        "log_graph": {
            "commit_dot_foreground": "#9911",
            "commit_dot_background": "#991",
            "path_foreground": "#991",
            "path_background": "#99991109",
            "commit_dot_above_foreground": "#f91d",
            "commit_dot_above_background": "#99991109",
            "path_above_foreground": "#19d",
            "path_above_background": "#99991109",
            "matching_commit_foreground": "#1991",
            "matching_commit_background": "#199"
        }
    },

    /*
        Change this to `true` when you would like inline diff to
        ignore EOL whitespace changes.
        See details in https://github.com/timbrel/GitSavvy/issues/177
     */
    "inline_diff_ignore_eol_whitespaces": false,

    /*
        Add entries to this array (e.g. "pull" or "push") if you'd like the
        output of these Git commands to always be shown in a panel.
     */
    "show_panel_for": [],

    /*
        https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines
        Add a distinct style guide for the commit messages:

        First line should be max 50 characters
        Second line should be empty
        Any subsequent lines should be max 80 characters

        It will use 'invalid.deprecated.line-too-long.git-commit' scope by default.
        The warning is will be outlined instead of fully marked
    */
    "pedantic_commit": true,
    "pedantic_commit_ruler": true,
    "pedantic_commit_first_line_length": 50,
    "pedantic_commit_message_line_length": 72,
    "pedantic_commit_warning_length": 20,

    /*
        Change this to `false` to suppress Git status in ST3 status bar.
     */
    "git_status_in_status_bar": true,

    /*
        When entering a tag message, this will be used if the message is empty.
        The replacement value "{tag_name}" is optional, but recommended.
     */
    "default_tag_message": "Tag {tag_name}",

    /*
        Ask for a tag message to annotate the tag only if the tag looks like
        a version, e.g. "v2.31.2" or "2022.11.23".  All other tags are considered
        private and don't need to get annotated as we never push them.
        Set to `false` if you always want to get asked for a tag message.
     */
    "only_ask_to_annotate_versions": true,

    /*
        The filename for extra customized info to be displayed after the default
        COMMIT_HELP_TEXT, such as commit message rules/tips/conventions.
        Place this file at the root of the repo, and it should be committed to the
        repo as well.
        The file name defaults to `.commit_help`.
        If this file is not presented, the functionality is totally ignored.
     */
    "commit_help_extra_file": ".commit_help",

    /*
        For each command specified, always include the command line flags
        indicated in the global_flags option AFTER the command.
     */
    "global_flags": {
        // --no-columns is not supported in Git versions <1.7.11.  If Git is configured
        //   to use columns globally, --no-columns should be added here.
        // "branch": ["--no-columns"]
        //
        // or, configure a GPG key to sign commits with a given key
        // "commit": ["-S", "--gpg-sign=<key-id>"]
    },

    /*
        For each command specified, always include the command line flags
        indicated in the global_flags option BEFORE the command.
     */
    "global_pre_flags": {
        // for example, override settings via the "-c" option, e.g
        // the following configures a gpg.program no-tty wrapper script
        // "commit": ["-c", "gpg.program=./scripts/stgpg.sh"]
        // and configure every commit to be signed with your key
        // "commit": ["-c", "commit.gpgsign=true"]
    },

    /*
        Sort branches by recency.
        Change this to `true` to sort branches by "committerdate".
        Change this to `false` to sort branches by their name.
     */
    "sort_by_recent_in_branch_dashboard": false,

    /*
        Group branches by their distance to HEAD.  Requires git 2.41.0.
    */
    "group_by_distance_to_head_in_branch_dashboard": true,

    /*
        Set this to `true` to display remotes in the branch dashboard by default.
     */
    "show_remotes_in_branch_dashboard": false,

    /*
        Set this to `true` to display remotes in the tags dashboard by default.
     */
    "show_remotes_in_tags_dashboard": false,

    /*
        Limit the number of tags listed in the tags dashboard.
    */
    "max_items_in_tags_dashboard": null,

    /*
        When set to `true`, GitSavvy will automatically display more info about the
        current commit in a output panel.
     */
    "log_show_more_commit_info": true,

    /*
        Diffstat look like
        core/commands/blame.py     | 13 +++++--------
        core/commands/log.py       |  9 +++------
        core/git_mixins/history.py |  8 ++------
        3 files changed, 10 insertions(+), 20 deletions(-)

        Set to `false` if don't want to show this when view a commit or diff.
     */
    "show_diffstat": true,


    /*
        When set to `true`, GitSavvy will automatically display more info about the
        current commit in an output panel.  When set to `false`, this function must
        be invoked manually.
     */
    "graph_show_more_commit_info": true,


    /*
        When set to `true,`, GitSavvy will display the full diff of the current
        commit in the output panel.
    */
    "show_full_commit_info": true,

    /*
        When set to `true`, GitSavvy will follow file renames when running git log/graph
    */
    "log_follow_rename": false,

    /*
        When set to `true`, GitSavvy will follow file renames in blame view
    */
    "blame_follow_rename": false,

    /*
        Set it to "file", "commit" or "all_commits" to specify the default detection
        method for the blame view.
    */

    "blame_detect_move_or_copy_within": "file",

    /*
        When set to `true`, GitSavvy will prompt for confirmation when closing
        the commit message view. Ignored when "commit_on_close" is true.
    */
    "prompt_on_abort_commit": true,

    /*
        When set to `true`, GitSavvy will display git-flow integration commands.
    */
    "show_git_flow_commands": false,

    /*
        The default base for the rebase dashboard.
    */
    "rebase_default_base_ref": "",

    /*
        When set to `true`, rebase dashboard uses preserve-merges mode when opened.
    */
    "rebase_preserve_merges": false,

    /*
        When set to `true`, GitSavvy will prompt for confirmation before actually
        performing a `git push --force` operation.
     */
    "confirm_force_push": true,

    /*
        When set to `true`, closing the commit message window via keyboard will result
        in a commit action being taken, except in cases where the message is empty.
        The same is also true for amending commits.
     */
    "commit_on_close": false,

    /*
        This encoding will be used whenever Git's output cannot be correctly parsed
        as UTF-8.  Modify this value if you regularly with files and Git history
        with a different text encoding.

        Example:
            "fallback_encoding": "gbk"
     */
    "fallback_encoding": "windows-1252",

    /*
        This setting should only be set to true in the following conditions:

          - you have installed the "Codecs33" package from Package Control
          - you are running Linux or OS X
          - you would like to use non-supported codecs like "gbk" for the
            `fallback_encoding` value
     */
    "load_additional_codecs": false,

    /*
        GitSavvy allows you to press `Tab` to cycle from one dashboard interface
        to the next.  This setting defines the order of that cycle.  The following
        are valid entries, and can be included in your preferred order:

            status
            branch
            rebase
            tags
            graph

     */
    "tab_order": [
        "status",
        "branch",
        "tags",
        "graph"
    ],

    /*
        Set this value to a valid git reset mode (e.g. --hard, --soft) to use
        it as the preselected default.
     */
    "use_reset_mode": "--mixed",

    /*
        When set to `true`, you can navigate the dashboards by using arrow keys.
     */
    "arrow_keys_navigation": false,

    /*
        When set to `true`, GitSavvy will become Vintagoues friendly.
        You might need to restart Sublime in order to get this working.
     */
    "vintageous_friendly": false,

    /*
        When set to `true`, all views will start in INSERT mode.
        Ignored if `vintageous_friendly` is `false`.
     */
    "vintageous_enter_insert_mode": false,

    /*
        When set to `true`, all views will hide their help menu when rendering.
        You can still toggle the help menu by pressing `?`.
     */
    "hide_help_menu": false,

    /*
        When set to `true`, no views will receive the prompt asking to initialize
        Git in the current view's directory when not found.
     */
    "disable_git_init_prompt": false,

    /*
        Disable adding any entries to the context menu available when right-clicking
        in any view.
    */
    "disable_context_menus": false
}
