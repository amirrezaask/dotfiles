* AmirrezaAsk Emacs Configuration
** Top Level User Settings
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Amirreza Askarpour")
  (setq user-email "raskarpour@gmail.com")
  (setq amirreza/font "FiraCode Nerd Font Mono")
  (setq amirreza/font-size "21")
  (setq amirreza/theme 'doom-one)
#+END_SRC
** Increase GC threshold
Emacs has an internal garbage collector with a similar role of other programming languages garbage collector. It also acts similar,
it would pause execution, basically stopping emacs for short time, sweep all memory owned by emacs process and find elisp objects that are not used anymore and free the memory owned by these objects.
This process of pausing emacs and sweeping happens when memory used by emacs has reached to a threshold, so when that threshold is too low, these pauses happen more frequently which means that more pauses
and less responsive experience, so what we are going to do at first is to increase this GC threshold to make pauses happen less frequently.
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 100 1024 1024))
#+END_SRC
** Increase subprocess read output maximum
Many packages like LSP clients will try and spawn a subprocess to do some work, Emacs should read from those processes output and process the result, increasing maximum read means less sys calls to read from
subprocess output and basically more speed.
#+BEGIN_SRC emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+END_SRC
** Setup =straight.el= package manager
#+BEGIN_SRC emacs-lisp
        (setq package-enable-at-startup nil)
      (defvar bootstrap-version)
      (let ((bootstrap-file
	     (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	    (bootstrap-version 6))
	(unless (file-exists-p bootstrap-file)
	  (with-current-buffer
	      (url-retrieve-synchronously
	       "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	       'silent 'inhibit-cookies)
	    (goto-char (point-max))
	    (eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))

      (straight-use-package 'use-package)

      (setq straight-use-package-by-default t)

#+END_SRC
** Edit emacs configuration
True emacs user will modify and tinker emacs configuration every day, so let's have a fast way of doing that.
#+BEGIN_SRC emacs-lisp
  (defun amirreza/edit-emacs ()
    (interactive)
    (find-file (expand-file-name "README.org" user-emacs-directory)))

  (global-set-key (kbd "C-c e c") 'amirreza/edit-emacs)
#+END_SRC
** Disable Emacs lock files
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil) ;; Don't create .# files as lock.
#+END_SRC
** Disable Emacs backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Disable Emacs startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t) ;; No startup splash screen
#+END_SRC 
** Disable Emacs usage of dialog boxes for questions
#+BEGIN_SRC emacs-lisp
  (setq use-dialog-box nil) ;; Do not use UI for questions
#+END_SRC    
** Emacs cursor settings
*** Change shape to a horizontal line (bar)
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC
*** Turn off blinking cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC
* Magic
#+BEGIN_SRC emacs-lisp
      (use-package emacs
	:config
	(tool-bar-mode 0) ;; disable top toolbar
	(scroll-bar-mode 0) ;; disable scroll bar
	(menu-bar-mode -1) ;; Disable menu bar

	(delete-selection-mode 1) ;; When a region of text is selected and then something is typed remove text and replace with what has been typed.
	(show-paren-mode 1) ;; Highlight matching parens
	(setq show-paren-delay 0) ;; highlight matching parens instantly.
	(setq display-line-numbers-type 'relative) ;; relative line numbers
	(global-display-line-numbers-mode 1) ;; enable line numbers globaly
	(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
	(global-hl-line-mode)
	(defalias 'yes-or-no-p 'y-or-n-p)
      )


      ;; Orderless completion matching algorithm
      (use-package orderless
	:init
	(setq completion-styles '(orderless basic)
	      completion-category-defaults nil
	      completion-category-overrides '((file (styles partial-completion)))))


      ;; Buffer management UI
      (use-package bufler
	:bind
	("C-x C-b" . bufler))

      ;; Better window management facilities
      (use-package ace-window
	:bind
	("C-x o" . ace-window))

      ;; Font settings
      (defun amirreza/home-monitor ()
	(interactive)
	(setq amirreza/font-size "23")
	(set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

	;; My font setup for my laptop setup
      (defun amirreza/laptop ()
	(interactive)
	(setq amirreza/font-size "15")
	(set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

	;; Reload font settings
      (defun amirreza/reload-font ()
	(interactive)
	(set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

      (amirreza/reload-font)

      ;; Themes
      (use-package ef-themes)
      (use-package doom-themes)

      (setq amirreza/--current-theme nil)

      (defun amirreza/switch-theme ()
	(interactive)
	(let ((theme (intern (completing-read "Theme: " (mapcar #'symbol-name
								(custom-available-themes))))))
	  (amirreza/load-theme theme)))

      (defun amirreza/load-theme (theme)
	(when (not (eq amirreza/--current-theme nil))
	  (disable-theme amirreza/--current-theme))
	(setq amirreza/--current-theme theme)
	(load-theme amirreza/--current-theme t))

      (amirreza/load-theme amirreza/theme)

      ;; Minibuffer completion
      (use-package vertico
	:init
	(setq completion-cycle-threshold 3)
	(setq tab-always-indent 'complete)
	(vertico-mode)
	(setq vertico-count 20)
	(setq vertico-cycle t))


      (use-package savehist
	:init
	(savehist-mode))

      (use-package consult
	:bind
	(("C-c g" . consult-ripgrep)))

      (use-package marginalia
	:init
	(marginalia-mode))

      ;; In buffer auto complete menu
      (use-package company
	:init
	(setq company-backends '(company-capf))
	(global-company-mode))

      ;; Dired, Emacs file manager
      (use-package dired
	:straight nil
	:hook (dired-mode . (lambda () (define-key dired-mode-map (kbd "C-c C-e") 'wdired-change-to-wdired-mode))))

      (use-package project :straight nil)

      ;; best movement ever ?
      (defun amirreza/up-center ()
	(interactive)
	(previous-line 20)
	(recenter-top-bottom))

      (defun amirreza/down-center ()
	(interactive)
	(next-line 20)
	(recenter-top-bottom))

      ;; Best movement ever ?????
      (setq recenter-positions '(middle))
      (global-set-key (kbd "M-p") (lambda () (interactive) (amirreza/up-center)))
      (global-set-key (kbd "M-n") (lambda () (interactive) (amirreza/down-center)))

      (use-package magit
	:bind
	(("C-x g" . magit)))

      (use-package apache-mode)
      (use-package vterm)
      (use-package systemd)
      (use-package nginx-mode)
      (use-package docker-compose-mode)
      (use-package dockerfile-mode)
      (use-package markdown-mode)

      (use-package exec-path-from-shell
	:config
	(exec-path-from-shell-initialize))

      (add-to-list 'exec-path (expand-file-name "bin" user-emacs-directory))

      (use-package go-mode)
      (use-package rust-mode)
      (use-package zig-mode)

      (use-package eglot
	:init
	(setq eldoc-echo-area-use-multiline-p nil)
	(setq eldoc-echo-area-display-truncation-message nil)
	(setq eldoc-echo-area-prefer-doc-buffer nil)

	(global-eldoc-mode)

	(defun amirreza/eglot-hook ()
	  (eglot-ensure)
	  (put 'eglot-note 'flymake-overlay-control nil)
	  (put 'eglot-warning 'flymake-overlay-control nil)
	  (put 'eglot-error 'flymake-overlay-control nil)

	  (define-key eglot-mode-map (kbd "C-c d") 'eldoc)
	  (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
	  (define-key eglot-mode-map (kbd "M-r") 'xref-find-references)
	  (define-key eglot-mode-map (kbd "C-c f") 'eglot-format)
	  (define-key eglot-mode-map (kbd "C-c c") 'eglot-code-actions))

	:hook
	((go-mode rust-mode python-mode php-mode) . amirreza/eglot-hook))

      (use-package smartparens :hook prog-mode)

      (use-package org :straight nil
	:config
	(setq org-src-window-setup 'current-window)
	)

      (use-package rainbow-delimiters :hook prog-mode)

      (use-package org-bullets :hook org-mode)

      (use-package git-gutter
	:init
	(global-git-gutter-mode))

      (use-package prescient)

      (use-package vertico-prescient
	:init
	(vertico-prescient-mode))

      (use-package company-prescient
	:init
	(company-prescient-mode))

      (use-package helpful
	:bind
	(("C-h k" . helpful-key)
	 ("C-h f" . helpful-callable)
	 ("C-h v" . helpful-variable)))


      (use-package yaml-mode)
      (use-package csv-mode)
      (use-package json-mode)

      (use-package tree-sitter
	:config
	(global-tree-sitter-mode))

      (use-package tree-sitter-langs)

      (use-package mini-modeline
	:init
	(setq mini-modeline-right-padding (/ (frame-width) 5))
	(setq mini-modeline-echo-duration 0.8)
	(setq mini-modeline-face-attr '(:background "#000000"))

	:config
	(setq-default mini-modeline-l-format
		      '("%e"
			mode-line-front-space
			mode-line-mule-info
			mode-line-client
			mode-line-modified
			mode-line-remote
			mode-line-frame-identification
			mode-line-buffer-identification
			" "
			mode-line-position
			)
		      )

	(setq-default mini-modeline-r-format
		      '("%e"
			mode-line-modes
			))
	(mini-modeline-mode t))

      (use-package perspective
	:config
	(persp-mode 1)
	:bind
	("C-c w s" . persp-switch))
#+END_SRC
