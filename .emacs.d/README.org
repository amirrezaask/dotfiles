* Emacs configuration
They call it kitchen sink
but I call it ICE ( =[I]= ntegrated =[C]= omputing =[E]= nvironment )
** How to install ?
It's a fairly simple thing to do
#+BEGIN_SRC sh
  git clone https://github.com/amirrezaask/dotfiles.git amirreza-dotfiles
  # remember to backup your own emacs.d directory
  cp -r amirreza-dotfiles ~/.emacs.d
  # launch emacs and let it install all packages.
#+END_SRC
** Personal Customization Variable
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Amirreza Askarpour")
  (setq user-email "raskarpour@gmail.com")
  ;; (setq amirreza/font "FiraCode Nerd Font Mono")
  (setq amirreza/font "JetBrainsMono Nerd Font Mono")
  (setq amirreza/font-size "21")
  (setq amirreza/theme 'ef-dark)
#+END_SRC
** Early-init
From emacs 27 I think they added a file called =early-init.el= which will get sourced
before UI stuff happens in Emacs, so it's a good place to turn of UI things.
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil) ;; Disable default package manager package.el
(tool-bar-mode 0) ;; disable top toolbar
(scroll-bar-mode 0) ;; disable scroll bar
(menu-bar-mode -1) ;; Disable menu bar
(setq gc-cons-threshold (* 100 1024 1024))
(setq read-process-output-max (* 1024 1024))
#+END_SRC
** Straight.el 
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
** Some basic macros
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  (defmacro elpa-package
      (package &rest body)
    "Check if PACKAGE is installed and evaluate BODY."
    `(progn
       (straight-use-package (quote ,package))
       (progn ,@body)
       ))

  (defmacro emacs-package
      (package &rest body)
    "Nothing fancy, just evaluate BODY, mostly for organization"
    `(progn
       ,@body))

  ;; For keybindings I use general.el which provides a really
  ;; useful macro `general-def`
  (elpa-package general)

#+END_SRC
** Edit Emacs configuration
#+BEGIN_SRC emacs-lisp
    (defun amirreza/edit-emacs ()
      (interactive)
      (find-file (expand-file-name "README.org" user-emacs-directory)))
#+END_SRC
** Theme and coloring Emacs
#+BEGIN_SRC emacs-lisp
  (elpa-package all-the-icons)
  (elpa-package ef-themes)
  (elpa-package doom-themes)
  (elpa-package gruber-darker-theme)

  ;; Add custom themes path to themes load path
  (add-to-list 'custom-theme-load-path
	       (expand-file-name "themes" user-emacs-directory))

  (setq amirreza/--current-theme nil)

  (defun amirreza/switch-theme ()
    (interactive)
    (let ((theme (intern (completing-read "Theme: " (mapcar #'symbol-name
							    (custom-available-themes))))))
      (amirreza/load-theme theme)))

  (defun amirreza/load-theme (theme)
    (when (not (eq amirreza/--current-theme nil))
      (disable-theme amirreza/--current-theme))
    (setq amirreza/--current-theme theme)
    (load-theme amirreza/--current-theme t))

  (amirreza/load-theme amirreza/theme)

#+END_SRC
** Font stuff
#+BEGIN_SRC emacs-lisp
;; Font settings
(defun amirreza/home-monitor ()
  (interactive)
  (setq amirreza/font-size "23")
  (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

;; My font setup for my laptop setup
(defun amirreza/laptop ()
  (interactive)
  (setq amirreza/font-size "15")
  (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

;; Reload font settings
(defun amirreza/reload-font ()
  (interactive)
  (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

(amirreza/reload-font)

#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (emacs-package modeline
		 (setq-default mode-line-format
			       '("%e" mode-line-front-space
				(:propertize
				 ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
				 display
				 (min-width
				  (5.0)))
				mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position
				(vc-mode vc-mode)
				"  " mode-line-misc-info mode-line-end-spaces)
			       )
		 )
#+END_SRC
** Emacs internal configurations
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 100 1024 1024))

  ;; Many packages like LSP clients will try and spawn a subprocess to do some work, Emacs should read from those processes output and process the result, increasing maximum read means less sys calls to read from, subprocess output and basically more speed.
  (setq read-process-output-max (* 1024 1024))

  (setq create-lockfiles nil) ;; Don't create .# files as lock.

  (setq make-backup-files nil) ;; Disable backup files ~file
  (setq auto-save-default nil) ;; Disable auto save files
  (setq inhibit-startup-screen t) ;; No startup splash screen
  (setq use-dialog-box nil) ;; Do not use UI for questions
  (setq ring-bell-function 'ignore) ;; Do not beep please.

  (tool-bar-mode 0) ;; disable top toolbar
  (scroll-bar-mode 0) ;; disable scroll bar
  (menu-bar-mode -1) ;; Disable menu bar

  (setq-default cursor-type 'box) ;; instead of box use a horizontal line.
  (blink-cursor-mode -1) ;; no blinking cursor.


  ;; Copy PATH from default shell
  (elpa-package exec-path-from-shell
		(exec-path-from-shell-initialize))

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (defalias 'yes-or-no-p 'y-or-n-p)


  (defun amirreza/find-file ()
    (interactive)
    (if (vc-backend (buffer-file-name))
	(project-find-file)
      (call-interactively 'find-file)
      ))
  (elpa-package ace-window)
  (elpa-package bufler)
  (elpa-package helpful)
#+END_SRC
** Auto completion
#+BEGIN_SRC emacs-lisp
  (elpa-package (corfu :type git :host github :repo "emacs-straight/corfu" :files ("*" "extensions/*.el" (:exclude ".git")))
		(setq corfu-auto t)
		(global-corfu-mode)
		(corfu-history-mode 1)
		(corfu-echo-mode 1)
		(corfu-popupinfo-mode 1)
		)



  (elpa-package corfu-terminal
		(corfu-terminal-mode)
		)

#+END_SRC
** Editor UX
#+BEGIN_SRC emacs-lisp
    (elpa-package rainbow-delimiters
		  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

    (delete-selection-mode 1) ;; When a region of text is selected and then something is typed remove text and replace with what has been typed.

    (show-paren-mode 1) ;; Highlight matching parens

    (setq show-paren-delay 0) ;; highlight matching parens instantly.

    (setq display-line-numbers-type 'relative) ;; relative line numbers

    (global-display-line-numbers-mode 1) ;; enable line numbers globaly

    (elpa-package expand-region)
    (global-hl-line-mode)

    (defun amirreza/up-center ()
    (interactive)
    (previous-line (/ (window-height) 2))
    (recenter-top-bottom))

  (defun amirreza/down-center ()
    (interactive)
    (next-line (/ (window-height) 2))
    (recenter-top-bottom))

  ;; Best movement ever ?????
  (setq recenter-positions '(middle))
  (global-set-key (kbd "M-p") (lambda () (interactive) (amirreza/up-center)))
  (global-set-key (kbd "M-n") (lambda () (interactive) (amirreza/down-center)))

#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
  (elpa-package eglot
		(require 'eglot)
		(setq eldoc-echo-area-use-multiline-p nil)
		(setq eldoc-echo-area-display-truncation-message nil)
		(setq eldoc-echo-area-prefer-doc-buffer nil)

		(global-eldoc-mode)
		(add-hook 'go-mode-hook 'eglot-ensure)
		(add-hook 'rust-mode-hook 'eglot-ensure)
		(add-hook 'python-mode-hook 'eglot-ensure)
		(add-hook 'php-mode-hook 'eglot-ensure))
  (elpa-package consult-eglot)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (elpa-package git-gutter
    (global-git-gutter-mode))

  (elpa-package magit)

#+END_SRC
** Languages
#+BEGIN_SRC emacs-lisp
(elpa-package apache-mode)
(elpa-package vterm)
(elpa-package systemd)
(elpa-package nginx-mode)

(elpa-package docker-compose-mode)
(elpa-package dockerfile-mode)

(elpa-package markdown-mode)

;; Golang
(elpa-package go-mode)
(elpa-package go-tag)

(elpa-package rust-mode)

(elpa-package zig-mode)

(elpa-package yaml-mode)
(elpa-package csv-mode)
(elpa-package json-mode)

;; clojure support
(elpa-package clojure-mode)
(elpa-package cider)
#+END_SRC

** Minibuffer
#+BEGIN_SRC emacs-lisp
  (elpa-package (vertico
		 :type git
		 :host github
		 :repo "emacs-straight/vertico"
		 :files ("*" "extensions/*.el" (:exclude ".git")))
		(setq completion-cycle-threshold 3)
		(setq tab-always-indent 'complete)
		(vertico-mode)
		(setq vertico-count 15)
		(setq vertico-cycle t))


  (elpa-package savehist
		(savehist-mode))

  (elpa-package consult
		(setq consult-async-min-input 1))

  (elpa-package marginalia
		(marginalia-mode))

  (elpa-package orderless
		(setq completion-styles '(orderless basic)
		      completion-category-defaults nil
		      completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
  (emacs-package org
		 (defun amirreza/org-code-block ()
		   (interactive)
		   (insert (format "#+BEGIN_SRC %s\n\n#+END_SRC"
				   (completing-read "Language: "
						    '("emacs-lisp"
						      "go"
						      "rust"
						      "python"
						      "lua"
						      "bash"
						      "sh"
						      "fish"
						      "java"
						      )))))

		 (defun amirreza/org-disable-tangle ()
		   (interactive)
		   (insert ":PROPERTIES:
  :header-args:    :tangle no
  :END:"
		   ))
		 (setq org-use-property-inheritance t)
		 (setq org-src-window-setup 'current-window))

  (elpa-package org-bullets
		(add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC
** Psychic like completion
#+BEGIN_SRC emacs-lisp
    (elpa-package prescient)

    (elpa-package vertico-prescient
      (vertico-prescient-mode))

    (elpa-package corfu-prescient
      (corfu-prescient-mode))
#+END_SRC
** Project management
#+BEGIN_SRC emacs-lisp
  (emacs-package project)
#+END_SRC
** Treesitter, get rid of regex
#+BEGIN_SRC emacs-lisp
(elpa-package tree-sitter
  (global-tree-sitter-mode))

(elpa-package tree-sitter-langs)
#+END_SRC
** Never loose a good setup
#+BEGIN_SRC emacs-lisp
  (elpa-package perspective
		(setq persp-state-default-file (expand-file-name "sessions" user-emacs-directory))
		(setq persp-mode-prefix-key (kbd "C-c w"))
		(defun amirreza/save-session ()
		  (interactive)
		  (persp-state-save persp-state-default-file))
		(defun amirreza/load-session ()
		  (interactive)
		  (persp-state-load persp-state-default-file))
		(persp-mode 1)
		(add-hook 'kill-emacs-hook 'amirreza/save-session))

#+END_SRC
** Shitty apple computers
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'super) ;; set command key to super
(setq mac-option-modifier 'meta) ;; option key as meta
#+END_SRC
** Which Key
#+BEGIN_SRC emacs-lisp
  (elpa-package which-key
		(which-key-mode +1))
#+END_SRC
** Keybindings
*** Edit Emacs Configuration
#+BEGIN_SRC emacs-lisp
(general-def :keymaps 'override "C-c e e" 'amirreza/edit-emacs)
#+END_SRC
*** Switch theme
#+BEGIN_SRC emacs-lisp
(general-def :keymaps 'override "C-c t t" 'amirreza/switch-theme)
#+END_SRC
*** Window management using ace-window
#+BEGIN_SRC emacs-lisp
(general-def :keymaps 'override "C-x o" 'ace-window)
#+END_SRC
*** Buffer management using bufler
#+BEGIN_SRC emacs-lisp
(general-def :keymaps 'override "C-x C-b" 'bufler)
#+END_SRC
*** Perspective workspaces
#+BEGIN_SRC emacs-lisp
(general-def :prefix "C-c w" :keymaps 'override "s" 'persp-switch)
#+END_SRC
*** Editor related keybindings
#+BEGIN_SRC emacs-lisp
  (general-def :keymaps 'override
    "C-=" 'er/expand-region
    "C--" 'er/contract-region
    "M-SPC" 'set-mark-command)
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
(general-def :prefix "C-x" :keymaps 'override "g" 'magit)
#+END_SRC
*** GOlang
#+BEGIN_SRC emacs-lisp
  (general-def :keymaps 'go-mode-map
    :prefix "C-c m"
    "a" 'go-tag-add
    )
#+END_SRC
*** Dired
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "C-c"
    :keymaps 'dired-mode-map
    "C-e" 'wdired-change-to-wdired-mode)


#+END_SRC
*** Org Mode Related Keymaps
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "C-c m"
    :keymaps 'org-mode-map

    "c b" 'amirreza/org-code-block)
#+END_SRC
*** Helpful instead of default help
#+BEGIN_SRC emacs-lisp
(general-def
    :prefix "C-h"
    :keymaps 'override

    "k" 'helpful-key
    "f" 'helpful-callable
    "v" 'helpful-variable
    )

#+END_SRC
*** Project related keys
#+BEGIN_SRC emacs-lisp
  (general-def
    :keymaps 'override
    :prefix "C-x p"

    "f" 'project-find-file
    "p" 'project-switch-project
    "b" 'project-buffers
    "d" 'project-dired
    "c" 'project-compile
    )
#+END_SRC
*** LSP related keys
#+BEGIN_SRC emacs-lisp
  (general-def
    :keymaps 'eglot-mode-map
    "M-." 'xref-find-definitions
    "M-," 'xref-go-back
    "M-r" 'xref-find-references
    "M-i" 'eglot-find-implementation

    "C-c m r" 'eglot-rename
    "C-c m s" 'consult-eglot-symbols
    )
#+END_SRC
** Evil Mode
:PROPERTIES:
:header-args:    :tangle no
:END:
As you probably know evil mode in Emacs emulates vim modal editing experience.
It's closest thing I have seen to vim in all editors and IDEs, since I constanly switching
between Emacs and Vim style of keybindings I keep this section at the end to easily disable it If
I want.
#+BEGIN_SRC emacs-lisp
  (elpa-package evil
		(setq evil-want-C-u-scroll t)
		(setq evil-want-C-i-jump nil)
		(setq evil-split-window-below t)
		(setq evil-vsplit-window-right t)
		(setq evil-want-integration t)
		(setq evil-want-keybinding nil)
		(evil-mode 1)
		(evil-global-set-key 'normal (kbd "<C-d>") (lambda
							     ()
							     (interactive)
							     (evil-scroll-down)
							     (evil-scroll-line-to-center)
							     ))
		(evil-global-set-key 'normal (kbd "<C-u>") (lambda
							     ()
							     (interactive)
							     (evil-scroll-up)
							     (evil-scroll-line-to-center))))


  (elpa-package evil-escape
		(setq-default evil-escape-key-sequence "jk")
		(setq evil-escape-unordered-key-sequence t)
		(evil-escape-mode))



  (elpa-package evil-collection
		(evil-collection-init))

  (elpa-package evil-nerd-commenter
		(evil-define-key '(normal visual) global-map (kbd "gc") 'evilnc-comment-or-uncomment-lines))

  (elpa-package evil-surround
		(global-evil-surround-mode 1))
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
  ;; Window management stuff
  (general-def
    :states 'normal
    "C-j" 'evil-window-down
    "C-k" 'evil-window-up
    "C-l" 'evil-window-right
    "C-h" 'evil-window-left)


  (general-def
    :prefix "SPC h"
    :states 'normal
    :keymaps 'override

    "k" 'helpful-key
    "f" 'helpful-callable
    "v" 'helpful-variable)

  ;; Buffer management stuff
  (general-def
    :states 'normal
    :keymaps 'override
    :prefix "SPC b"
    "b" 'persp-switch-to-buffer*
    "k" 'kill-buffer
    )

  (general-def
    :prefix "SPC"
    :keymaps 'override
    :states 'normal

    "e e" 'amirreza/edit-emacs)

  (general-def
    :prefix "SPC m"
    :keymaps 'org-mode-map
    :states 'normal

    "c b" 'amirreza/org-code-block)


  ;; File navigation and management stuff
  (general-def
    :states 'normal
    :keymaps 'override
    :prefix "SPC f"

    "f" 'find-file
    "d" 'dired
    )

  (general-def :states 'normal :keymaps 'override "SPC SPC" 'amirreza/find-file)
  (general-def :states 'normal :keymaps 'override "SPC g s" 'magit)
  (general-def :states 'normal :keymaps 'override "SPC x" 'execute-extended-command)

  (general-def
    :states 'normal
    :keymaps 'override
    :prefix "SPC p"

    "p" 'project-switch-project
    "f" 'project-find-file
    "d" 'project-dired
    )
#+END_SRC
**** LSP
#+BEGIN_SRC emacs-lisp
  (general-def
    :states 'normal
    :keymaps 'eglot-mode-map
    "g r" 'xref-find-references
    "g i" 'eglot-find-implementation
    "g d" 'xref-find-definitions
    )
#+END_SRC
