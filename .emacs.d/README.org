#+TITLE: AmirrezaAsk Computation Environment
#+DATE: <2022-12-25 Sun>
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+OPTIONS: toc:nil reveal_title_slide:nil
#+REVEAL_INIT_OPTIONS: slideNumber:false
* How to install ?
It's a fairly simple thing to do
#+BEGIN_SRC sh
  curl https://raw.githubusercontent.com/amirrezaask/dotfiles/master/.emacs.d/README.org > ~/.emacs.d/README.org &&\
      emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "~/.emacs.d/README.org")'
#+END_SRC

* Emacs
They call it kitchen sink
but I call it ICE ( =[I]= ntegrated =[C]= omputing =[E]= nvironment )

** Personal Customization Variable
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Amirreza Askarpour")
  (setq user-email "raskarpour@gmail.com")
  ;; (setq amirreza/font "FiraCode Nerd Font Mono")
  (setq amirreza/font "JetBrainsMono Nerd Font Mono")
  (setq amirreza/font-size "21")
  (setq amirreza/theme 'ef-dark)
  (setq amirreza/default-workspaces '(emacs risma ripo RideAggregator))
  (setq amirreza/transparent t) ;; For terminal only
#+END_SRC
** early-init.el
From emacs 27 I think they added a file called =early-init.el= which will get sourced
before UI stuff happens in Emacs, so it's a good place to turn of UI things.
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil) ;; Disable default package manager package.el
(tool-bar-mode 0) ;; disable top toolbar
(scroll-bar-mode 0) ;; disable scroll bar
(menu-bar-mode -1) ;; Disable menu bar
(setq gc-cons-threshold (* 100 1024 1024))
(setq read-process-output-max (* 1024 1024))
#+END_SRC
** init.el
init.el will just load this file.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (org-babel-load-file (expand-file-name "README.org" user-emacs-directory))
#+END_SRC
** Changing state of the world
As a functional programming enthusiast I think we should isolate side effects and stateful events
from pure things, so in this section I will do the installing of all pacakges that I need and since
I am using =straight.el= I have full control on the version if I want to.
*** Installing [[https://github.com/radian-software/straight.el][straight.el]] itself
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** Now let's install emacs packages I need
#+BEGIN_SRC emacs-lisp
  (setq amirreza/packages
	'(
	  ;; General
	  general
	  ;; Themes and UI stuff
	  all-the-icons
	  ef-themes
	  doom-themes
	  gruber-darker-theme

	  exec-path-from-shell ;; Environments from my default shell

	  ace-window ;; Window management made easy

	  bufler ;; buffer management made easy

	  helpful ;; Better help buffers, more info like keymappings in function help buffers.

	  ;; Autocomplete popup in buffer, we need this as a custom reciepe to have extensions in my `load-path`
	  (corfu :type git :host github :repo "emacs-straight/corfu" :files ("*" "extensions/*.el" (:exclude ".git")))
	  ;; make corfu work in terminal emacs
	  corfu-terminal

	  ;; Centralize your buffer text
	  olivetti

	  ;; Don't need any description right ?
	  rainbow-delimiters

	  ;; select a portion of your buffer and expand or contract semantically
	  expand-region

	  ;; LSP client, in Emacs 29 it's going to be upstreamed in core
	  eglot

	  ;; just this command `consult-eglot-symbols`
	  consult-eglot

	  ;; Show git diff signs in sidebar
	  git-gutter
	  ;; Best git client on the earth
	  magit

	  vterm ;; Modern terminal in Emacs
	  apache-mode ;; Apache config syntax
	  systemd ;; Systemd config syntax
	  nginx-mode ;; Nginx config syntax
	  docker-compose-mode ;; Docker-compose syntax
	  dockerfile-mode ;; Dockerfile syntax
	  markdown-mode ;; Markdown syntax
	  go-mode ;; Golang
	  go-tag ;; Manage Struct tags in Golang
	  rust-mode ;; Rust
	  zig-mode ;; Zig
	  yaml-mode
	  csv-mode 
	  json-mode
	  clojure-mode ;; LISP on JVM
	  cider ;; Clojure repl integrated into Emacs

	  vertico
	  savehist
	  consult
	  marginalia
	  orderless

	  org-bullets
	  org-reveal
	  htmlize

	  prescient
	  vertico-prescient
	  corfu-prescient

	  tree-sitter
	  tree-sitter-langs

	  perspective

	  which-key

	  wgrep
	  rg
	  ))

  (mapc (lambda (pkg-receipe)
	  (straight-use-package pkg-receipe)
	  ) amirreza/packages)
#+END_SRC
*** TBA: Installing LSPs, and other binaries as part of my computing experience
** Edit Emacs configuration
#+BEGIN_SRC emacs-lisp
    (defun amirreza/edit-emacs ()
      (interactive)
      (find-file (expand-file-name "README.org" user-emacs-directory)))
#+END_SRC
** Theme and coloring Emacs
#+BEGIN_SRC emacs-lisp
  ;; Add custom themes path to themes load path
  (add-to-list 'custom-theme-load-path
	       (expand-file-name "themes" user-emacs-directory))

  (setq amirreza/--current-theme nil)

  (defun amirreza/switch-theme ()
    (interactive)
    (let ((theme (intern (completing-read "Theme: " (mapcar #'symbol-name
							    (custom-available-themes))))))
      (amirreza/load-theme theme)))

  (defun amirreza/load-theme (theme)
    (when (not (eq amirreza/--current-theme nil))
      (disable-theme amirreza/--current-theme))
    (setq amirreza/--current-theme theme)
    (load-theme amirreza/--current-theme t)
    (unless (display-graphic-p)
      (when amirreza/transparent
	(set-face-background 'default "0"))))

  (amirreza/load-theme amirreza/theme)
#+END_SRC
** Font stuff
#+BEGIN_SRC emacs-lisp
;; Font settings
(defun amirreza/home-monitor ()
  (interactive)
  (setq amirreza/font-size "23")
  (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

;; My font setup for my laptop setup
(defun amirreza/laptop ()
  (interactive)
  (setq amirreza/font-size "15")
  (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

;; Reload font settings
(defun amirreza/reload-font ()
  (interactive)
  (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

(amirreza/reload-font)

#+END_SRC
** Modeline
I don't do anything fancy just remove minor modes from modeline because I think they are useless really.
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
		'("%e" mode-line-front-space
		  (:propertize
		   ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
		   display
		   (min-width
		    (5.0)))
		  mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position
		  (vc-mode vc-mode)
		  "  " mode-line-misc-info mode-line-end-spaces)
		)

#+END_SRC
** Emacs internal configurations
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 100 1024 1024))

  ;; Many packages like LSP clients will try and spawn a subprocess to do some work, Emacs should read from those processes output and process the result, increasing maximum read means less sys calls to read from, subprocess output and basically more speed.
  (setq read-process-output-max (* 1024 1024))

  (setq create-lockfiles nil) ;; Don't create .# files as lock.

  (setq make-backup-files nil) ;; Disable backup files ~file
  (setq auto-save-default nil) ;; Disable auto save files
  (setq inhibit-startup-screen t) ;; No startup splash screen
  (setq use-dialog-box nil) ;; Do not use UI for questions
  (setq ring-bell-function 'ignore) ;; Do not beep please.

  (tool-bar-mode 0) ;; disable top toolbar
  (scroll-bar-mode 0) ;; disable scroll bar
  (menu-bar-mode -1) ;; Disable menu bar

  (setq-default cursor-type 'box) ;; instead of box use a horizontal line.
  (blink-cursor-mode -1) ;; no blinking cursor.


  ;; Copy PATH from default shell

  (exec-path-from-shell-initialize)

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (defalias 'yes-or-no-p 'y-or-n-p)


  (defun amirreza/find-file ()
    (interactive)
    (if (vc-backend (buffer-file-name))
	(project-find-file)
      (call-interactively 'find-file)
      ))
#+END_SRC
** Auto completion
#+BEGIN_SRC emacs-lisp
  (setq corfu-auto t)
  (global-corfu-mode)
  (corfu-history-mode 1)
  (corfu-echo-mode 1)
  (corfu-popupinfo-mode 1)
  (corfu-terminal-mode)
#+END_SRC
** Editor UX
#+BEGIN_SRC emacs-lisp
  (setq olivetti-body-width 100)

  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

  (delete-selection-mode 1) ;; When a region of text is selected and then something is typed remove text and replace with what has been typed.

  (show-paren-mode 1) ;; Highlight matching parens

  (setq show-paren-delay 0) ;; highlight matching parens instantly.

  (setq display-line-numbers-type 'relative) ;; relative line numbers

  (global-display-line-numbers-mode 1) ;; enable line numbers globaly


  (global-hl-line-mode)

  (defun amirreza/up-center ()
    (interactive)
    (previous-line (/ (window-height) 2))
    (recenter-top-bottom))

  (defun amirreza/down-center ()
    (interactive)
    (next-line (/ (window-height) 2))
    (recenter-top-bottom))

  ;; Best movement ever ?????
  (setq recenter-positions '(middle))
  (global-set-key (kbd "M-p") (lambda () (interactive) (amirreza/up-center)))
  (global-set-key (kbd "M-n") (lambda () (interactive) (amirreza/down-center)))

#+END_SRC
** IDE
*** Eldoc
#+BEGIN_SRC emacs-lisp
  (setq eldoc-echo-area-use-multiline-p nil)
  (setq eldoc-echo-area-display-truncation-message nil)
  (setq eldoc-echo-area-prefer-doc-buffer nil)

  (setq amirreza/--eldoc-window-open 'close)

  (defun amirreza/eldoc-toggle-buffer ()
    "Toggle eldoc buffer."
    (interactive)
    (if (eq 'open amirreza/--eldoc-window-open)
	(progn
	  (message "closing...")
	  (dolist (w (window-list))
	    (when (string-match-p "\\*eldoc.*" (buffer-name (window-buffer w)))
	      (quit-window nil w)
	      ))
	  (setq amirreza/--eldoc-window-open 'close))
      (progn
	(message "opening...")
	(eldoc-doc-buffer t)
	(setq amirreza/--eldoc-window-open 'open))
    ))

  (global-eldoc-mode)

#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook 'eglot-ensure)
  (add-hook 'rust-mode-hook 'eglot-ensure)
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'php-mode-hook 'eglot-ensure)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (global-git-gutter-mode)
#+END_SRC
** Minibuffer
#+BEGIN_SRC emacs-lisp
  (setq completion-cycle-threshold 3)
  (setq tab-always-indent 'complete)
  (vertico-mode)
  (setq vertico-count 15)
  (setq vertico-cycle t)

  (savehist-mode)


  (setq consult-async-min-input 1)


  (marginalia-mode)


  (setq completion-styles '(orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion))))
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp

  (defun amirreza/org-code-block ()
    (interactive)
    (insert (format "#+BEGIN_SRC %s\n\n#+END_SRC"
		    (completing-read "Language: "
				     '("emacs-lisp"
				       "go"
				       "rust"
				       "python"
				       "lua"
				       "bash"
				       "sh"
				       "fish"
				       "java"
				       )))))

  (defun amirreza/org-disable-tangle ()
    (interactive)
    (insert ":PROPERTIES:
  :header-args:    :tangle no
  :END:"
	    ))
  (setq org-use-property-inheritance t)
  (setq org-src-window-setup 'current-window)


  (add-hook 'org-mode-hook #'org-bullets-mode)
#+END_SRC
*** Org-reveal
=org-reveal= will let you create =reveal.js= presentations from Org mode documents.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda ()
	      (require 'ox-reveal))
	    )


#+END_SRC
** Psychic like completion
#+BEGIN_SRC emacs-lisp
  (vertico-prescient-mode)


  (corfu-prescient-mode)
#+END_SRC
** Treesitter, get rid of regex
#+BEGIN_SRC emacs-lisp
  (global-tree-sitter-mode)
#+END_SRC
** Never loose a good setup
#+BEGIN_SRC emacs-lisp

  (setq persp-state-default-file (expand-file-name "sessions" user-emacs-directory))
  (setq persp-mode-prefix-key (kbd "C-c w"))


  (defun amirreza/save-session ()
    (interactive)
    (persp-state-save persp-state-default-file))


  (defun amirreza/load-session ()
    (interactive)
    (persp-state-load persp-state-default-file))


  (persp-mode 1)

  (dolist (w amirreza/default-workspaces)
    (persp-new (symbol-name w)))

  (add-hook 'kill-emacs-hook 'amirreza/save-session)

#+END_SRC
** Shitty apple computers
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'super) ;; set command key to super
(setq mac-option-modifier 'meta) ;; option key as meta
#+END_SRC
** Which Key
#+BEGIN_SRC emacs-lisp
  (which-key-mode +1)
#+END_SRC
** Keybindings
*** Edit Emacs Configuration
#+BEGIN_SRC emacs-lisp
(general-def :keymaps 'override "C-c e e" 'amirreza/edit-emacs)
#+END_SRC
*** Switch theme
#+BEGIN_SRC emacs-lisp
(general-def :keymaps 'override "C-c t t" 'amirreza/switch-theme)
#+END_SRC
*** Window management using ace-window
#+BEGIN_SRC emacs-lisp
(general-def :keymaps 'override "C-x o" 'ace-window)
#+END_SRC
*** Buffer management using bufler
#+BEGIN_SRC emacs-lisp
(general-def :keymaps 'override "C-x C-b" 'bufler)
#+END_SRC
*** Perspective workspaces
#+BEGIN_SRC emacs-lisp
(general-def :prefix "C-c w" :keymaps 'override "s" 'persp-switch)
#+END_SRC
*** Editor related keybindings
#+BEGIN_SRC emacs-lisp
  (general-def :keymaps 'override
    "C-=" 'er/expand-region
    "C--" 'er/contract-region
    "C-q" 'set-mark-command ;; really important key if you use emacs in terminal
    )
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
(general-def :prefix "C-x" :keymaps 'override "g" 'magit)
#+END_SRC
*** Golang
#+BEGIN_SRC emacs-lisp
  (general-def :keymaps 'go-mode-map
    :prefix "C-c m"
    "a" 'go-tag-add ;; Add struct tags
    )
#+END_SRC
*** Dired
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "C-c"
    :keymaps 'dired-mode-map
    "C-e" 'wdired-change-to-wdired-mode)


#+END_SRC
*** Org Mode Related Keymaps
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "C-c m"
    :keymaps 'org-mode-map

    "c b" 'amirreza/org-code-block)
#+END_SRC
*** Helpful instead of default help
#+BEGIN_SRC emacs-lisp
  (general-def
      :prefix "C-h"
      :keymaps 'override

      [remap describe-key] 'helpful-key
      [remap describe-function] 'helpful-callable
      [remap describe-variable] 'helpful-variable
      )

#+END_SRC
*** Project related keys
#+BEGIN_SRC emacs-lisp
  (general-def
    :keymaps 'override
    :prefix "C-x p"

    "f" 'project-find-file
    "p" 'project-switch-project
    "b" 'project-buffers
    "d" 'project-dired
    "c" 'project-compile
    )
#+END_SRC
*** IDE like experience
#+BEGIN_SRC emacs-lisp
  (general-def
    :keymaps 'override
    "C-h ." 'amirreza/eldoc-toggle-buffer ;; Toggle eldoc buffer

    "M-0" 'amirreza/eldoc-toggle-buffer ;; Toggle eldoc buffer

    "C-c m n" 'flymake-goto-next-error ;; Next error
    "C-c m p" 'flymake-goto-prev-error ;; Previous error

    "M-j" 'flymake-goto-next-error ;; Next error
    "M-k" 'flymake-goto-prev-error ;; Previous error

    "M-." 'xref-find-definitions ;; Goto definitions
    "M-," 'xref-go-back ;; hop back where you where before jump
    "M-r" 'xref-find-references ;; Goto references
    )

  (general-def
    :keymaps 'eglot-mode-map
    "M-i" 'eglot-find-implementation
    "C-c m r" 'eglot-rename
    "C-c m s" 'consult-eglot-symbols
    "C-c m f" 'eglot-format
    "C-c m e" 'consult-flymake
    "C-c m i" 'eglot-find-implementation
    )
#+END_SRC
* Kitty
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
  # Font configuration

  # font_family OperatorMono Nerd Font Medium
  # bold_font OperatorMono Nerd Font Bold
  # italic_font  OperatorMono Nerd Font Italic
  # bold_italic_font OperatorMono Nerd Font Bold Italic

  font_family FiraCode Nerd Font Mono Medium
  bold_font FiraCode Nerd Font Mono Bold
  italic_font  FiraCode Nerd Font Mono Italic
  bold_italic_font FiraCode Nerd Font Mono Bold Italic

  # font_family JetBrainsMono Nerd Font Mono Regular
  # bold_font JetBrainsMono Nerd Font Mono Bold
  # italic_font JetBrainsMono Nerd Font Mono Italic
  # bold_italic_font JetBrainsMono Nerd Font Mono Bold Italic

  # No cursor changing
  shell_integration no-cursor

  # Font Size
  font_size 18
  # font_size 13

  # Performane
  sync_to_monitor yes
  repaint_delay 5
  input_delay 2

  # NO BELLS!
  enable_audio_bell no

  cursor_shape block

  clear_all_shortcuts yes

  kitty_mod ctrl+shift

  map mod+equal change_font_size all +2.0
  map mod+minus change_font_size all -2.0

  map cmd+equal change_font_size all +2.0
  map cmd+minus change_font_size all -2.0

  map cmd+c copy_to_clipboard
  map cmd+v paste_from_clipboard

  map cmd+t new_tab
  map cmd+left previous_tab
  map cmd+right next_tab

  # Tab settings
  tab_bar_align left
  tab_bar_edge bottom

  tab_title_template "{title}"
  allow_remote_control yes

  # Cursor
  cursor_blink_interval 0

  # macOS stuff
  macos_titlebar_color               background
  macos_option_as_alt                both
  macos_quit_when_last_window_closed yes
  macos_show_window_title_in         none
  macos_custom_beam_cursor           yes

  # term
  term xterm-256color

  background_opacity 0.88
  # background_opacity 1
#+END_SRC
