#+AUTHOR: amirrezaask
#+TITLE: Amirreza Emacs

* Table of contents :TOC_3:
- [[#basics-and-core-emacs][Basics and Core Emacs]]
    - [[#gc][GC]]
    - [[#dont-touch-my-init-file][Don't touch my init file]]
    - [[#no-backup-files-we-have-git][No backup files, we have git]]
    - [[#svg-on-mac][Svg on mac]]
    - [[#macos-option-as-meta][macOS option as meta]]
    - [[#package-manager--straightel-][Package manager ( straight.el )]]
    - [[#emacs-29-feature-flags][Emacs 29 feature flags]]
    - [[#path][PATH]]
    - [[#configuration-edit][Configuration Edit]]
- [[#ui][UI]]
    - [[#disable-ui-menus][Disable UI menus]]
    - [[#no-startup-screen][No startup screen]]
    - [[#y-or-n][y-or-n]]
    - [[#no-bells-and-whistles][No bells and whistles]]
    - [[#always-start-in-fullscreen][Always start in fullscreen]]
    - [[#highlight-current-line][Highlight current line]]
    - [[#themes][Themes]]
    - [[#window-management][Window management]]
    - [[#treesitter--emacs-29][Treesitter ( Emacs >29)]]
- [[#font][Font]]
    - [[#change-font-size][Change font size]]
    - [[#set-font][Set font]]
- [[#navigation][Navigation]]
    - [[#fast-scrolling-around-the-files][Fast scrolling around the files]]
    - [[#goto-definitionreferences][Goto Definition/References/...]]
- [[#editing][Editing]]
    - [[#better-mark-key][Better mark key]]
    - [[#multi-cursors][Multi cursors]]
    - [[#org][Org]]
- [[#file-manager][File manager]]
- [[#minibuffer][Minibuffer]]
- [[#ide][IDE]]
    - [[#lsp][LSP]]
    - [[#autocompletion][Autocompletion]]
    - [[#git][Git]]
    - [[#languages][Languages]]
    - [[#projects][Projects]]
    - [[#compiling][Compiling]]
- [[#searching][Searching]]

* Installation
In order to install this config you need:
- Emacs 25+ (Current emacs version is 29)
the run commands below:
#+BEGIN_SRC bash :tangle no
  mkdir -p ~/.emacs.d/
  curl 'https://raw.githubusercontent.com/amirrezaask/dotfiles/master/.emacs.d/init.el' > ~/.emacs.d/init.el
  curl 'https://raw.githubusercontent.com/amirrezaask/dotfiles/master/.emacs.d/README.org' > ~/.emacs.d/README.org
#+END_SRC
* Basics and Core Emacs
*** GC
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000) ;; 100 MB
(setq vc-follow-symlinks t)
#+END_SRC
*** Don't touch my init file
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.custom.el") ;; set custom file to not meddle with init.el

#+END_SRC
*** No backup files, we have git
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil) ;; no emacs ~ backup files

#+END_SRC
*** Svg on mac
#+BEGIN_SRC
  (setq image-types (cons 'svg image-types)) ;; macos bug

#+END_SRC
*** macOS option as meta
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta) ;; macos again
#+END_SRC
*** Package manager ( straight.el )
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+END_SRC
*** Emacs 29 feature flags
#+BEGIN_SRC emacs-lisp
(setq has-eglot (>= emacs-major-version 29))
(setq has-ts (>= emacs-major-version 29))
#+END_SRC
*** PATH
#+BEGIN_SRC emacs-lisp
(defun home (path)
  (expand-file-name path (getenv "HOME")))
(add-to-list 'exec-path (home ".local/bin"))
(add-to-list 'exec-path (home ".cargo/bin"))
(add-to-list 'exec-path "/opt/homebrew/bin") ;; homebrew
(add-to-list 'exec-path (home "bin")) ;; GOPATH/bin
(add-to-list 'exec-path (home ".opam/5.0.0/bin")) ;; ocaml my caml
(add-to-list 'exec-path (home ".opam/default/bin"))
(setenv "PATH" (string-join exec-path ":")) ;; set emacs process PATH

#+END_SRC
*** Configuration Edit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x i") (lambda ()
				(interactive)
				(find-file (expand-file-name "README.org" user-emacs-directory))))

#+END_SRC
* UI
*** Disable UI menus
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRc
*** Better Frame title
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "%f")
#+END_SRC
*** Cursor
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC
*** No startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t) ;; disable default start screen
#+END_SRC
*** y-or-n
#+BEGIN_SRC emacs-lisp
(setq use-short-answers t)
#+END_SRC
*** No bells and whistles
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function (lambda ())) ;; no stupid sounds
#+END_SRC
*** Always start in fullscreen
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter nil 'fullscreen 'maximized)

#+END_SRC
*** Highlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC
*** Themes
#+BEGIN_SRC emacs-lisp
    (defadvice load-theme (before disable-themes-first activate)
      (dolist (i custom-enabled-themes)
	(disable-theme i)))

    (use-package ef-themes)
    (use-package amirreza-themes :straight (amirreza-themes :host github :repo "amirrezaask/themes" :local-repo "amirreza-themes"))
    (use-package gruber-darker-theme)
    (setq custom-safe-themes t)

    (setq amirreza/dark-theme 'ef-winter)
    (setq amirreza/light-theme 'modus-operandi)

    (setq amirreza/color-mode 'dark) ;; 'light
    (defun amirreza/light-mode ()
      (interactive)
      (setq amirreza/color-mode 'light)
      (load-theme amirreza/light-theme))

    (defun amirreza/dark-mode ()
      (interactive)
      (setq amirreza/color-mode 'dark)
      (load-theme amirreza/dark-theme))

    (defun amirreza/toggle-color-mode ()
      (interactive)
      (if (eq amirreza/color-mode 'dark) (amirreza/light-mode) (amirreza/dark-mode)))
    (global-set-key (kbd "<f1>") 'amirreza/toggle-color-mode)

  (amirreza/dark-mode) ;; load dark mode by default
#+END_SRC
*** Window management
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-o") 'other-window)
(global-set-key (kbd "C-2") 'split-window-below)
(global-set-key (kbd "C-3") 'split-window-right)
#+END_SRC
* Font
#+BEGIN_SRC emacs-lisp
  (defun amirreza/set-font (family size)
    (interactive (list (completing-read "Font Family: " '("Jetbrains Mono" "Fira Code")) (read-number "Size: ")))
    (set-frame-font (format "%s-%d" family size)))

  (global-set-key (kbd "C-=") (lambda () (interactive) (text-scale-increase 1)))
  (global-set-key (kbd "C--") (lambda () (interactive) (text-scale-decrease 1)))
  (amirreza/set-font "Fira Code" 15)
#+END_SRC
* Navigation
*** Fast scrolling around the files
#+BEGIN_SRC emacs-lisp

(setq recenter-positions '(middle))

(defun jump-up ()
  (interactive)
  (next-line (* -1 (/ (window-height) 2)))
  (recenter-top-bottom))

(defun jump-down ()
  (interactive)
  (next-line (/ (window-height) 2))
  (recenter-top-bottom))

(global-set-key (kbd "M-n") 'jump-down)
(global-set-key (kbd "M-p") 'jump-up)
#+END_SRC
*** Goto Definition/References/...
#+BEGIN_SRC emacs-lisp

(use-package xref
  :straight nil
  :bind
  (("M-." . xref-find-definitions)
   ("M-r" . xref-find-references)))

#+END_SRC
* Editing
*** Better mark key
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-q") 'set-mark-command) ;; better key to start a selection
(global-unset-key (kbd "C-SPC")) ;; reserve this for auto complete trigger
#+END_SRC
*** Multi cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind
  (("C-S-n" . 'mc/mark-next-like-this)
   ("C-S-p" . 'mc/mark-previous-like-this)))
#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org)
    :bind
    (:map org-src-mode-map
	  ("C-c C-c" . org-edit-src-exit))
    :init
    (setq org-startup-folded t)
    (setq org-src-window-setup 'current-window))
#+END_SRC
* File manager
#+BEGIN_SRC emacs-lisp
(use-package dired
  :straight nil
  :bind
  (:map global-map
   ("C-1" . (lambda () (interactive) (dired default-directory)))
  :map dired-mode-map
  ("C-1" . 'previous-buffer)))

#+END_SRC
* Minibuffer
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (setq vertico-cycle t)
  (setq vertico-count 25)
  (vertico-mode))

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC
* IDE
*** LSP
#+BEGIN_SRC emacs-lisp
  (defun eglot-save-with-imports () (interactive)
	 (eglot-format-buffer)
	 (eglot-code-actions nil nil "source.organizeImports" t))

  (add-hook 'go-mode-hook (lambda ()
			    (add-hook 'before-save-hook 'eglot-save-with-imports nil t)))

  (add-hook 'go-ts-mode-hook (lambda ()
			    (add-hook 'before-save-hook 'eglot-save-with-imports nil t)))

  ;; Eglot is included in emacs 29
  (unless has-eglot
    (straight-use-package 'eglot))

  (when has-ts
    (add-hook 'go-ts-mode-hook #'eglot-ensure)
    (add-hook 'rust-ts-mode-hook #'eglot-ensure))

  (use-package eglot
    :straight nil
    :hook
    ((go-mode rust-mode tuareg-mode) . eglot-ensure) ;; Go + Rust + Ocaml
    :bind
    (:map eglot-mode-map
	  ("C-x C-l" . eglot-save-with-imports)
	  ("M-i" . eglot-find-implementations)
	  ("C-c C-c" . eglot-code-actions)))
#+END_SRC
*** Autocompletion
#+BEGIN_SRC emacs-lisp
(use-package corfu
  :bind
  ("C-SPC" . 'completion-at-point)
  :config
  (setq corfu-auto t)
  (global-corfu-mode))

#+END_SRC
*** Git
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  (:map global-map
	("C-0" . magit)
   :map magit-mode-map
   ("C-0" . delete-window)))
#+END_SRC
*** Languages
#+BEGIN_SRC emacs-lisp
(use-package go-mode)
(use-package yaml-mode)
(use-package json-mode)
(use-package rust-mode)
(when (< emacs-major-version 29)
  (use-package csharp-mode))
(use-package typescript-mode)
(use-package tuareg) ;; ocaml

#+END_SRC
*** Projects
#+BEGIN_SRC emacs-lisp
(defun projects-refresh ()
  (interactive)
  (dolist (loc '("~/dev" "~/w"))
    (project-remember-projects-under loc)))

(use-package project
  :commands (project-remember-projects-under)
  :init
  (projects-refresh) ;; refresh projects on start
  (setq project-switch-commands 'project-dired)
  :bind
  ("C-x p R" . projects-refresh))

#+END_SRC
*** Compiling
#+BEGIN_SRC emacs-lisp
(use-package compile
  :bind
  (("<f5>" . compile)
   ("C-x C-x" . compile)
   :map compilation-mode-map
   ("<f5>" . recompile)
   ("C-x C-x" . recompile)
   ("k" . kill-compilation)))

#+END_SRC
* Searching
#+BEGIN_SRC emacs-lisp
(use-package wgrep)

;; Grep
(defun my-grep ()
  "Best Grep command of all time"
  (interactive)
  (let* ((rg-command "rg -n -H --no-heading -e '%s' %s")
	 (gnu-grep-command "grep -rn '%s' %s")
	 (base-command gnu-grep-command)
	 (pattern (read-string "Pattern: "))
	 (dir (read-file-name "Dir: " (if (project-root (project-current)) (project-root (project-current)) default-directory))))
    
    (when (executable-find "rg") (setq base-command rg-command))
    (compilation-start (format base-command pattern dir) #'grep-mode)))

(global-set-key (kbd "C-x C-g") 'my-grep)
(global-set-key (kbd "C-.") 'my-grep)
#+END_SRC
* Keybindings
