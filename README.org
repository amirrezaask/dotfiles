#+TITLE: AmirrezaAsk Computing Environment
#+DATE: <2022-12-25 Sun>
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+OPTIONS: toc:nil reveal_title_slide:nil
#+REVEAL_INIT_OPTIONS: slideNumber:false
* AmirrezaAsk Computing Environment                                   :TOC_5:
  - [[#how-to-install-][How to install ?]]
  - [[#emacs][Emacs]]
    - [[#personal-customization-variable][Personal Customization Variable]]
    - [[#init-files][Init Files]]
      - [[#early-initel][early-init.el]]
      - [[#initel][init.el]]
    - [[#packages][Packages]]
    - [[#basics-and-core-settings][Basics and core settings]]
    - [[#windows-and-buffers][Windows and Buffers]]
    - [[#dired-file-manager][Dired File Manager]]
    - [[#emacs-help][Emacs Help]]
    - [[#ui][UI]]
        - [[#themes][Themes]]
        - [[#font][Font]]
    - [[#completion][Completion]]
      - [[#in-buffer-completion][In-Buffer Completion]]
      - [[#minibuffer-completion][Minibuffer Completion]]
    - [[#editor][Editor]]
    - [[#org-mode][Org mode]]
        - [[#org-reveal][Org-reveal]]
    - [[#git][Git]]
    - [[#programming][Programming]]
      - [[#eldoc][Eldoc]]
      - [[#lsp][LSP]]
      - [[#golang][Golang]]
    - [[#workspaces][Workspaces]]
  - [[#kitty][Kitty]]
    - [[#themes-1][Themes]]
      - [[#dracula][Dracula]]
    - [[#font-1][Font]]
    - [[#cursor][Cursor]]
    - [[#performance][Performance]]
    - [[#no-audio-bell][No Audio Bell]]
    - [[#keybindings][Keybindings]]
    - [[#tab-bar][Tab bar]]
    - [[#macos][macOS]]
    - [[#terminal-type][Terminal Type]]
    - [[#background-opacity][Background Opacity]]
  - [[#git-global-config][Git Global Config]]

** How to install ?
It's a fairly simple thing to do but remember this will override your current =kitty= and =emacs= config, so backup
them please.
#+BEGIN_SRC sh
  curl https://raw.githubusercontent.com/amirrezaask/dotfiles/master/.emacs.d/README.org > ~/.emacs.d/README.org &&\
  emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "~/.emacs.d/README.org")'
#+END_SRC
** Emacs
*** Personal Customization Variable
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Amirreza Askarpour")
  (setq user-email "raskarpour@gmail.com")
  ;; (setq amirreza/font "FiraCode Nerd Font Mono")
  ;; (setq amirreza/font "OperatorMono Nerd Font Light")
  (setq amirreza/font "JetBrainsMono Nerd Font Mono")
  (setq amirreza/font-size "15")
  (setq amirreza/theme 'doom-one)
  (setq amirreza/transparent t) ;; For terminal only
#+END_SRC
*** Init Files
**** early-init.el
From emacs 27 I think they added a file called =early-init.el= which will get sourced
before UI stuff happens in Emacs, so it's a good place to turn of UI things.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el :mkdirp yes
(setq package-enable-at-startup nil) ;; Disable default package manager package.el
(tool-bar-mode 0) ;; disable top toolbar
(scroll-bar-mode 0) ;; disable scroll bar
(menu-bar-mode -1) ;; Disable menu bar
(setq gc-cons-threshold (* 100 1024 1024))
(setq read-process-output-max (* 1024 1024))
#+END_SRC
**** init.el
init.el will just load this file.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq vc-follow-symlinks t)
  (add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (org-babel-load-file (expand-file-name "README.org" user-emacs-directory))
#+END_SRC
*** Packages
I rather have all side effects ( installing packages on disk ) in one place.
#+BEGIN_SRC emacs-lisp
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq amirreza/packages
	'(
	  ;; General
	  general

	  ace-window ;; Window management made easy

	  bufler ;; buffer management made easy

	  helpful ;; Better help buffers, more info like keymappings in function help buffers.

	  ;; Autocomplete popup in buffer, we need this as a custom reciepe to have extensions in my `load-path`
	  (corfu :type git :host github :repo "emacs-straight/corfu" :files ("*" "extensions/*.el" (:exclude ".git")))
	  ;; make corfu work in terminal emacs
	  corfu-terminal

	  ;; Centralize your buffer text
	  olivetti

	  ;; Don't need any description right ?
	  rainbow-delimiters

	  ;; select a portion of your buffer and expand or contract semantically
	  expand-region

	  ;; LSP client, in Emacs 29 it's going to be upstreamed in core
	  eglot

	  ;; just this command `consult-eglot-symbols`
	  consult-eglot

	  ;; Show git diff signs in sidebar
	  git-gutter
	  ;; Best git client on the earth
	  magit

	  vterm ;; Modern terminal in Emacs
	  apache-mode ;; Apache config syntax
	  systemd ;; Systemd config syntax
	  nginx-mode ;; Nginx config syntax
	  docker-compose-mode ;; Docker-compose syntax
	  dockerfile-mode ;; Dockerfile syntax
	  markdown-mode ;; Markdown syntax
	  go-mode ;; Golang
	  go-tag ;; Manage Struct tags in Golang
	  rust-mode ;; Rust
	  zig-mode ;; Zig
	  yaml-mode
	  csv-mode
	  json-mode ;; Javascript Object Notation
	  clojure-mode ;; LISP on JVM
	  cider ;; Clojure repl integrated into Emacs

	  ;; Minibuffer Completion and Enhancements
	  vertico 
	  savehist
	  consult
	  marginalia
	  orderless

	  org-bullets
	  org-reveal ;; Export org document as reveal.js presentation
	  toc-org ;; Add a table of content to org file
	  htmlize ;; dependency of org-reveal

	  prescient ;; Sort completion suggestions based on your history
	  vertico-prescient ;; prescient for vertico
	  corfu-prescient ;; prescient for corfu

	  perspective ;; i3 like workspaces
	  ))

  (mapc (lambda (pkg-receipe)
	  (straight-use-package pkg-receipe)
	  ) amirreza/packages)
#+END_SRC
*** Basics and core settings
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil) ;; Don't create .# files as lock.

  (setq make-backup-files nil) ;; Disable backup files ~file
  (setq auto-save-default nil) ;; Disable auto save files
  (setq inhibit-startup-screen t) ;; No startup splash screen
  (setq use-dialog-box nil) ;; Do not use UI for questions
  (setq ring-bell-function 'ignore) ;; Do not beep please.

  (tool-bar-mode 0) ;; disable top toolbar
  (scroll-bar-mode 0) ;; disable scroll bar
  (menu-bar-mode -1) ;; Disable menu bar

  (setq-default cursor-type 'box) ;; instead of box use a horizontal line.
  (blink-cursor-mode -1) ;; no blinking cursor.


  ;; Copy PATH from default shell
  (straight-use-package 'exec-path-from-shell)
  (exec-path-from-shell-initialize)

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq echo-keystrokes 0.4)


  (defun amirreza/find-file ()
    (interactive)
    (if (vc-backend (buffer-file-name))
	(project-find-file)
      (call-interactively 'find-file)
      ))


  (defun amirreza/keyboard-kinesis ()
    (interactive)
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta)
    )

  (defun amirreza/keyboard-mac ()
    (interactive)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'super)
    )


  (defun amirreza/edit-emacs ()
    (interactive)
    (find-file (expand-file-name "README.org" user-emacs-directory)))


  (general-def :keymaps 'override "C-c e e" 'amirreza/edit-emacs)
#+END_SRC
*** Windows and Buffers
#+BEGIN_SRC emacs-lisp
(general-def :keymaps 'override "C-x o" 'ace-window)
(general-def :keymaps 'override "C-x C-b" 'bufler)
#+END_SRC
*** Dired File Manager
#+BEGIN_SRC emacs-lisp
  (general-def :keymaps 'dired-mode-map "C-c C-e" 'wdired-change-to-wdired-mode)
#+END_SRC
*** Emacs Help
#+BEGIN_SRC emacs-lisp
  (general-def
    :keymaps 'override
    [remap describe-key] 'helpful-key
    [remap describe-function] 'helpful-callable
    [remap describe-variable] 'helpful-variable
    )
#+END_SRC
*** UI
***** Themes
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'all-the-icons)
  (straight-use-package 'ef-themes)
  (straight-use-package 'doom-themes)
  (straight-use-package 'gruber-darker-theme)

  ;; Add custom themes path to themes load path
  (add-to-list 'custom-theme-load-path
	       (expand-file-name "themes" user-emacs-directory))

  (setq amirreza/--current-theme nil)

  (defun amirreza/switch-theme ()
    (interactive)
    (let ((theme (intern (completing-read "Theme: " (mapcar #'symbol-name
							    (custom-available-themes))))))
      (amirreza/load-theme theme)))

  (defun amirreza/load-theme (theme)
    (when (not (eq amirreza/--current-theme nil))
      (disable-theme amirreza/--current-theme))
    (setq amirreza/--current-theme theme)
    (load-theme amirreza/--current-theme t)
    (unless (display-graphic-p)
      (when amirreza/transparent
	(set-face-background 'default "0"))))

  (amirreza/load-theme amirreza/theme)
  (general-def :keymaps 'override "C-c t t" 'amirreza/switch-theme)
#+END_SRC
****** My Custom Jonathan Blow esque theme
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/themes/jblow.el :mkdirp yes
;;; jblow-theme.el --- Theme copied from jonathan blow emacs theme  -*- lexical-binding: t; -*-

;; Copyright (C) 2022  Amirreza Askarpour

;; Author: Amirreza Askarpour <amirreza@amirrezas-MacBook-Pro.local>
;; Keywords: lisp

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; 

;;; Code:



(deftheme jblow "Theme from Great Jonathan Blow")

(let ((background "#072626")
      (selection "#0000ff")
      (keyword "#d4d4d4")
      (comment "#118a1a")
      (string "#2ec09c")
      (variable "#c8d4ec")
      (warning "#504038")
      (constant "#7ad0c6")
      (cursor "green")
      (mode-line "#d3b58d")
      (function "#ffffff")
      (macro "#8cde94")
      (punctuation "#8cde94")
      (hl-line "#084040")
      (builtin "#ffffff")

      )

  (custom-theme-set-faces
   'jblow
   
   `(default ((t (:foreground "#d3b58d" :background ,background))))
   `(cursor ((t (:background ,cursor))))

   `(font-lock-keyword-face           ((t (:foreground ,keyword))))
   `(font-lock-type-face              ((t (:foreground ,punctuation))))
   `(font-lock-constant-face          ((t (:foreground ,constant))))
   `(font-lock-variable-name-face     ((t (:foreground ,variable))))
   `(font-lock-builtin-face           ((t (:foreground ,builtin))))
   `(font-lock-string-face            ((t (:foreground ,string))))
   `(font-lock-comment-face           ((t (:foreground ,comment))))
   `(font-lock-comment-delimiter-face ((t (:foreground ,comment))))
   `(font-lock-doc-face               ((t (:foreground ,comment))))
   `(font-lock-function-name-face     ((t (:foreground ,function))))
   `(font-lock-doc-string-face        ((t (:foreground ,string))))
   `(font-lock-preprocessor-face      ((t (:foreground ,macro))))
   `(font-lock-warning-face           ((t (:foreground ,warning))))

   `(mode-line ((t (:foreground "black" :background ,mode-line))))
   `(region ((t (:background ,selection))))
   `(hl-line ((t :background ,hl-line)))
   `(highlight ((t :foreground nil :background ,selection)))
   `(persp-selected-face ((t :foreground "#ffffff")))
   )
  )


;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'jblow)
;;; jblow-theme.el ends here

#+END_SRC
***** Font
#+BEGIN_SRC emacs-lisp
;; Font settings
(defun amirreza/home-monitor ()
  (interactive)
  (setq amirreza/font-size "23")
  (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

;; My font setup for my laptop setup
(defun amirreza/laptop ()
  (interactive)
  (setq amirreza/font-size "15")
  (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

;; Reload font settings
(defun amirreza/reload-font ()
  (interactive)
  (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

(amirreza/reload-font)

#+END_SRC
*** Completion
**** In-Buffer Completion
#+BEGIN_SRC emacs-lisp
  (setq corfu-auto t)
  (global-corfu-mode)
  (corfu-history-mode 1)
  (corfu-echo-mode 1)
  (corfu-popupinfo-mode 1)
  (corfu-terminal-mode)
  (corfu-prescient-mode)
#+END_SRC
**** Minibuffer Completion
#+BEGIN_SRC emacs-lisp
  (setq completion-cycle-threshold 3)
  (setq tab-always-indent 'complete)
  (vertico-mode)
  (setq vertico-count 15)
  (setq vertico-cycle t)

  (setq consult-async-min-input 1)

  (marginalia-mode)

  (setq completion-styles '(orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion))))

  (vertico-prescient-mode)
#+END_SRC
*** Editor
#+BEGIN_SRC emacs-lisp
  (setq olivetti-body-width 100)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (delete-selection-mode 1) ;; When a region of text is selected and then something is typed remove text and replace with what has been typed.
  (show-paren-mode 1) ;; Highlight matching parens
  (setq show-paren-delay 0) ;; highlight matching parens instantly.
  (setq display-line-numbers-type 'relative) ;; relative line numbers
  (global-display-line-numbers-mode 1) ;; enable line numbers globaly
  (defun amirreza/up-center ()
    (interactive)
    (previous-line (/ (window-height) 2))
    (recenter-top-bottom))
  (defun amirreza/down-center ()
    (interactive)
    (next-line (/ (window-height) 2))
    (recenter-top-bottom))
  ;; Best movement ever ?????
  (setq recenter-positions '(middle))

  (general-def :keymaps 'global-map
    "M-p" 'amirreza/up-center
    "M-n" 'amirreza/down-center
    )

  (general-def :keymaps 'global-map
    "C-=" 'er/expand-region
    "C--" 'er/contract-region
    )

  ;; really important key if you use emacs in terminal
  (general-def :keymaps 'override "C-q" 'set-mark-command)
#+END_SRC
*** Org mode
#+BEGIN_SRC emacs-lisp
  (defun amirreza/org-code-block ()
    (interactive)
    (insert (format "#+BEGIN_SRC %s\n\n#+END_SRC"
		    (completing-read "Language: "
				     '("emacs-lisp"
				       "go"
				       "rust"
				       "python"
				       "lua"
				       "bash"
				       "sh"
				       "fish"
				       "java"
				       )))))

  (defun amirreza/org-disable-tangle ()
    (interactive)
    (insert ":PROPERTIES:
  :header-args:    :tangle no
  :END:"
	    ))

  (setq org-use-property-inheritance t)
  (setq org-startup-folded t) ;; Start org mode all headers collapsed
  (setq org-src-window-setup 'current-window)


  (add-hook 'org-mode-hook #'org-bullets-mode)
  (add-hook 'org-mode-hook #'toc-org-mode)

  (general-def
    :prefix "C-c m"
    :keymaps 'org-mode-map

    "c b" 'amirreza/org-code-block)

  (general-def
    :keymaps 'org-mode-map
    "M-n" 'org-next-visible-heading
    "M-p" 'org-previous-visible-heading
    )
#+END_SRC
***** Org-reveal
=org-reveal= will let you create =reveal.js= presentations from Org mode documents.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda ()
	      (require 'ox-reveal))
	    )


#+END_SRC
*** Git
#+BEGIN_SRC emacs-lisp
  (global-git-gutter-mode)
  (general-def :keymaps 'override "C-x g" 'magit)
#+END_SRC
*** Programming
**** Eldoc
Eldoc is a core emacs package that can be used
to show documentation and possibly errors both in =echo-area=
and a seperate buffer.
#+BEGIN_SRC emacs-lisp
  (setq eldoc-echo-area-use-multiline-p nil)
  (setq eldoc-echo-area-display-truncation-message nil)
  (setq eldoc-echo-area-prefer-doc-buffer nil)

  (setq amirreza/--eldoc-window-open 'close)

  (defun amirreza/eldoc-toggle-buffer ()
    "Toggle eldoc buffer."
    (interactive)
    (if (eq 'open amirreza/--eldoc-window-open)
	(progn
	  (message "closing...")
	  (dolist (w (window-list))
	    (when (string-match-p "\\*eldoc.*" (buffer-name (window-buffer w)))
	      (quit-window nil w)
	      ))
	  (setq amirreza/--eldoc-window-open 'close))
      (progn
	(message "opening...")
	(eldoc-doc-buffer t)
	(setq amirreza/--eldoc-window-open 'open))
    ))

  (global-eldoc-mode)

#+END_SRC
**** LSP
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook 'eglot-ensure)
  (add-hook 'rust-mode-hook 'eglot-ensure)
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'php-mode-hook 'eglot-ensure)

  (general-def
    :keymaps 'override
    :prefix "C-x p"

    "f" 'project-find-file
    "p" 'project-switch-project
    "b" 'project-buffers
    "d" 'project-dired
    "c" 'project-compile
    )
  (general-def
    :keymaps 'override
    "C-h ." 'amirreza/eldoc-toggle-buffer ;; Toggle eldoc buffer

    "M-0" 'amirreza/eldoc-toggle-buffer ;; Toggle eldoc buffer

    "C-c m n" 'flymake-goto-next-error ;; Next error
    "C-c m p" 'flymake-goto-prev-error ;; Previous error

    "M-j" 'flymake-goto-next-error ;; Next error
    "M-k" 'flymake-goto-prev-error ;; Previous error

    "M-." 'xref-find-definitions ;; Goto definitions
    "M-," 'xref-go-back ;; hop back where you where before jump
    "M-r" 'xref-find-references ;; Goto references
    )

  (general-def
    :keymaps 'eglot-mode-map
    "M-i" 'eglot-find-implementation
    "C-c m r" 'eglot-rename
    "C-c m s" 'consult-eglot-symbols
    "C-c m f" 'eglot-format
    "C-c m e" 'consult-flymake
    "C-c m i" 'eglot-find-implementation
    )
#+END_SRC
**** Golang
#+BEGIN_SRC emacs-lisp
  (general-def :keymaps 'go-mode-map
    :prefix "C-c m"
    "a" 'go-tag-add ;; Add struct tags
    )
#+END_SRC
*** Workspaces
#+BEGIN_SRC emacs-lisp
  (setq persp-state-default-file (expand-file-name "sessions" user-emacs-directory))
  (setq persp-mode-prefix-key (kbd "C-c w"))


  (defun amirreza/save-session ()
    (interactive)
    (persp-state-save persp-state-default-file))


  (defun amirreza/load-session ()
    (interactive)
    (persp-state-load persp-state-default-file))
  (persp-mode 1)
  (add-hook 'kill-emacs-hook 'amirreza/save-session)
  (general-def :prefix "C-c w" :keymaps 'override "s" 'persp-switch)
#+END_SRC
** Kitty
*** Themes
**** Dracula
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  foreground            #f8f8f2
  background            #282a36
  selection_foreground  #ffffff
  selection_background  #44475a

  url_color #8be9fd

  # black
  color0  #21222c
  color8  #6272a4

  # red
  color1  #ff5555
  color9  #ff6e6e

  # green
  color2  #50fa7b
  color10 #69ff94

  # yellow
  color3  #f1fa8c
  color11 #ffffa5

  # blue
  color4  #bd93f9
  color12 #d6acff

  # magenta
  color5  #ff79c6
  color13 #ff92df

  # cyan
  color6  #8be9fd
  color14 #a4ffff

  # white
  color7  #f8f8f2
  color15 #ffffff

  # Cursor colors
  cursor            #f8f8f2
  cursor_text_color background

  # Tab bar colors
  active_tab_foreground   #282a36
  active_tab_background   #f8f8f2
  inactive_tab_foreground #282a36
  inactive_tab_background #6272a4

  # Marks
  mark1_foreground #282a36
  mark1_background #ff5555

  # Splits/Windows
  active_border_color #f8f8f2
  inactive_border_color #6272a4


#+END_SRC
*** Font
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  # Font configuration
  # font_family OperatorMono Nerd Font Medium
  # bold_font OperatorMono Nerd Font Bold
  # italic_font  OperatorMono Nerd Font Italic
  # bold_italic_font OperatorMono Nerd Font Bold Italic

  font_family FiraCode Nerd Font Mono Medium
  bold_font FiraCode Nerd Font Mono Bold
  italic_font  FiraCode Nerd Font Mono Italic
  bold_italic_font FiraCode Nerd Font Mono Bold Italic

  # font_family JetBrainsMono Nerd Font Mono Regular
  # bold_font JetBrainsMono Nerd Font Mono Bold
  # italic_font JetBrainsMono Nerd Font Mono Italic
  # bold_italic_font JetBrainsMono Nerd Font Mono Bold Italic
  font_size 18
#+END_SRC
*** Cursor
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  shell_integration no-cursor
  cursor_shape block
  cursor_blink_interval 0
#+END_SRC
*** Performance
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  sync_to_monitor yes
  repaint_delay 5
  input_delay 2
#+END_SRC
*** No Audio Bell
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  enable_audio_bell no
#+END_SRC
*** Keybindings
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  clear_all_shortcuts yes

  kitty_mod ctrl+shift

  map mod+equal change_font_size all +2.0
  map mod+minus change_font_size all -2.0

  map cmd+equal change_font_size all +2.0
  map cmd+minus change_font_size all -2.0

  map cmd+c copy_to_clipboard
  map cmd+v paste_from_clipboard

  map cmd+t new_tab
  map cmd+left previous_tab
  map cmd+right next_tab
#+END_SRC
*** Tab bar
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  tab_bar_align left
  tab_bar_edge bottom

  tab_title_template "{title}"
#+END_SRC
*** macOS
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  macos_titlebar_color               background
  macos_option_as_alt                both
  macos_quit_when_last_window_closed yes
  macos_show_window_title_in         none
  macos_custom_beam_cursor           yes
#+END_SRC
*** Terminal Type
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  term xterm-256color
#+END_SRC
*** Background Opacity
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  background_opacity 0.96
#+END_SRC
** Git Global Config
#+BEGIN_SRC config :tangle ~/.config/git/config :mkdirp yes
[user]
	email = raskarpour@gmail.com
	name = amirrezaask

[alias]
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

[push]
  default = current

[interactive]
   diffFilter = delta --color-only

[core]
    pager = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true  # use n and N to move between diff sections

[merge]
    conflictstyle = diff3

[diff]
    colorMoved = default
# https://github.com/dandavison/delta 

#+END_SRC
