#+TITLE: AmirrezaAsk Computing Environment
#+DESCRIPTION: My configurations for different tools I use on a daily basis.
#+OPTIONS: toc:4
#+EXPORT_FILE_NAME: index.html
* Introduction
This is my configuration file which will generate configurations for all tools I use on daily basis:
- Emacs
- Kitty ( Terminal Emulator )
- Zsh ( Shell )
- Git

* How to install ?
It's a fairly simple thing to do but remember this will override your current =kitty= and =emacs= config, so backup
them please.
#+BEGIN_SRC sh
  curl https://raw.githubusercontent.com/amirrezaask/dotfiles/master/.emacs.d/README.org > ~/.emacs.d/README.org &&\
  emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "~/.emacs.d/README.org")'
#+END_SRC
* Emacs
*** Personal Customization Variable
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Amirreza Askarpour")
  (setq user-email "raskarpour@gmail.com")
  (setq amirreza/font "Source Code Pro")
  ;; (setq amirreza/font "FiraCode Nerd Font Mono")
  ;; (setq amirreza/font "OperatorMono Nerd Font Light")
  ;; (setq amirreza/font "JetBrainsMono Nerd Font Mono")
  (setq amirreza/font-size "22")
  (setq amirreza/theme 'doom-dracula)
  (setq amirreza/transparent 95) ;; For terminal only
#+END_SRC
*** Init Files
**** early-init.el
From emacs 27 I think they added a file called =early-init.el= which will get sourced
before UI stuff happens in Emacs, so it's a good place to turn of UI things.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/early-init.el :mkdirp yes
(setq package-enable-at-startup nil) ;; Disable default package manager package.el
(tool-bar-mode 0) ;; disable top toolbar
(scroll-bar-mode 0) ;; disable scroll bar
(menu-bar-mode -1) ;; Disable menu bar
(setq gc-cons-threshold (* 100 1024 1024))
(setq read-process-output-max (* 1024 1024))
#+END_SRC
**** init.el
init.el will just load this file.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq vc-follow-symlinks t)
  (add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (org-babel-load-file (expand-file-name "README.org" user-emacs-directory))
#+END_SRC
*** Package Manager
#+BEGIN_SRC emacs-lisp
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq straight-use-package-by-default t)
#+END_SRC
*** Basics and core settings
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil) ;; Don't create .# files as lock.
  (setq native-comp-async-report-warnings-errors 'silent) ;; Silent Emacs 28 native compilation
  (setq make-backup-files nil) ;; Disable backup files ~file
  (setq auto-save-default nil) ;; Disable auto save files
  (setq inhibit-startup-screen t) ;; No startup splash screen
  (setq use-dialog-box nil) ;; Do not use UI for questions
  (setq ring-bell-function 'ignore) ;; Do not beep please.

  (tool-bar-mode 0) ;; disable top toolbar
  (scroll-bar-mode 0) ;; disable scroll bar
  (menu-bar-mode -1) ;; Disable menu bar



  ;; Copy PATH from default shell
  (use-package exec-path-from-shell :config
    (exec-path-from-shell-initialize))

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq echo-keystrokes 0.4)


  (defun amirreza/find-file ()
    (interactive)
    (if (vc-backend (buffer-file-name))
	(project-find-file)
      (call-interactively 'find-file)
      ))

  (defun amirreza/edit-emacs ()
    (interactive)
    (find-file (expand-file-name "README.org" user-emacs-directory)))


  (defun amirreza/getenv (name default)
    "Get env if not defined use default"
    (let ((value (getenv name)))
      (if value
	  value
	default
      )))

  (use-package general) ;; For a beautiful keymap macro
  (use-package hydra) ;; Make your keybindings stick

  (use-package benchmark-init
    :config
    (add-hook 'after-init-hook 'benchmark-init/deactivate))

  (use-package gcmh
    :init
    (gcmh-mode 1)
    )

  (defmacro amirreza/defhydra (name body heads)
    `(eval (append '(defhydra ,name ,body) ,heads)))


  (general-def :keymaps 'override "C-c e e" 'amirreza/edit-emacs)
#+END_SRC
*** Evil Mode
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))

  (use-package evil
    :init
    (setq IS-EVIL t)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :init
    (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (setq evil-collection-mode-list
	  (remove 'lispy evil-collection-mode-list))
    (evil-collection-init))


  (use-package evil-escape
    :after evil
    :init
    (setq evil-escape-key-sequence "jk"
	  evil-escape-unordered-key-sequence t)
    (evil-escape-mode))


  (general-evil-setup)

  ;; Help me with stuff
  (general-nmap
    :prefix "SPC"
    "h f" 'describe-function
    "h v" 'describe-variable
    "h k" 'describe-key)

  ;; window stuff
  (general-nmap
    :keymaps 'override
    "C-j" 'evil-window-down
    "C-k" 'evil-window-up
    "C-h" 'evil-window-left
    "C-l" 'evil-window-right)

  ;; Files and navigation
  (general-nmap
    :prefix "SPC"
    "SPC" 'amirreza/find-file
    "x" 'execute-extended-command
    "f f" 'find-file
    "p" 'amirreza/project-hydra/body)

#+END_SRC
*** Windows and Buffers
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :general
    (:keymaps 'override "C-x o" 'ace-window))


  (use-package bufler
    :general
    (:keymaps 'override "C-x C-b" 'bufler)
    )

  (use-package winner
    :init
    (winner-mode 1)
    )
#+END_SRC
*** Dired File Manager
#+BEGIN_SRC emacs-lisp
  (use-package dired :straight nil
    :init
      (setq dired-dwim-target t  ; suggest a target for moving/copying intelligently
	  dired-hide-details-hide-symlink-targets nil
	  ;; don't prompt to revert, just do it
	  dired-auto-revert-buffer #'dired-buffer-stale-p
	  ;; Always copy/delete recursively
	  dired-recursive-copies  'always
	  dired-recursive-deletes 'top
	  large-file-warning-threshold nil
	  ;; Ask whether destination dirs should get created when copying/removing files.
	  dired-create-destination-dirs 'ask
	  ;; Screens are larger nowadays, we can afford slightly larger thumbnails
	  image-dired-thumb-size 150)

    :general
    (:keymaps 'dired-mode-map
	      "C-c C-e" 'wdired-change-to-wdired-mode))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode)
    )

  (setq
   IS-MAC (string-equal system-type "darwin")
   IS-LINUX (string-equal system-type "linux")
   IS-WINDOWS (string-equal system-type "windows"))

  (use-package dired-x
    :straight nil
    :hook (dired-mode . dired-omit-mode)
    :config
    (setq dired-omit-verbose nil
	  dired-omit-files
	  (concat dired-omit-files
		  "\\|^\\.DS_Store\\'"
		  "\\|^\\.project\\(?:ile\\)?\\'"
		  "\\|^\\.\\(?:svn\\|git\\)\\'"
		  "\\|^\\.ccls-cache\\'"
		  "\\|\\(?:\\.js\\)?\\.meta\\'"
		  "\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'"))
    ;; Disable the prompt about whether I want to kill the Dired buffer for a
    ;; deleted directory. Of course I do!
    (setq dired-clean-confirm-killing-deleted-buffers nil)
    ;; Let OS decide how to open certain files
    (when-let (cmd (cond (IS-MAC "open")
			 (IS-LINUX "xdg-open")
			 (IS-WINDOWS "start")))
      (setq dired-guess-shell-alist-user
	    `(("\\.\\(?:docx\\|pdf\\|djvu\\|eps\\)\\'" ,cmd)
	      ("\\.\\(?:jpe?g\\|png\\|gif\\|xpm\\)\\'" ,cmd)
	      ("\\.\\(?:xcf\\)\\'" ,cmd)
	      ("\\.csv\\'" ,cmd)
	      ("\\.tex\\'" ,cmd)
	      ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" ,cmd)
	      ("\\.\\(?:mp3\\|flac\\)\\'" ,cmd)
	      ("\\.html?\\'" ,cmd)
	      ("\\.md\\'" ,cmd)))))


  (use-package dired-git-info
    :general
    (:keymaps 'dired-mode-map
	      "C-c m g" 'dired-git-info))

  (setq mediaplayer (cond
	     (IS-MAC "/Applications/VLC.app/Contents/MacOS/VLC")
	     (IS-LINUX "vlc")
	     ))


  (setq pdfviewer (cond
		   (IS-MAC "open")
		   ))

  (setq imageviewer (cond
		     (IS-MAC "open")
		     ))

  (use-package openwith
    :init
    (openwith-mode)
    :config
    (setq openwith-associations
	  (list
	    (list (openwith-make-extension-regexp
		  '("mpg" "mpeg" "mp3" "mp4"
		    "avi" "wmv" "wav" "mov" "flv"
		    "ogm" "ogg" "mkv"))
		  mediaplayer
		  '(file))
	    (list (openwith-make-extension-regexp
		  '("xbm" "pbm" "pgm" "ppm" "pnm"
		    "png" "gif" "bmp" "tif" "jpeg" "jpg"))
		    imageviewer
		    '(file))
	    (list (openwith-make-extension-regexp
		  '("pdf"))
		  pdfviewer
		  '(file)))))
#+END_SRC
*** Emacs Help
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :general
    (:keymaps 'global-map
    [remap describe-key] 'helpful-key
    [remap describe-function] 'helpful-callable
    [remap describe-variable] 'helpful-variable))
#+END_SRC
*** UI
**** Themes
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package ef-themes)
  (use-package doom-themes)
  (use-package gruber-darker-theme)

  ;; Add custom themes path to themes load path
  (add-to-list 'custom-theme-load-path
	       (expand-file-name "themes" user-emacs-directory))

  (setq amirreza/--current-theme nil)

  (defun amirreza/switch-theme ()
    (interactive)
    (let ((theme (intern (completing-read "Theme: " (mapcar #'symbol-name
							    (custom-available-themes))))))
      (amirreza/load-theme theme)))

  (defun amirreza/load-theme (theme)
    (when (not (eq amirreza/--current-theme nil))
      (disable-theme amirreza/--current-theme))
    (setq amirreza/--current-theme theme)
    (load-theme amirreza/--current-theme t)
    (unless (display-graphic-p)
      (when amirreza/transparent
	(set-face-background 'default "0"))))

  (amirreza/load-theme amirreza/theme)
  (general-def :keymaps 'override "C-c t t" 'amirreza/switch-theme)
#+END_SRC
****** My Custom Jonathan Blow esque theme
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/themes/jblow.el :mkdirp yes
  ;;; jblow-theme.el --- Theme copied from jonathan blow emacs theme  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022  Amirreza Askarpour

  ;; Author: Amirreza Askarpour <amirreza@amirrezas-MacBook-Pro.local>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; 

  ;;; Code:



  (deftheme jblow "Theme from Great Jonathan Blow")

  (let* ((background "#072626")
	(selection "#0000ff")
	(keyword "#d4d4d4")
	(comment "#118a1a")
	(string "#2ec09c")
	(variable "#c8d4ec")
	(warning "#504038")
	(constant "#7ad0c6")
	(cursor "green")
	(mode-line "#d3b58d")
	(function "#ffffff")
	(macro "#8cde94")
	(punctuation "#8cde94")
	(hl-line "#084040")
	(builtin "#ffffff")
	(org-level1 function)
	(org-level2 function)
	(org-level3 function)
	(org-level4 function)
	(org-level5 function)
	(org-level6 function)
	)

    (custom-theme-set-faces
     'jblow

     `(default ((t (:foreground "#d3b58d" :background ,background))))
     `(cursor ((t (:background ,cursor))))

     `(font-lock-keyword-face           ((t (:foreground ,keyword))))
     `(font-lock-type-face              ((t (:foreground ,punctuation))))
     `(font-lock-constant-face          ((t (:foreground ,constant))))
     `(font-lock-variable-name-face     ((t (:foreground ,variable))))
     `(font-lock-builtin-face           ((t (:foreground ,builtin))))
     `(font-lock-string-face            ((t (:foreground ,string))))
     `(font-lock-comment-face           ((t (:foreground ,comment))))
     `(font-lock-comment-delimiter-face ((t (:foreground ,comment))))
     `(font-lock-doc-face               ((t (:foreground ,comment))))
     `(font-lock-function-name-face     ((t (:foreground ,function))))
     `(font-lock-doc-string-face        ((t (:foreground ,string))))
     `(font-lock-preprocessor-face      ((t (:foreground ,macro))))
     `(font-lock-warning-face           ((t (:foreground ,warning))))
     `(org-level-4 ((t (:foreground ,org-level4))))

     `(mode-line ((t (:foreground "black" :background ,mode-line))))
     `(region ((t (:background ,selection))))
     `(hl-line ((t :background ,hl-line)))
     `(highlight ((t :foreground nil :background ,selection)))
     `(persp-selected-face ((t :foreground "#ffffff")))
     )
    )


  ;;;###autoload
  (when load-file-name
    (add-to-list 'custom-theme-load-path
		 (file-name-as-directory (file-name-directory load-file-name))))

  (provide-theme 'jblow)
  ;;; jblow-theme.el ends here

#+END_SRC
**** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    (setq doom-modeline-height 35)
    (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
    (doom-modeline-mode 1))
#+END_SRC
**** Font
#+BEGIN_SRC emacs-lisp
  ;; Font settings
  (defun amirreza/display-benq ()
    (interactive)
    (setq amirreza/font-size "23")
    (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

  ;; My font setup for my laptop setup
  (defun amirreza/display-mac ()
    (interactive)
    (setq amirreza/font-size "15")
    (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

  ;; Interactively ask for font size
  (defun amirreza/set-font (size)
    (interactive "sSize: ")
    (setq amirreza/font-size size)
    (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

  ;; Reload font settings
  (defun amirreza/reload-font ()
    (interactive)
    (set-frame-font (concat amirreza/font " " amirreza/font-size) nil t))

  (amirreza/reload-font)

#+END_SRC
**** Cursor
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'box) ;; instead of box use a horizontal line.
  (set-cursor-color 'red)
  (blink-cursor-mode -1) ;; no blinking cursor.
#+END_SRC
**** Transparency
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha (list amirreza/transparent amirreza/transparent))
  (add-to-list 'default-frame-alist (append '(alpha) (list amirreza/transparent amirreza/transparent)))
#+END_SRC
*** Completion
**** In-Buffer Completion
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :straight
    (corfu :type git :host github :repo "emacs-straight/corfu" :files ("*" "extensions/*.el" (:exclude ".git")))

    :init
    (setq corfu-auto t)
    (setq corfu-auto-delay 0.1)
    :config
    (global-corfu-mode)
    (corfu-history-mode 1)
    (corfu-echo-mode 1)
    (corfu-popupinfo-mode 1))

  (use-package corfu-terminal
    :config
    (corfu-terminal-mode))

  (use-package corfu-prescient
    :after prescient
    :config
    (corfu-prescient-mode))
#+END_SRC
**** Minibuffer Completion
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (setq completion-cycle-threshold 3)
    (setq tab-always-indent 'complete))

  (use-package vertico
    :init
    (setq vertico-count 15)
    (setq vertico-cycle t)

    :config
    (vertico-mode))

  (use-package consult
    :init
    (setq consult-async-min-input 1))

  (use-package marginalia
    :config
    (marginalia-mode))

  (use-package orderless
    :config
    (setq completion-styles '(orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))))


  (use-package vertico-prescient
    :after prescient
    :config
    (vertico-prescient-mode))

  ;; Icons in minibuffer completion
  (use-package all-the-icons-completion
    :init
    (all-the-icons-completion-mode))

  ;; TODO: Maybe a context like completion
  ;; for example in org mode have a key to open minibuffer with just org mode functions
#+END_SRC
*** Editor
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :init
    (setq olivetti-body-width 100))

  ;; Search and replace beautifuly
  (use-package wgrep)
  ;; Ripgrep
  (use-package rg)

  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package delsel
    :straight nil
    :config
    (delete-selection-mode 1) ;; When a region of text is selected and then something is typed remove text and replace with what has been typed.
    )

  (use-package paren
    :straight nil
    :init
    (setq show-paren-delay 0) ;; highlight matching parens instantly.
    :config
    (show-paren-mode 1) ;; Highlight matching parens
    )

  (use-package display-line-numbers
    :straight nil
    :init
    (setq display-line-numbers-type 'relative) ;; relative line numbers
    :config
    (global-display-line-numbers-mode 1) ;; enable line numbers globaly
    )

  (defun amirreza/up-center ()
    (interactive)
    (previous-line (/ (window-height) 2))
    (recenter-top-bottom))

  (defun amirreza/down-center ()
    (interactive)
    (next-line (/ (window-height) 2))
    (recenter-top-bottom))

  ;; Best movement ever ?????
  (setq recenter-positions '(middle))

  (general-def :keymaps 'global-map
    "M-p" 'amirreza/up-center
    "M-n" 'amirreza/down-center
    )

  (use-package expand-region
    :general
    (:keymaps 'global-map
	      "C-=" 'er/expand-region
	      "C--" 'er/contract-region
	      ))

  ;; really important key if you use emacs in terminal
  (use-package simple
    :straight nil
    :general
    (:keymaps 'override "C-q" 'set-mark-command))
#+END_SRC
*** Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight nil
    :init
    (setq org-use-property-inheritance t)
    (setq org-startup-folded t) ;; Start org mode all headers collapsed
    (setq org-src-window-setup 'current-window)
    (setq org-src-tab-acts-natively nil)
    (defun amirreza/org-code-block ()
      (interactive)
      (insert (format "#+BEGIN_SRC %s\n\n#+END_SRC"
		      (completing-read "Language: "
				       '("emacs-lisp"
					 "go"
					 "rust"
					 "python"
					 "lua"
					 "bash"
					 "sh"
					 "fish"
					 "java"
					 )))))

    (defun amirreza/org-disable-tangle ()
      (interactive)
      (insert ":PROPERTIES:
  :header-args:    :tangle no
  :END:"
	      ))

    (defhydra amirreza/org-mode-hydra (:exit t)
      ("l" org-toggle-link-display "Toggle Link Display")
      ("b" amirreza/org-code-block "Insert a Code Block")
      ("n" amirreza/org-disable-tangle "Disable Tangle PROPERTIES")
      ("e" org-export-dispatch "Export")
      ("o" org-open-at-point "Open At Point")
      ("h" (lambda () (interactive) (org-export-as 'html)) "Org Export To HTML")
      ("t"  org-todo "Open At Point")
      )
    :general
    (:keymaps 'org-mode-map
	      "C-c m" 'amirreza/org-mode-hydra/body)
    (:keymaps 'org-src-mode-map
	      "C-c C-c" #'org-edit-src-exit
	      )
    (:states 'normal :keymaps 'org-mode-map "SPC m" 'amirreza/org-mode-hydra/body)
    )

  (use-package ox-reveal)
  (use-package ob-go)
  (use-package ob-rust)
  (use-package ob-php)
  (use-package htmlize)
  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))
  (use-package evil-org
    :if (boundp 'IS-EVIL) ;; Only if evil mode is enabled
    :hook (org-mode . evil-org-mode))
#+END_SRC
*** Git
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :init
    (global-git-gutter-mode))

  (use-package magit
    :general
    (:keymaps 'global-map "C-x g" 'magit)
    (:states 'normal "SPC g" 'magit)
    )
#+END_SRC
*** Project management
#+BEGIN_SRC emacs-lisp
  (use-package project
    :straight nil
    :general
    (:keymaps 'override "C-x p" 'amirreza/project-hydra/body)
    :init
    (defhydra amirreza/project-hydra (:exit t)
      ("f" project-find-file "Find File")
      ("p" project-switch-project "Switch To Project")
      ("b" project-buffers "Find Buffer In Project")
      ("c" project-compile "Compile Project")
    ))
#+END_SRC
*** Programming
#+BEGIN_SRC emacs-lisp
(setq amirreza/programming-hydra-heads '())
#+END_SRC
**** Flymake
#+BEGIN_SRC emacs-lisp
  (use-package flymake
    :straight nil
    :init
    (add-to-list 'amirreza/programming-hydra-heads '("n" flymake-goto-next-error "Goto Next Error"))
    (add-to-list 'amirreza/programming-hydra-heads '("p" flymake-goto-previous-error "Goto Previous Error"))
    (add-to-list 'amirreza/programming-hydra-heads '("e" consult-flymake "List of errors")))

#+END_SRC
**** Xref
#+BEGIN_SRC emacs-lisp
  (use-package xref
    :straight nil
    :general
      (:keymaps 'global-map
		"M-." 'xref-find-definitions ;; Goto definitions
		"M-," 'xref-go-back ;; hop back where you where before jump
		"M-r" 'xref-find-references ;; Goto references
    ))
#+END_SRC
**** Eldoc
Eldoc is a core emacs package that can be used
to show documentation and possibly errors both in =echo-area=
and a seperate buffer.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :straight nil
    :init
    (setq eldoc-echo-area-use-multiline-p nil)
    (setq eldoc-echo-area-display-truncation-message nil)
    (setq eldoc-echo-area-prefer-doc-buffer nil)
    (add-to-list 'amirreza/programming-hydra-heads '("." amirreza/eldoc-toggle-buffer "Toggle Eldoc for point"))
    :general
    (:keymaps 'global-map
		  "C-h ." 'amirreza/eldoc-toggle-buffer ;; Toggle eldoc buffer
		  "M-0" 'amirreza/eldoc-toggle-buffer ;; Toggle eldoc buffer
		  )
  
    :config
    (setq amirreza/--eldoc-window-open 'close)

    (defun amirreza/eldoc-toggle-buffer ()
      "Toggle eldoc buffer."
      (interactive)
      (if (eq 'open amirreza/--eldoc-window-open)
	  (progn
	    (message "closing...")
	    (dolist (w (window-list))
	      (when (string-match-p "\\*eldoc.*" (buffer-name (window-buffer w)))
		(quit-window nil w)
		))
	    (setq amirreza/--eldoc-window-open 'close))
	(progn
	  (message "opening...")
	  (eldoc-doc-buffer t)
	  (setq amirreza/--eldoc-window-open 'open))
	))
    (global-eldoc-mode))
#+END_SRC
**** LSP (Eglot)
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :straight nil
    :hook
    ((go-mode rust-mode python-mode php-mode) . 'eglot-ensure)
    :init
    (add-to-list 'amirreza/programming-hydra-heads '("d" eldoc "Document THING at POINT"))
    (add-to-list 'amirreza/programming-hydra-heads '("D" xref-find-definitions "Goto Definitions"))
    (add-to-list 'amirreza/programming-hydra-heads '("r" xref-find-references "Find References"))
    (add-to-list 'amirreza/programming-hydra-heads '("i" eglot-find-implementation "Find Implementations"))
    (add-to-list 'amirreza/programming-hydra-heads '("s" consult-eglot-symbols "Workspace Symbols"))
    (add-to-list 'amirreza/programming-hydra-heads '("R" eglot-rename "Rename"))
    (add-to-list 'amirreza/programming-hydra-heads '("f" eglot-format "Format")))

    (use-package consult-eglot)
#+END_SRC
**** Hydra
#+BEGIN_SRC emacs-lisp
  ;; If a language has no specific keys other that programming one like rust they can map this.
  (amirreza/defhydra amirreza/programming-hydra (:exit t)
		     amirreza/programming-hydra-heads)

  (general-def 
    :keymaps 'prog-mode-map "C-c m" 'amirreza/programming-hydra/body)


  (general-def
    :keymaps 'prog-mode-map
    :states 'normal
    "SPC m" 'amirreza/programming-hydra/body)
#+END_SRC
**** Languages
***** Golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :init
    (amirreza/defhydra amirreza/go-hydra
		       (:exit t)
		       (append amirreza/programming-hydra-heads '(("a" go-tag-add "Add Struct Tag"))))
    :general
    (:keymaps 'go-mode-map
	      "C-c m" 'amirreza/go-hydra/body)
    (:keymaps 'go-mode-map
	      "SPC m" 'amirreza/go-hydra/body)
    )


  (use-package go-tag)
#+END_SRC
***** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode)
#+END_SRC
***** Clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode) ;; LISP on JVM
  (use-package cider :after clojure-mode) ;; Clojure repl integrated into Emacs
#+END_SRC
***** Zig
#+BEGIN_SRC emacs-lisp
(use-package zig-mode) ;; Zig
#+END_SRC
***** Misc
#+BEGIN_SRC emacs-lisp
  (use-package apache-mode) ;; Apache config syntax
  (use-package systemd) ;; Systemd config syntax
  (use-package nginx-mode) ;; Nginx config syntax
  (use-package docker-compose-mode) ;; Docker-compose syntax
  (use-package dockerfile-mode) ;; Dockerfile syntax
  (use-package markdown-mode) ;; Markdown syntax
  (use-package yaml-mode) ;; Yaml
  (use-package fish-mode) ;; Fish
  (use-package csv-mode) ;; CSV
  (use-package json-mode) ;; Javascript Object Notation

#+END_SRC
*** Workspaces
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :init
  
    (setq persp-state-default-file (expand-file-name "sessions" user-emacs-directory))
    (setq persp-mode-prefix-key (kbd "C-c w"))


    (defun amirreza/save-session ()
      (interactive)
      (persp-state-save persp-state-default-file))


    (defun amirreza/load-session ()
      (interactive)
      (persp-state-load persp-state-default-file))
    (persp-mode 1)
    :hook
    (kill-emacs . amirreza/save-session)
    :general
    (:prefix "C-c w" :keymaps 'override "s" 'persp-switch)
    (:prefix "SPC w" :states 'normal :keymaps 'override "s" 'persp-switch)

    )
#+END_SRC
*** macOS setup
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
      (setq mac-command-modifier 'meta)
      (setq mac-option-modifier 'meta))
#+END_SRC
* Kitty
*** Themes
**** Dracula
#+BEGIN_SRC :tangle no
##+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  foreground            #f8f8f2
  background            #282a36
  selection_foreground  #ffffff
  selection_background  #44475a

  url_color #8be9fd

  # black
  color0  #21222c
  color8  #6272a4

  # red
  color1  #ff5555
  color9  #ff6e6e

  # green
  color2  #50fa7b
  color10 #69ff94

  # yellow
  color3  #f1fa8c
  color11 #ffffa5

  # blue
  color4  #bd93f9
  color12 #d6acff

  # magenta
  color5  #ff79c6
  color13 #ff92df

  # cyan
  color6  #8be9fd
  color14 #a4ffff

  # white
  color7  #f8f8f2
  color15 #ffffff

  # Cursor colors
  cursor            #f8f8f2
  cursor_text_color background

  # Tab bar colors
  active_tab_foreground   #282a36
  active_tab_background   #f8f8f2
  inactive_tab_foreground #282a36
  inactive_tab_background #6272a4

  # Marks
  mark1_foreground #282a36
  mark1_background #ff5555

  # Splits/Windows
  active_border_color #f8f8f2
  inactive_border_color #6272a4


#+END_SRC
*** Font
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  # Font configuration
  # font_family OperatorMono Nerd Font Medium
  # bold_font OperatorMono Nerd Font Bold
  # italic_font  OperatorMono Nerd Font Italic
  # bold_italic_font OperatorMono Nerd Font Bold Italic

  font_family FiraCode Nerd Font Mono Medium
  bold_font FiraCode Nerd Font Mono Bold
  italic_font  FiraCode Nerd Font Mono Italic
  bold_italic_font FiraCode Nerd Font Mono Bold Italic

  # font_family JetBrainsMono Nerd Font Mono Regular
  # bold_font JetBrainsMono Nerd Font Mono Bold
  # italic_font JetBrainsMono Nerd Font Mono Italic
  # bold_italic_font JetBrainsMono Nerd Font Mono Bold Italic
  font_size 18
#+END_SRC
*** Cursor
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  shell_integration no-cursor
  cursor_shape block
  cursor_blink_interval 0
#+END_SRC
*** Performance
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  sync_to_monitor yes
  repaint_delay 5
  input_delay 2
#+END_SRC
*** No Audio Bell
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  enable_audio_bell no
#+END_SRC
*** Keybindings
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  clear_all_shortcuts yes

  kitty_mod ctrl+shift

  map mod+equal change_font_size all +2.0
  map mod+minus change_font_size all -2.0

  map cmd+equal change_font_size all +2.0
  map cmd+minus change_font_size all -2.0

  map cmd+c copy_to_clipboard
  map cmd+v paste_from_clipboard

  map cmd+t new_tab
  map cmd+left previous_tab
  map cmd+right next_tab
#+END_SRC
*** Tab bar
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  tab_bar_align left
  tab_bar_edge bottom

  tab_title_template "{title}"
#+END_SRC
*** macOS
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  macos_titlebar_color               background
  macos_option_as_alt                both
  macos_quit_when_last_window_closed yes
  macos_show_window_title_in         none
  macos_custom_beam_cursor           yes
#+END_SRC
*** Terminal Type
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  term xterm-256color
#+END_SRC
*** Background Opacity
#+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf :mkdirp yes
  background_opacity 0.90
#+END_SRC
* Zsh
*** Shebang
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes
  #!/usr/bin/env zsh
#+END_SRC
*** Antigen Setup
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes
  [ ! -f "$HOME/.antigen.zsh" ] && curl -L git.io/antigen > antigen.zsh
  source $HOME/.antigen.zsh
#+END_SRC
*** Plugins
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes
  antigen use oh-my-zsh
  antigen bundle zsh-users/zsh-syntax-highlighting
  antigen bundle zsh-users/zsh-autosuggestions
  antigen bundle unixorn/fzf-zsh-plugin@main
  antigen apply
#+END_SRC
*** Environment Variables
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes
  export GO111MODULE='on'
  export GOPATH="$HOME"
  export GOPRIVATE='gitlab.snapp.ir'
  export GOPROXY='goproxy.io,direct'
  export EDITOR='emacsclient -t -a ""'
  export PATH="$HOME/.emacs.d/bin/:/Applications/Emacs.app/Contents/MacOS:$GOPATH/bin:/opt/homebrew/bin::$HOME/.config/composer/vendor/bin:$GOROOT/bin:$HOME/.cargo/bin:$HOME/.local/bin:$PATH:$HOME/.composer/vendor/bin"

  [ -f "$HOME/.ghcup/env" ] && source "$HOME/.ghcup/env" # ghcup-env
  [ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"

  export HOMEBREW_NO_AUTO_UPDATE=1

  export FZF_DEFAULT_OPTS='--height 20%'
  export FZF_DEFAULT_COMMAND='rg --files'

  ss_proxy() {
      export http_proxy='http://localhost:1087'
      export https_proxy='http://localhost:1087'
  }


#+END_SRC
*** Aliases
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes
  alias emacs='emacsclient -t -a ""'
  alias e='emacs'
#+END_SRC
*** Starship prompt
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes
if ! command -v starship &> /dev/null
then
    curl -sS https://starship.rs/install.sh | sh
fi
eval "$(starship init zsh)"
#+END_SRC
* Git Global Config
*** User Info
#+BEGIN_SRC config :tangle ~/.config/git/config :mkdirp yes
[user]
	email = raskarpour@gmail.com
	name = amirrezaask
#+END_SRC
#+BEGIN_SRC config :tangle ~/.config/git/config :mkdirp yes
[alias]
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

[push]
  default = current

[interactive]
   diffFilter = delta --color-only

[core]
    pager = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true  # use n and N to move between diff sections

[merge]
    conflictstyle = diff3

[diff]
    colorMoved = default
# https://github.com/dandavison/delta 

#+END_SRC
